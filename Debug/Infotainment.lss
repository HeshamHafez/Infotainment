
Infotainment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  000045cc  00004660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ff  0080013a  0080013a  0000473a  2**0
                  ALLOC
  3 .stab         00002e08  00000000  00000000  0000473c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e7  00000000  00000000  00007544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000862b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000878b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000891a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a95f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ba60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ce26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 20 	call	0x4082	; 0x4082 <main>
      8a:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e2       	ldi	r26, 0x2A	; 42
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 22 	jmp	0x456a	; 0x456a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e2       	ldi	r22, 0x2A	; 42
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b9 22 	jmp	0x4572	; 0x4572 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_WritePin>:

#include "DIO.h"


void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_WritePin+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==HIGH)
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <DIO_WritePin+0x16>
     cb2:	6d c0       	rjmp	.+218    	; 0xd8e <DIO_WritePin+0xf0>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	a0 f4       	brcc	.+40     	; 0xce2 <DIO_WritePin+0x44>
		{
			SET_BIT(DIO_PORTA,PinNum);
     cba:	ab e3       	ldi	r26, 0x3B	; 59
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb e3       	ldi	r30, 0x3B	; 59
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_WritePin+0x3a>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_WritePin+0x36>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	c8 c0       	rjmp	.+400    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 30       	cpi	r24, 0x08	; 8
     ce6:	c8 f0       	brcs	.+50     	; 0xd1a <DIO_WritePin+0x7c>
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 31       	cpi	r24, 0x10	; 16
     cec:	b0 f4       	brcc	.+44     	; 0xd1a <DIO_WritePin+0x7c>
		{
			SET_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
     cee:	a8 e3       	ldi	r26, 0x38	; 56
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 e3       	ldi	r30, 0x38	; 56
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	08 97       	sbiw	r24, 0x08	; 8
     d02:	9c 01       	movw	r18, r24
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_WritePin+0x72>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_WritePin+0x6e>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	ac c0       	rjmp	.+344    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	80 31       	cpi	r24, 0x10	; 16
     d1e:	c8 f0       	brcs	.+50     	; 0xd52 <DIO_WritePin+0xb4>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	88 31       	cpi	r24, 0x18	; 24
     d24:	b0 f4       	brcc	.+44     	; 0xd52 <DIO_WritePin+0xb4>
		{
			SET_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
     d26:	a5 e3       	ldi	r26, 0x35	; 53
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e3       	ldi	r30, 0x35	; 53
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	40 97       	sbiw	r24, 0x10	; 16
     d3a:	9c 01       	movw	r18, r24
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_WritePin+0xaa>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_WritePin+0xa6>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	90 c0       	rjmp	.+288    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 31       	cpi	r24, 0x18	; 24
     d56:	08 f4       	brcc	.+2      	; 0xd5a <DIO_WritePin+0xbc>
     d58:	8c c0       	rjmp	.+280    	; 0xe72 <DIO_WritePin+0x1d4>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	80 32       	cpi	r24, 0x20	; 32
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <DIO_WritePin+0xc4>
     d60:	88 c0       	rjmp	.+272    	; 0xe72 <DIO_WritePin+0x1d4>
		{
			SET_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
     d62:	a2 e3       	ldi	r26, 0x32	; 50
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e2 e3       	ldi	r30, 0x32	; 50
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	48 97       	sbiw	r24, 0x18	; 24
     d76:	9c 01       	movw	r18, r24
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_WritePin+0xe6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_WritePin+0xe2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	72 c0       	rjmp	.+228    	; 0xe72 <DIO_WritePin+0x1d4>
		}
	}
	else if(PinValue==DIO_PIN0)
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_WritePin+0xf8>
     d94:	6e c0       	rjmp	.+220    	; 0xe72 <DIO_WritePin+0x1d4>
	{

		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	88 30       	cpi	r24, 0x08	; 8
     d9a:	a8 f4       	brcc	.+42     	; 0xdc6 <DIO_WritePin+0x128>
		{
			CLEAR_BIT(DIO_PORTA,PinNum);
     d9c:	ab e3       	ldi	r26, 0x3B	; 59
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e3       	ldi	r30, 0x3B	; 59
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_WritePin+0x11c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_WritePin+0x118>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	56 c0       	rjmp	.+172    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	d0 f0       	brcs	.+52     	; 0xe00 <DIO_WritePin+0x162>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	80 31       	cpi	r24, 0x10	; 16
     dd0:	b8 f4       	brcc	.+46     	; 0xe00 <DIO_WritePin+0x162>
		{
			CLEAR_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	08 97       	sbiw	r24, 0x08	; 8
     de6:	9c 01       	movw	r18, r24
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_WritePin+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_WritePin+0x152>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	39 c0       	rjmp	.+114    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	80 31       	cpi	r24, 0x10	; 16
     e04:	d0 f0       	brcs	.+52     	; 0xe3a <DIO_WritePin+0x19c>
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 31       	cpi	r24, 0x18	; 24
     e0a:	b8 f4       	brcc	.+46     	; 0xe3a <DIO_WritePin+0x19c>
		{
			CLEAR_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
     e0c:	a5 e3       	ldi	r26, 0x35	; 53
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e5 e3       	ldi	r30, 0x35	; 53
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	40 97       	sbiw	r24, 0x10	; 16
     e20:	9c 01       	movw	r18, r24
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_WritePin+0x190>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_WritePin+0x18c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	1c c0       	rjmp	.+56     	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 31       	cpi	r24, 0x18	; 24
     e3e:	c8 f0       	brcs	.+50     	; 0xe72 <DIO_WritePin+0x1d4>
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	b0 f4       	brcc	.+44     	; 0xe72 <DIO_WritePin+0x1d4>
		{
			CLEAR_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
     e46:	a2 e3       	ldi	r26, 0x32	; 50
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e2 e3       	ldi	r30, 0x32	; 50
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	48 97       	sbiw	r24, 0x18	; 24
     e5a:	9c 01       	movw	r18, r24
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_WritePin+0x1ca>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_WritePin+0x1c6>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24

		}
	}

}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_ReadPin+0x6>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	98 f4       	brcc	.+38     	; 0xeb4 <DIO_ReadPin+0x38>
	{
		return GET_BIT(DIO_PINA,PinNum);
     e8e:	e9 e3       	ldi	r30, 0x39	; 57
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_ReadPin+0x2a>
     ea2:	55 95       	asr	r21
     ea4:	47 95       	ror	r20
     ea6:	8a 95       	dec	r24
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_ReadPin+0x26>
     eaa:	ca 01       	movw	r24, r20
     eac:	58 2f       	mov	r21, r24
     eae:	51 70       	andi	r21, 0x01	; 1
     eb0:	5a 83       	std	Y+2, r21	; 0x02
     eb2:	50 c0       	rjmp	.+160    	; 0xf54 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	88 30       	cpi	r24, 0x08	; 8
     eb8:	b8 f0       	brcs	.+46     	; 0xee8 <DIO_ReadPin+0x6c>
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	80 31       	cpi	r24, 0x10	; 16
     ebe:	a0 f4       	brcc	.+40     	; 0xee8 <DIO_ReadPin+0x6c>
	{
		return GET_BIT(DIO_PINB,(PinNum-DIO_PIN8));
     ec0:	e6 e3       	ldi	r30, 0x36	; 54
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	08 97       	sbiw	r24, 0x08	; 8
     ed2:	a9 01       	movw	r20, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_ReadPin+0x5e>
     ed6:	55 95       	asr	r21
     ed8:	47 95       	ror	r20
     eda:	8a 95       	dec	r24
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_ReadPin+0x5a>
     ede:	ca 01       	movw	r24, r20
     ee0:	58 2f       	mov	r21, r24
     ee2:	51 70       	andi	r21, 0x01	; 1
     ee4:	5a 83       	std	Y+2, r21	; 0x02
     ee6:	36 c0       	rjmp	.+108    	; 0xf54 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	80 31       	cpi	r24, 0x10	; 16
     eec:	b8 f0       	brcs	.+46     	; 0xf1c <DIO_ReadPin+0xa0>
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	88 31       	cpi	r24, 0x18	; 24
     ef2:	a0 f4       	brcc	.+40     	; 0xf1c <DIO_ReadPin+0xa0>
	{
		return GET_BIT(DIO_PINC,(PinNum-DIO_PIN16));
     ef4:	e3 e3       	ldi	r30, 0x33	; 51
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	40 97       	sbiw	r24, 0x10	; 16
     f06:	a9 01       	movw	r20, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_ReadPin+0x92>
     f0a:	55 95       	asr	r21
     f0c:	47 95       	ror	r20
     f0e:	8a 95       	dec	r24
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_ReadPin+0x8e>
     f12:	ca 01       	movw	r24, r20
     f14:	58 2f       	mov	r21, r24
     f16:	51 70       	andi	r21, 0x01	; 1
     f18:	5a 83       	std	Y+2, r21	; 0x02
     f1a:	1c c0       	rjmp	.+56     	; 0xf54 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	88 31       	cpi	r24, 0x18	; 24
     f20:	b8 f0       	brcs	.+46     	; 0xf50 <DIO_ReadPin+0xd4>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 32       	cpi	r24, 0x20	; 32
     f26:	a0 f4       	brcc	.+40     	; 0xf50 <DIO_ReadPin+0xd4>
	{
		return GET_BIT(DIO_PIND,(PinNum-DIO_PIN24));
     f28:	e0 e3       	ldi	r30, 0x30	; 48
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	48 97       	sbiw	r24, 0x18	; 24
     f3a:	a9 01       	movw	r20, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_ReadPin+0xc6>
     f3e:	55 95       	asr	r21
     f40:	47 95       	ror	r20
     f42:	8a 95       	dec	r24
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_ReadPin+0xc2>
     f46:	ca 01       	movw	r24, r20
     f48:	58 2f       	mov	r21, r24
     f4a:	51 70       	andi	r21, 0x01	; 1
     f4c:	5a 83       	std	Y+2, r21	; 0x02
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_ReadPin+0xd8>
	}
	return DIO_PIN8;
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DIO_SetPinDirection+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==INPUT)
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 23       	and	r24, r24
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_SetPinDirection+0x16>
     f74:	71 c0       	rjmp	.+226    	; 0x1058 <DIO_SetPinDirection+0xf8>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	a8 f4       	brcc	.+42     	; 0xfa6 <DIO_SetPinDirection+0x46>
		{
			CLEAR_BIT(DIO_DDRA,PinNum);
     f7c:	aa e3       	ldi	r26, 0x3A	; 58
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ea e3       	ldi	r30, 0x3A	; 58
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_SetPinDirection+0x3a>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_SetPinDirection+0x36>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	c7 c0       	rjmp	.+398    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	d0 f0       	brcs	.+52     	; 0xfe0 <DIO_SetPinDirection+0x80>
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	80 31       	cpi	r24, 0x10	; 16
     fb0:	b8 f4       	brcc	.+46     	; 0xfe0 <DIO_SetPinDirection+0x80>
		{
			CLEAR_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
     fb2:	a7 e3       	ldi	r26, 0x37	; 55
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e3       	ldi	r30, 0x37	; 55
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	08 97       	sbiw	r24, 0x08	; 8
     fc6:	9c 01       	movw	r18, r24
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_SetPinDirection+0x74>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_SetPinDirection+0x70>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	aa c0       	rjmp	.+340    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	d0 f0       	brcs	.+52     	; 0x101a <DIO_SetPinDirection+0xba>
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	88 31       	cpi	r24, 0x18	; 24
     fea:	b8 f4       	brcc	.+46     	; 0x101a <DIO_SetPinDirection+0xba>
		{
			CLEAR_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
     fec:	a4 e3       	ldi	r26, 0x34	; 52
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	40 97       	sbiw	r24, 0x10	; 16
    1000:	9c 01       	movw	r18, r24
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_SetPinDirection+0xae>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_SetPinDirection+0xaa>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	8d c0       	rjmp	.+282    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	88 31       	cpi	r24, 0x18	; 24
    101e:	08 f4       	brcc	.+2      	; 0x1022 <DIO_SetPinDirection+0xc2>
    1020:	89 c0       	rjmp	.+274    	; 0x1134 <DIO_SetPinDirection+0x1d4>
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	80 32       	cpi	r24, 0x20	; 32
    1026:	08 f0       	brcs	.+2      	; 0x102a <DIO_SetPinDirection+0xca>
    1028:	85 c0       	rjmp	.+266    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		{
			CLEAR_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    102a:	a1 e3       	ldi	r26, 0x31	; 49
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e1 e3       	ldi	r30, 0x31	; 49
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	48 97       	sbiw	r24, 0x18	; 24
    103e:	9c 01       	movw	r18, r24
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_SetPinDirection+0xec>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_SetPinDirection+0xe8>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	6e c0       	rjmp	.+220    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
	}
	else if(PinDirection==OUTPUT)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	09 f0       	breq	.+2      	; 0x1060 <DIO_SetPinDirection+0x100>
    105e:	6a c0       	rjmp	.+212    	; 0x1134 <DIO_SetPinDirection+0x1d4>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	a0 f4       	brcc	.+40     	; 0x108e <DIO_SetPinDirection+0x12e>
		{
			SET_BIT(DIO_DDRA,PinNum);
    1066:	aa e3       	ldi	r26, 0x3A	; 58
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ea e3       	ldi	r30, 0x3A	; 58
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_SetPinDirection+0x124>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_SetPinDirection+0x120>
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	53 c0       	rjmp	.+166    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	88 30       	cpi	r24, 0x08	; 8
    1092:	c8 f0       	brcs	.+50     	; 0x10c6 <DIO_SetPinDirection+0x166>
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	80 31       	cpi	r24, 0x10	; 16
    1098:	b0 f4       	brcc	.+44     	; 0x10c6 <DIO_SetPinDirection+0x166>
		{
			SET_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
    109a:	a7 e3       	ldi	r26, 0x37	; 55
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	08 97       	sbiw	r24, 0x08	; 8
    10ae:	9c 01       	movw	r18, r24
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_SetPinDirection+0x15c>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_SetPinDirection+0x158>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	37 c0       	rjmp	.+110    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	80 31       	cpi	r24, 0x10	; 16
    10ca:	c8 f0       	brcs	.+50     	; 0x10fe <DIO_SetPinDirection+0x19e>
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 31       	cpi	r24, 0x18	; 24
    10d0:	b0 f4       	brcc	.+44     	; 0x10fe <DIO_SetPinDirection+0x19e>
		{
			SET_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
    10d2:	a4 e3       	ldi	r26, 0x34	; 52
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	40 97       	sbiw	r24, 0x10	; 16
    10e6:	9c 01       	movw	r18, r24
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_SetPinDirection+0x194>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_SetPinDirection+0x190>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	88 31       	cpi	r24, 0x18	; 24
    1102:	c0 f0       	brcs	.+48     	; 0x1134 <DIO_SetPinDirection+0x1d4>
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	80 32       	cpi	r24, 0x20	; 32
    1108:	a8 f4       	brcc	.+42     	; 0x1134 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    110a:	a1 e3       	ldi	r26, 0x31	; 49
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e1 e3       	ldi	r30, 0x31	; 49
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	48 97       	sbiw	r24, 0x18	; 24
    111e:	9c 01       	movw	r18, r24
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_SetPinDirection+0x1cc>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_SetPinDirection+0x1c8>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
		}
	}


}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TIMER_init>:
 *
 * Return:			NULL
 *******************************************************************************/

void TIMER_init(void)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	/**************************** CTC Mode Init ***************************************/
	TIMER_TCCR0 &= (~((1<<WGM00)|(1<<WGM01)));			/*Clear WGM00 & WGM01 Bits in TCCR0 Registers*/
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	87 7b       	andi	r24, 0xB7	; 183
    1152:	8c 93       	st	X, r24
	TIMER_TCCR0 |= (1<<WGM01);							/*Set WGM01 Bit*/
    1154:	a3 e5       	ldi	r26, 0x53	; 83
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e3 e5       	ldi	r30, 0x53	; 83
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 60       	ori	r24, 0x08	; 8
    1160:	8c 93       	st	X, r24
	/**************************** OCR0 Value ***************************************/
	TIMER_OCR0   = OCR0_VALUE;
    1162:	ec e5       	ldi	r30, 0x5C	; 92
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8d e7       	ldi	r24, 0x7D	; 125
    1168:	80 83       	st	Z, r24
	/**************************** Pre-Scaler Bit Init ***************************************/
	TIMER_TCCR0 &= (~((1<<CS00)|(1<<CS01)|(1<<CS02)));	/*Clear CS00 & CS01 & CS02 Bits in TCCR0 Registers*/
    116a:	a3 e5       	ldi	r26, 0x53	; 83
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e3 e5       	ldi	r30, 0x53	; 83
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 7f       	andi	r24, 0xF8	; 248
    1176:	8c 93       	st	X, r24
	TIMER_TCCR0 |= (1<<CS01);							/*Set CS01 Bit ----> pre-scaler = 256*/
    1178:	a3 e5       	ldi	r26, 0x53	; 83
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e3 e5       	ldi	r30, 0x53	; 83
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	8c 93       	st	X, r24
	TIMER_TCCR0 |= (1<<CS00);							/*Set CS00 Bit ----> pre-scaler = 256*/
    1186:	a3 e5       	ldi	r26, 0x53	; 83
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e3 e5       	ldi	r30, 0x53	; 83
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
	TIMER_TIMSK |= (1u<<OCIE);
    1194:	a9 e5       	ldi	r26, 0x59	; 89
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e9 e5       	ldi	r30, 0x59	; 89
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	8c 93       	st	X, r24

}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <TIMER_Deinit>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void TIMER_Deinit(void)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	/**************************** Pre-Scaler Bit DeInit ***************************************/
	TIMER_TCCR0 &= (~((1<<CS00)|(1<<CS01)|(1<<CS02)));	/*Clear CS00 & CS01 & CS02 Bits in TCCR0 Registers*/
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	8c 93       	st	X, r24
	/**************************** OCR0 Value **************************************************/
	TIMER_OCR0=LOW;
    11be:	ec e5       	ldi	r30, 0x5C	; 92
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	10 82       	st	Z, r1
}
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <KeyPad_Init>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void KeyPad_Init(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	/*set Pins Of KeyPad*/
	DIO_SetPinDirection(DIO_PIN18,INPUT);
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN19,INPUT);
    11da:	83 e1       	ldi	r24, 0x13	; 19
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN20,INPUT);
    11e2:	84 e1       	ldi	r24, 0x14	; 20
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN21,OUTPUT);
    11ea:	85 e1       	ldi	r24, 0x15	; 21
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN22,OUTPUT);
    11f2:	86 e1       	ldi	r24, 0x16	; 22
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN23,OUTPUT);
    11fa:	87 e1       	ldi	r24, 0x17	; 23
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_WritePin(DIO_PIN18,HIGH);
    1202:	82 e1       	ldi	r24, 0x12	; 18
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN19,HIGH);
    120a:	83 e1       	ldi	r24, 0x13	; 19
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN20,HIGH);
    1212:	84 e1       	ldi	r24, 0x14	; 20
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN21,LOW);
    121a:	85 e1       	ldi	r24, 0x15	; 21
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN22,LOW);
    1222:	86 e1       	ldi	r24, 0x16	; 22
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN23,LOW);
    122a:	87 e1       	ldi	r24, 0x17	; 23
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <KeyPad_getPressedKey>:
 * Outputs:			NULL
 *
 * Return:			pressed key (uint8)
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <KeyPad_getPressedKey+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <KeyPad_getPressedKey+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	/*return value*/
	uint8 ReturnVal=10;
    1244:	8a e0       	ldi	r24, 0x0A	; 10
    1246:	8b 83       	std	Y+3, r24	; 0x03

	/*variables use to loop pn rows and column*/
	uint8 row,col;

	/*Loop to check if Key is pressed to return its value*/
	for(col=0;col<N_COL;col++)
    1248:	19 82       	std	Y+1, r1	; 0x01
    124a:	4d c0       	rjmp	.+154    	; 0x12e6 <KeyPad_getPressedKey+0xae>
	{
		KEYPAD_PORT_DIR = (0b00100000<<col);
    124c:	e4 e3       	ldi	r30, 0x34	; 52
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <KeyPad_getPressedKey+0x28>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	2a 95       	dec	r18
    1262:	e2 f7       	brpl	.-8      	; 0x125c <KeyPad_getPressedKey+0x24>
    1264:	80 83       	st	Z, r24
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <KeyPad_getPressedKey+0x44>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <KeyPad_getPressedKey+0x40>
    1280:	80 95       	com	r24
    1282:	80 83       	st	Z, r24

		for(row=START_ROW;row<END_ROW;row++)
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	28 c0       	rjmp	.+80     	; 0x12da <KeyPad_getPressedKey+0xa2>
		{
			if(GET_BIT(KEYPAD_PORT_IN,row) == 0)
    128a:	e3 e3       	ldi	r30, 0x33	; 51
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <KeyPad_getPressedKey+0x6a>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <KeyPad_getPressedKey+0x66>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	91 f4       	brne	.+36     	; 0x12d4 <KeyPad_getPressedKey+0x9c>
			{
				/*global g_row flag sign the row of pressed key */
				g_row = row;
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 93 3d 01 	sts	0x013D, r24

				/*create DeBouncing Task to avoid bouncing on the pressed Key*/
				SOS_CreateTask(PRIORITY_2,4,DeBounching_Task);
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	3a e0       	ldi	r19, 0x0A	; 10
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	64 e0       	ldi	r22, 0x04	; 4
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	0e 94 47 21 	call	0x428e	; 0x428e <SOS_CreateTask>
				/*check on Configurations Mode*/
#if(N_COL ==3)
#if(N_ROW == 3)

				/*return value of pressed Key*/
				return  KeyPad_3x3_switch(row-START_ROW,col);
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	82 50       	subi	r24, 0x02	; 2
    12ca:	69 81       	ldd	r22, Y+1	; 0x01
    12cc:	0e 94 81 09 	call	0x1302	; 0x1302 <KeyPad_3x3_switch>
    12d0:	8c 83       	std	Y+4, r24	; 0x04
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <KeyPad_getPressedKey+0xba>
	for(col=0;col<N_COL;col++)
	{
		KEYPAD_PORT_DIR = (0b00100000<<col);
		KEYPAD_PORT_OUT = (~(0b00100000<<col));

		for(row=START_ROW;row<END_ROW;row++)
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	85 30       	cpi	r24, 0x05	; 5
    12de:	a8 f2       	brcs	.-86     	; 0x128a <KeyPad_getPressedKey+0x52>

	/*variables use to loop pn rows and column*/
	uint8 row,col;

	/*Loop to check if Key is pressed to return its value*/
	for(col=0;col<N_COL;col++)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	8f 5f       	subi	r24, 0xFF	; 255
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <KeyPad_getPressedKey+0xb6>
    12ec:	af cf       	rjmp	.-162    	; 0x124c <KeyPad_getPressedKey+0x14>
				return KeyPad_4x4_switch(row-START_ROW,col);
#endif
			}
		}
	}
	return ReturnVal;
    12ee:	5b 81       	ldd	r21, Y+3	; 0x03
    12f0:	5c 83       	std	Y+4, r21	; 0x04
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <KeyPad_3x3_switch>:
 * Outputs:			NULL
 *
 * Return:			value of Pressed Key (uint8)
 *******************************************************************************/
static uint8 KeyPad_3x3_switch(uint8 row, uint8 col)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2b 97       	sbiw	r28, 0x0b	; 11
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	6b 83       	std	Y+3, r22	; 0x03
	/*variable of return value*/
	uint8 ReturnVal = 0;
    131a:	19 82       	std	Y+1, r1	; 0x01

	/*determine row of pressed key*/
	switch(row)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3b 87       	std	Y+11, r19	; 0x0b
    1324:	2a 87       	std	Y+10, r18	; 0x0a
    1326:	8a 85       	ldd	r24, Y+10	; 0x0a
    1328:	9b 85       	ldd	r25, Y+11	; 0x0b
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	41 f1       	breq	.+80     	; 0x1380 <KeyPad_3x3_switch+0x7e>
    1330:	2a 85       	ldd	r18, Y+10	; 0x0a
    1332:	3b 85       	ldd	r19, Y+11	; 0x0b
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	09 f4       	brne	.+2      	; 0x133c <KeyPad_3x3_switch+0x3a>
    133a:	3e c0       	rjmp	.+124    	; 0x13b8 <KeyPad_3x3_switch+0xb6>
    133c:	8a 85       	ldd	r24, Y+10	; 0x0a
    133e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	09 f0       	breq	.+2      	; 0x1346 <KeyPad_3x3_switch+0x44>
    1344:	54 c0       	rjmp	.+168    	; 0x13ee <KeyPad_3x3_switch+0xec>
	{
	case 0:
		/*determine column of pressed key*/
		switch(col)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	39 87       	std	Y+9, r19	; 0x09
    134e:	28 87       	std	Y+8, r18	; 0x08
    1350:	88 85       	ldd	r24, Y+8	; 0x08
    1352:	99 85       	ldd	r25, Y+9	; 0x09
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	69 f0       	breq	.+26     	; 0x1374 <KeyPad_3x3_switch+0x72>
    135a:	28 85       	ldd	r18, Y+8	; 0x08
    135c:	39 85       	ldd	r19, Y+9	; 0x09
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	59 f0       	breq	.+22     	; 0x137a <KeyPad_3x3_switch+0x78>
    1364:	88 85       	ldd	r24, Y+8	; 0x08
    1366:	99 85       	ldd	r25, Y+9	; 0x09
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	09 f0       	breq	.+2      	; 0x136e <KeyPad_3x3_switch+0x6c>
    136c:	40 c0       	rjmp	.+128    	; 0x13ee <KeyPad_3x3_switch+0xec>
		{
		case 0: ReturnVal = R1C1;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	3d c0       	rjmp	.+122    	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		case 1: ReturnVal = R1C2;
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	3a c0       	rjmp	.+116    	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		case 2: ReturnVal = R1C3;
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	37 c0       	rjmp	.+110    	; 0x13ee <KeyPad_3x3_switch+0xec>
		}
		break;

	case 1:
		/*determine column of pressed key*/
		switch(col)
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3f 83       	std	Y+7, r19	; 0x07
    1388:	2e 83       	std	Y+6, r18	; 0x06
    138a:	8e 81       	ldd	r24, Y+6	; 0x06
    138c:	9f 81       	ldd	r25, Y+7	; 0x07
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	61 f0       	breq	.+24     	; 0x13ac <KeyPad_3x3_switch+0xaa>
    1394:	2e 81       	ldd	r18, Y+6	; 0x06
    1396:	3f 81       	ldd	r19, Y+7	; 0x07
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	51 f0       	breq	.+20     	; 0x13b2 <KeyPad_3x3_switch+0xb0>
    139e:	8e 81       	ldd	r24, Y+6	; 0x06
    13a0:	9f 81       	ldd	r25, Y+7	; 0x07
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	21 f5       	brne	.+72     	; 0x13ee <KeyPad_3x3_switch+0xec>
		{
		case 0: ReturnVal = R2C1;
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	21 c0       	rjmp	.+66     	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		case 1: ReturnVal = R2C2;
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	1e c0       	rjmp	.+60     	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		case 2: ReturnVal = R2C3;
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		}
			break;
	case 2:
		/*determine column of pressed key*/
		switch(col)
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3d 83       	std	Y+5, r19	; 0x05
    13c0:	2c 83       	std	Y+4, r18	; 0x04
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <KeyPad_3x3_switch+0xe2>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	51 f0       	breq	.+20     	; 0x13ea <KeyPad_3x3_switch+0xe8>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	41 f4       	brne	.+16     	; 0x13ee <KeyPad_3x3_switch+0xec>
		{
		case 0: ReturnVal = R3C1;
    13de:	87 e0       	ldi	r24, 0x07	; 7
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		case 1: ReturnVal = R3C2;
    13e4:	88 e0       	ldi	r24, 0x08	; 8
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <KeyPad_3x3_switch+0xec>
			break;
		case 2: ReturnVal = R3C3;
    13ea:	89 e0       	ldi	r24, 0x09	; 9
    13ec:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}

	/*return value of pressed key*/
	return ReturnVal;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f0:	2b 96       	adiw	r28, 0x0b	; 11
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <DeBounching_Task>:
	return ReturnVal;
}
#endif

void DeBounching_Task(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <DeBounching_Task+0x6>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	/*LED on to calculate CPU Load because of this task*/
	DIO_WritePin(DIO_PIN13,HIGH);
    140c:	8d e0       	ldi	r24, 0x0D	; 13
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	/*Static variables to count number of entrance for this task to make de_bouncing task*/
	static uint8 Press_count 	= 1;
	static uint8 Release_count = 10;

	/*switch on button cases*/
	switch(Button_State)
    1414:	80 91 39 01 	lds	r24, 0x0139
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3a 83       	std	Y+2, r19	; 0x02
    141e:	29 83       	std	Y+1, r18	; 0x01
    1420:	49 81       	ldd	r20, Y+1	; 0x01
    1422:	5a 81       	ldd	r21, Y+2	; 0x02
    1424:	42 30       	cpi	r20, 0x02	; 2
    1426:	51 05       	cpc	r21, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <DeBounching_Task+0x2a>
    142a:	94 c0       	rjmp	.+296    	; 0x1554 <DeBounching_Task+0x152>
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	83 30       	cpi	r24, 0x03	; 3
    1432:	91 05       	cpc	r25, r1
    1434:	34 f4       	brge	.+12     	; 0x1442 <DeBounching_Task+0x40>
    1436:	29 81       	ldd	r18, Y+1	; 0x01
    1438:	3a 81       	ldd	r19, Y+2	; 0x02
    143a:	21 30       	cpi	r18, 0x01	; 1
    143c:	31 05       	cpc	r19, r1
    143e:	81 f1       	breq	.+96     	; 0x14a0 <DeBounching_Task+0x9e>
    1440:	93 c0       	rjmp	.+294    	; 0x1568 <DeBounching_Task+0x166>
    1442:	49 81       	ldd	r20, Y+1	; 0x01
    1444:	5a 81       	ldd	r21, Y+2	; 0x02
    1446:	43 30       	cpi	r20, 0x03	; 3
    1448:	51 05       	cpc	r21, r1
    144a:	39 f0       	breq	.+14     	; 0x145a <DeBounching_Task+0x58>
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	84 30       	cpi	r24, 0x04	; 4
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <DeBounching_Task+0x56>
    1456:	5d c0       	rjmp	.+186    	; 0x1512 <DeBounching_Task+0x110>
    1458:	87 c0       	rjmp	.+270    	; 0x1568 <DeBounching_Task+0x166>
	{
	case PREPRESSED:
		if(GET_BIT(KEYPAD_PORT_IN,g_row) == 0)
    145a:	e3 e3       	ldi	r30, 0x33	; 51
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	80 91 3d 01 	lds	r24, 0x013D
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a9 01       	movw	r20, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DeBounching_Task+0x72>
    1470:	55 95       	asr	r21
    1472:	47 95       	ror	r20
    1474:	8a 95       	dec	r24
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DeBounching_Task+0x6e>
    1478:	ca 01       	movw	r24, r20
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	90 70       	andi	r25, 0x00	; 0
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	09 f0       	breq	.+2      	; 0x1484 <DeBounching_Task+0x82>
    1482:	72 c0       	rjmp	.+228    	; 0x1568 <DeBounching_Task+0x166>
		{
			Press_count++;
    1484:	80 91 38 01 	lds	r24, 0x0138
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	80 93 38 01 	sts	0x0138, r24
			if(Press_count == 10)
    148e:	80 91 38 01 	lds	r24, 0x0138
    1492:	8a 30       	cpi	r24, 0x0A	; 10
    1494:	09 f0       	breq	.+2      	; 0x1498 <DeBounching_Task+0x96>
    1496:	68 c0       	rjmp	.+208    	; 0x1568 <DeBounching_Task+0x166>
			{
				Button_State = PRESSED;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 39 01 	sts	0x0139, r24
    149e:	64 c0       	rjmp	.+200    	; 0x1568 <DeBounching_Task+0x166>
				/*Do Nothing*/
			}
		}
		break;
	case PRESSED:
		if(GET_BIT(KEYPAD_PORT_IN,g_row) == 0)
    14a0:	e3 e3       	ldi	r30, 0x33	; 51
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	80 91 3d 01 	lds	r24, 0x013D
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DeBounching_Task+0xb8>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DeBounching_Task+0xb4>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	09 f1       	breq	.+66     	; 0x150a <DeBounching_Task+0x108>
			/*Do Nothing*/
		}
		else
		{
			/*check if Player Choices Yes answer or No answer only*/
			if((g_return==YES)||(g_return==NO))
    14c8:	80 91 3e 01 	lds	r24, 0x013E
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	21 f0       	breq	.+8      	; 0x14d8 <DeBounching_Task+0xd6>
    14d0:	80 91 3e 01 	lds	r24, 0x013E
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	b1 f4       	brne	.+44     	; 0x1504 <DeBounching_Task+0x102>
			{
				/*check if Player Choices right answer or wrong answer*/
				if(g_return==Answers[ProgramSteps])
    14d8:	80 91 3a 01 	lds	r24, 0x013A
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fc 01       	movw	r30, r24
    14e2:	ee 5c       	subi	r30, 0xCE	; 206
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	90 81       	ld	r25, Z
    14e8:	80 91 3e 01 	lds	r24, 0x013E
    14ec:	98 17       	cp	r25, r24
    14ee:	29 f4       	brne	.+10     	; 0x14fa <DeBounching_Task+0xf8>
				{
					/*increment Player's score if his answer is right*/
					Score++;
    14f0:	80 91 3b 01 	lds	r24, 0x013B
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	80 93 3b 01 	sts	0x013B, r24
				}
				/*move to next index to display next answer*/
				ProgramSteps++;
    14fa:	80 91 3a 01 	lds	r24, 0x013A
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	80 93 3a 01 	sts	0x013A, r24
			}
			Button_State = PRERELEASED;
    1504:	84 e0       	ldi	r24, 0x04	; 4
    1506:	80 93 39 01 	sts	0x0139, r24
		}
		Press_count = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 38 01 	sts	0x0138, r24
    1510:	2b c0       	rjmp	.+86     	; 0x1568 <DeBounching_Task+0x166>
		break;
	case PRERELEASED:
		if(GET_BIT(KEYPAD_PORT_IN,g_row) == 1)
    1512:	e3 e3       	ldi	r30, 0x33	; 51
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	80 91 3d 01 	lds	r24, 0x013D
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DeBounching_Task+0x12a>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DeBounching_Task+0x126>
    1530:	ca 01       	movw	r24, r20
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	88 23       	and	r24, r24
    1538:	b9 f0       	breq	.+46     	; 0x1568 <DeBounching_Task+0x166>
		{
			Release_count--;
    153a:	80 91 37 01 	lds	r24, 0x0137
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	80 93 37 01 	sts	0x0137, r24
			if(Release_count == 1)
    1544:	80 91 37 01 	lds	r24, 0x0137
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	71 f4       	brne	.+28     	; 0x1568 <DeBounching_Task+0x166>
			{
				Button_State = RELEASED;
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	80 93 39 01 	sts	0x0139, r24
    1552:	0a c0       	rjmp	.+20     	; 0x1568 <DeBounching_Task+0x166>
				/*Do Nothing*/
			}
		}
		break;
	case RELEASED:
		Release_count = 10;
    1554:	8a e0       	ldi	r24, 0x0A	; 10
    1556:	80 93 37 01 	sts	0x0137, r24
		Button_State = PREPRESSED;
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	80 93 39 01 	sts	0x0139, r24

		/*delete this task because of its mission is done*/
		SOS_DeleteTask(DeBounching_Task);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	9a e0       	ldi	r25, 0x0A	; 10
    1564:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <SOS_DeleteTask>
		break;
	default:
		break;
	}
	/*LED off to calculate CPU Load because of this task*/
	DIO_WritePin(DIO_PIN13,LOW);
    1568:	8d e0       	ldi	r24, 0x0D	; 13
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <Key_PressedTask>:

void Key_PressedTask(void)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	/*LED on to calculate CPU Load because of this task*/
	DIO_WritePin(DIO_PIN14,HIGH);
    1582:	8e e0       	ldi	r24, 0x0E	; 14
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>

	/*Static variable use to synchronous between LCD Task and KeyPad Task*/
	static uint8 once=0;
	if(once<20)
    158a:	80 91 3c 01 	lds	r24, 0x013C
    158e:	84 31       	cpi	r24, 0x14	; 20
    1590:	30 f4       	brcc	.+12     	; 0x159e <Key_PressedTask+0x24>
	{
		once++;
    1592:	80 91 3c 01 	lds	r24, 0x013C
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	80 93 3c 01 	sts	0x013C, r24
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <Key_PressedTask+0x2c>
	}
	else
	{
		/*sign pressed Key with g_return to make LCD task see it*/
		g_return = KeyPad_getPressedKey();
    159e:	0e 94 1c 09 	call	0x1238	; 0x1238 <KeyPad_getPressedKey>
    15a2:	80 93 3e 01 	sts	0x013E, r24
	}
	/*LED off to calculate CPU Load because of this task*/
	DIO_WritePin(DIO_PIN14,LOW);
    15a6:	8e e0       	ldi	r24, 0x0E	; 14
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <LCD_init>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_init(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    15bc:	aa e3       	ldi	r26, 0x3A	; 58
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ea e3       	ldi	r30, 0x3A	; 58
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 60       	ori	r24, 0x0E	; 14
    15c8:	8c 93       	st	X, r24

#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    15ca:	aa e3       	ldi	r26, 0x3A	; 58
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ea e3       	ldi	r30, 0x3A	; 58
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 6f       	ori	r24, 0xF0	; 240
    15d6:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    15de:	88 e2       	ldi	r24, 0x28	; 40
    15e0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    15e4:	8c e0       	ldi	r24, 0x0C	; 12
    15e6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCD_sendCommand>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_sendCommand(uint8 command)
{
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	c9 5a       	subi	r28, 0xA9	; 169
    1604:	d0 40       	sbci	r29, 0x00	; 0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	fe 01       	movw	r30, r28
    1612:	e7 55       	subi	r30, 0x57	; 87
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8d 7f       	andi	r24, 0xFD	; 253
    1624:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1626:	ab e3       	ldi	r26, 0x3B	; 59
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	eb e3       	ldi	r30, 0x3B	; 59
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8b 7f       	andi	r24, 0xFB	; 251
    1632:	8c 93       	st	X, r24
    1634:	fe 01       	movw	r30, r28
    1636:	eb 55       	subi	r30, 0x5B	; 91
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a6 e1       	ldi	r26, 0x16	; 22
    1640:	b4 e4       	ldi	r27, 0x44	; 68
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    164a:	8e 01       	movw	r16, r28
    164c:	0f 55       	subi	r16, 0x5F	; 95
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	fe 01       	movw	r30, r28
    1652:	eb 55       	subi	r30, 0x5B	; 91
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	2b ea       	ldi	r18, 0xAB	; 171
    1660:	3a ea       	ldi	r19, 0xAA	; 170
    1662:	4a e2       	ldi	r20, 0x2A	; 42
    1664:	50 e4       	ldi	r21, 0x40	; 64
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	f8 01       	movw	r30, r16
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	a2 83       	std	Z+2, r26	; 0x02
    1676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1678:	fe 01       	movw	r30, r28
    167a:	ef 55       	subi	r30, 0x5F	; 95
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	34 f4       	brge	.+12     	; 0x16a2 <LCD_sendCommand+0xac>
		__ticks = 1;
    1696:	fe 01       	movw	r30, r28
    1698:	e0 56       	subi	r30, 0x60	; 96
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 83       	st	Z, r24
    16a0:	e0 c0       	rjmp	.+448    	; 0x1862 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    16a2:	fe 01       	movw	r30, r28
    16a4:	ef 55       	subi	r30, 0x5F	; 95
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	53 e4       	ldi	r21, 0x43	; 67
    16b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	0c f0       	brlt	.+2      	; 0x16c2 <LCD_sendCommand+0xcc>
    16c0:	c0 c0       	rjmp	.+384    	; 0x1842 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    16c2:	fe 01       	movw	r30, r28
    16c4:	eb 55       	subi	r30, 0x5B	; 91
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4a e7       	ldi	r20, 0x7A	; 122
    16d6:	54 e4       	ldi	r21, 0x44	; 68
    16d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	fe 01       	movw	r30, r28
    16e2:	e4 56       	subi	r30, 0x64	; 100
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 83       	st	Z, r24
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	a2 83       	std	Z+2, r26	; 0x02
    16ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ee:	8e 01       	movw	r16, r28
    16f0:	08 56       	subi	r16, 0x68	; 104
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e4 56       	subi	r30, 0x64	; 100
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	f8 01       	movw	r30, r16
    1714:	80 83       	st	Z, r24
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	a2 83       	std	Z+2, r26	; 0x02
    171a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    171c:	fe 01       	movw	r30, r28
    171e:	e8 56       	subi	r30, 0x68	; 104
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	44 f4       	brge	.+16     	; 0x174a <LCD_sendCommand+0x154>
		__ticks = 1;
    173a:	fe 01       	movw	r30, r28
    173c:	ea 56       	subi	r30, 0x6A	; 106
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	80 83       	st	Z, r24
    1748:	64 c0       	rjmp	.+200    	; 0x1812 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    174a:	fe 01       	movw	r30, r28
    174c:	e8 56       	subi	r30, 0x68	; 104
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	0c f0       	brlt	.+2      	; 0x176a <LCD_sendCommand+0x174>
    1768:	43 c0       	rjmp	.+134    	; 0x17f0 <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	fe 01       	movw	r30, r28
    176c:	e4 56       	subi	r30, 0x64	; 100
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8e 01       	movw	r16, r28
    178a:	0a 56       	subi	r16, 0x6A	; 106
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	f8 01       	movw	r30, r16
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    17a0:	1f c0       	rjmp	.+62     	; 0x17e0 <LCD_sendCommand+0x1ea>
    17a2:	fe 01       	movw	r30, r28
    17a4:	ec 56       	subi	r30, 0x6C	; 108
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b0:	fe 01       	movw	r30, r28
    17b2:	ec 56       	subi	r30, 0x6C	; 108
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <LCD_sendCommand+0x1c4>
    17be:	fe 01       	movw	r30, r28
    17c0:	ec 56       	subi	r30, 0x6C	; 108
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c8:	de 01       	movw	r26, r28
    17ca:	aa 56       	subi	r26, 0x6A	; 106
    17cc:	bf 4f       	sbci	r27, 0xFF	; 255
    17ce:	fe 01       	movw	r30, r28
    17d0:	ea 56       	subi	r30, 0x6A	; 106
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	11 96       	adiw	r26, 0x01	; 1
    17dc:	9c 93       	st	X, r25
    17de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	fe 01       	movw	r30, r28
    17e2:	ea 56       	subi	r30, 0x6A	; 106
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	d1 f6       	brne	.-76     	; 0x17a2 <LCD_sendCommand+0x1ac>
    17ee:	4b c0       	rjmp	.+150    	; 0x1886 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	8e 01       	movw	r16, r28
    17f2:	0a 56       	subi	r16, 0x6A	; 106
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	e8 56       	subi	r30, 0x68	; 104
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	f8 01       	movw	r30, r16
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	de 01       	movw	r26, r28
    1814:	ae 56       	subi	r26, 0x6E	; 110
    1816:	bf 4f       	sbci	r27, 0xFF	; 255
    1818:	fe 01       	movw	r30, r28
    181a:	ea 56       	subi	r30, 0x6A	; 106
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	11 96       	adiw	r26, 0x01	; 1
    1824:	9c 93       	st	X, r25
    1826:	8e 93       	st	-X, r24
    1828:	fe 01       	movw	r30, r28
    182a:	ee 56       	subi	r30, 0x6E	; 110
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_sendCommand+0x23c>
    1836:	fe 01       	movw	r30, r28
    1838:	ee 56       	subi	r30, 0x6E	; 110
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	22 c0       	rjmp	.+68     	; 0x1886 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1842:	8e 01       	movw	r16, r28
    1844:	00 56       	subi	r16, 0x60	; 96
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	ef 55       	subi	r30, 0x5F	; 95
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	f8 01       	movw	r30, r16
    1860:	80 83       	st	Z, r24
    1862:	de 01       	movw	r26, r28
    1864:	af 56       	subi	r26, 0x6F	; 111
    1866:	bf 4f       	sbci	r27, 0xFF	; 255
    1868:	fe 01       	movw	r30, r28
    186a:	e0 56       	subi	r30, 0x60	; 96
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1872:	fe 01       	movw	r30, r28
    1874:	ef 56       	subi	r30, 0x6F	; 111
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	8a 95       	dec	r24
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_sendCommand+0x284>
    187e:	fe 01       	movw	r30, r28
    1880:	ef 56       	subi	r30, 0x6F	; 111
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1886:	ab e3       	ldi	r26, 0x3B	; 59
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	88 60       	ori	r24, 0x08	; 8
    1892:	8c 93       	st	X, r24
    1894:	fe 01       	movw	r30, r28
    1896:	e3 57       	subi	r30, 0x73	; 115
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a6 e1       	ldi	r26, 0x16	; 22
    18a0:	b4 e4       	ldi	r27, 0x44	; 68
    18a2:	80 83       	st	Z, r24
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	a2 83       	std	Z+2, r26	; 0x02
    18a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18aa:	8e 01       	movw	r16, r28
    18ac:	07 57       	subi	r16, 0x77	; 119
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 57       	subi	r30, 0x73	; 115
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	2b ea       	ldi	r18, 0xAB	; 171
    18c0:	3a ea       	ldi	r19, 0xAA	; 170
    18c2:	4a e2       	ldi	r20, 0x2A	; 42
    18c4:	50 e4       	ldi	r21, 0x40	; 64
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	f8 01       	movw	r30, r16
    18d0:	80 83       	st	Z, r24
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	a2 83       	std	Z+2, r26	; 0x02
    18d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d8:	fe 01       	movw	r30, r28
    18da:	e7 57       	subi	r30, 0x77	; 119
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	34 f4       	brge	.+12     	; 0x1902 <LCD_sendCommand+0x30c>
		__ticks = 1;
    18f6:	fe 01       	movw	r30, r28
    18f8:	e8 57       	subi	r30, 0x78	; 120
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 83       	st	Z, r24
    1900:	e0 c0       	rjmp	.+448    	; 0x1ac2 <LCD_sendCommand+0x4cc>
	else if (__tmp > 255)
    1902:	fe 01       	movw	r30, r28
    1904:	e7 57       	subi	r30, 0x77	; 119
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	53 e4       	ldi	r21, 0x43	; 67
    1918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	0c f0       	brlt	.+2      	; 0x1922 <LCD_sendCommand+0x32c>
    1920:	c0 c0       	rjmp	.+384    	; 0x1aa2 <LCD_sendCommand+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    1922:	fe 01       	movw	r30, r28
    1924:	e3 57       	subi	r30, 0x73	; 115
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4a e7       	ldi	r20, 0x7A	; 122
    1936:	54 e4       	ldi	r21, 0x44	; 68
    1938:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	fe 01       	movw	r30, r28
    1942:	ec 57       	subi	r30, 0x7C	; 124
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 83       	st	Z, r24
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	a2 83       	std	Z+2, r26	; 0x02
    194c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	8e 01       	movw	r16, r28
    1950:	00 58       	subi	r16, 0x80	; 128
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	fe 01       	movw	r30, r28
    1956:	ec 57       	subi	r30, 0x7C	; 124
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	f8 01       	movw	r30, r16
    1974:	80 83       	st	Z, r24
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	a2 83       	std	Z+2, r26	; 0x02
    197a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197c:	fe 01       	movw	r30, r28
    197e:	e0 58       	subi	r30, 0x80	; 128
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	5f e3       	ldi	r21, 0x3F	; 63
    1992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1996:	88 23       	and	r24, r24
    1998:	44 f4       	brge	.+16     	; 0x19aa <LCD_sendCommand+0x3b4>
		__ticks = 1;
    199a:	fe 01       	movw	r30, r28
    199c:	e2 58       	subi	r30, 0x82	; 130
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
    19a8:	64 c0       	rjmp	.+200    	; 0x1a72 <LCD_sendCommand+0x47c>
	else if (__tmp > 65535)
    19aa:	fe 01       	movw	r30, r28
    19ac:	e0 58       	subi	r30, 0x80	; 128
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	0c f0       	brlt	.+2      	; 0x19ca <LCD_sendCommand+0x3d4>
    19c8:	43 c0       	rjmp	.+134    	; 0x1a50 <LCD_sendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	fe 01       	movw	r30, r28
    19cc:	ec 57       	subi	r30, 0x7C	; 124
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8e 01       	movw	r16, r28
    19ea:	02 58       	subi	r16, 0x82	; 130
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	1f c0       	rjmp	.+62     	; 0x1a40 <LCD_sendCommand+0x44a>
    1a02:	fe 01       	movw	r30, r28
    1a04:	e4 58       	subi	r30, 0x84	; 132
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a10:	fe 01       	movw	r30, r28
    1a12:	e4 58       	subi	r30, 0x84	; 132
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_sendCommand+0x424>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e4 58       	subi	r30, 0x84	; 132
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	de 01       	movw	r26, r28
    1a2a:	a2 58       	subi	r26, 0x82	; 130
    1a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e2 58       	subi	r30, 0x82	; 130
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	91 81       	ldd	r25, Z+1	; 0x01
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	fe 01       	movw	r30, r28
    1a42:	e2 58       	subi	r30, 0x82	; 130
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	d1 f6       	brne	.-76     	; 0x1a02 <LCD_sendCommand+0x40c>
    1a4e:	4b c0       	rjmp	.+150    	; 0x1ae6 <LCD_sendCommand+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	8e 01       	movw	r16, r28
    1a52:	02 58       	subi	r16, 0x82	; 130
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	fe 01       	movw	r30, r28
    1a58:	e0 58       	subi	r30, 0x80	; 128
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	de 01       	movw	r26, r28
    1a74:	a6 58       	subi	r26, 0x86	; 134
    1a76:	bf 4f       	sbci	r27, 0xFF	; 255
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e2 58       	subi	r30, 0x82	; 130
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	11 96       	adiw	r26, 0x01	; 1
    1a84:	9c 93       	st	X, r25
    1a86:	8e 93       	st	-X, r24
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e6 58       	subi	r30, 0x86	; 134
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_sendCommand+0x49c>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e6 58       	subi	r30, 0x86	; 134
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
    1aa0:	22 c0       	rjmp	.+68     	; 0x1ae6 <LCD_sendCommand+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	08 57       	subi	r16, 0x78	; 120
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e7 57       	subi	r30, 0x77	; 119
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	80 83       	st	Z, r24
    1ac2:	de 01       	movw	r26, r28
    1ac4:	a7 58       	subi	r26, 0x87	; 135
    1ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e8 57       	subi	r30, 0x78	; 120
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e7 58       	subi	r30, 0x87	; 135
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	8a 95       	dec	r24
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_sendCommand+0x4e4>
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e7 58       	subi	r30, 0x87	; 135
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1ae6:	ab e3       	ldi	r26, 0x3B	; 59
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	eb e3       	ldi	r30, 0x3B	; 59
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	98 2f       	mov	r25, r24
    1af2:	9f 70       	andi	r25, 0x0F	; 15
    1af4:	fe 01       	movw	r30, r28
    1af6:	e7 55       	subi	r30, 0x57	; 87
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	80 7f       	andi	r24, 0xF0	; 240
    1afe:	89 2b       	or	r24, r25
    1b00:	8c 93       	st	X, r24
    1b02:	fe 01       	movw	r30, r28
    1b04:	eb 58       	subi	r30, 0x8B	; 139
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a6 e1       	ldi	r26, 0x16	; 22
    1b0e:	b4 e4       	ldi	r27, 0x44	; 68
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	a2 83       	std	Z+2, r26	; 0x02
    1b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b18:	8e 01       	movw	r16, r28
    1b1a:	0f 58       	subi	r16, 0x8F	; 143
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	eb 58       	subi	r30, 0x8B	; 139
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	2b ea       	ldi	r18, 0xAB	; 171
    1b2e:	3a ea       	ldi	r19, 0xAA	; 170
    1b30:	4a e2       	ldi	r20, 0x2A	; 42
    1b32:	50 e4       	ldi	r21, 0x40	; 64
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	80 83       	st	Z, r24
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	a2 83       	std	Z+2, r26	; 0x02
    1b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b46:	fe 01       	movw	r30, r28
    1b48:	ef 58       	subi	r30, 0x8F	; 143
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	34 f4       	brge	.+12     	; 0x1b70 <LCD_sendCommand+0x57a>
		__ticks = 1;
    1b64:	fe 01       	movw	r30, r28
    1b66:	e0 59       	subi	r30, 0x90	; 144
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	80 83       	st	Z, r24
    1b6e:	e0 c0       	rjmp	.+448    	; 0x1d30 <LCD_sendCommand+0x73a>
	else if (__tmp > 255)
    1b70:	fe 01       	movw	r30, r28
    1b72:	ef 58       	subi	r30, 0x8F	; 143
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <LCD_sendCommand+0x59a>
    1b8e:	c0 c0       	rjmp	.+384    	; 0x1d10 <LCD_sendCommand+0x71a>
	{
		_delay_ms(__us / 1000.0);
    1b90:	fe 01       	movw	r30, r28
    1b92:	eb 58       	subi	r30, 0x8B	; 139
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e4 59       	subi	r30, 0x94	; 148
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 83       	st	Z, r24
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	a2 83       	std	Z+2, r26	; 0x02
    1bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	8e 01       	movw	r16, r28
    1bbe:	08 59       	subi	r16, 0x98	; 152
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e4 59       	subi	r30, 0x94	; 148
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a ef       	ldi	r20, 0xFA	; 250
    1bd6:	54 e4       	ldi	r21, 0x44	; 68
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	f8 01       	movw	r30, r16
    1be2:	80 83       	st	Z, r24
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	a2 83       	std	Z+2, r26	; 0x02
    1be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bea:	fe 01       	movw	r30, r28
    1bec:	e8 59       	subi	r30, 0x98	; 152
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	60 81       	ld	r22, Z
    1bf2:	71 81       	ldd	r23, Z+1	; 0x01
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	44 f4       	brge	.+16     	; 0x1c18 <LCD_sendCommand+0x622>
		__ticks = 1;
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ea 59       	subi	r30, 0x9A	; 154
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	64 c0       	rjmp	.+200    	; 0x1ce0 <LCD_sendCommand+0x6ea>
	else if (__tmp > 65535)
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e8 59       	subi	r30, 0x98	; 152
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	3f ef       	ldi	r19, 0xFF	; 255
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	57 e4       	ldi	r21, 0x47	; 71
    1c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c32:	18 16       	cp	r1, r24
    1c34:	0c f0       	brlt	.+2      	; 0x1c38 <LCD_sendCommand+0x642>
    1c36:	43 c0       	rjmp	.+134    	; 0x1cbe <LCD_sendCommand+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e4 59       	subi	r30, 0x94	; 148
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	8e 01       	movw	r16, r28
    1c58:	0a 59       	subi	r16, 0x9A	; 154
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	f8 01       	movw	r30, r16
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	1f c0       	rjmp	.+62     	; 0x1cae <LCD_sendCommand+0x6b8>
    1c70:	fe 01       	movw	r30, r28
    1c72:	ec 59       	subi	r30, 0x9C	; 156
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	88 ec       	ldi	r24, 0xC8	; 200
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ec 59       	subi	r30, 0x9C	; 156
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_sendCommand+0x692>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ec 59       	subi	r30, 0x9C	; 156
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	de 01       	movw	r26, r28
    1c98:	aa 59       	subi	r26, 0x9A	; 154
    1c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	ea 59       	subi	r30, 0x9A	; 154
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	11 96       	adiw	r26, 0x01	; 1
    1caa:	9c 93       	st	X, r25
    1cac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ea 59       	subi	r30, 0x9A	; 154
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	d1 f6       	brne	.-76     	; 0x1c70 <LCD_sendCommand+0x67a>
    1cbc:	4b c0       	rjmp	.+150    	; 0x1d54 <LCD_sendCommand+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	0a 59       	subi	r16, 0x9A	; 154
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e8 59       	subi	r30, 0x98	; 152
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	f8 01       	movw	r30, r16
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	de 01       	movw	r26, r28
    1ce2:	ae 59       	subi	r26, 0x9E	; 158
    1ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ea 59       	subi	r30, 0x9A	; 154
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	11 96       	adiw	r26, 0x01	; 1
    1cf2:	9c 93       	st	X, r25
    1cf4:	8e 93       	st	-X, r24
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ee 59       	subi	r30, 0x9E	; 158
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LCD_sendCommand+0x70a>
    1d04:	fe 01       	movw	r30, r28
    1d06:	ee 59       	subi	r30, 0x9E	; 158
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	22 c0       	rjmp	.+68     	; 0x1d54 <LCD_sendCommand+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d10:	8e 01       	movw	r16, r28
    1d12:	00 59       	subi	r16, 0x90	; 144
    1d14:	1f 4f       	sbci	r17, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	ef 58       	subi	r30, 0x8F	; 143
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	80 83       	st	Z, r24
    1d30:	de 01       	movw	r26, r28
    1d32:	af 59       	subi	r26, 0x9F	; 159
    1d34:	bf 4f       	sbci	r27, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e0 59       	subi	r30, 0x90	; 144
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d40:	fe 01       	movw	r30, r28
    1d42:	ef 59       	subi	r30, 0x9F	; 159
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	8a 95       	dec	r24
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_sendCommand+0x752>
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ef 59       	subi	r30, 0x9F	; 159
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 83       	st	Z, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	87 7f       	andi	r24, 0xF7	; 247
    1d60:	8c 93       	st	X, r24
    1d62:	fe 01       	movw	r30, r28
    1d64:	e3 5a       	subi	r30, 0xA3	; 163
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a6 e1       	ldi	r26, 0x16	; 22
    1d6e:	b4 e4       	ldi	r27, 0x44	; 68
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d78:	8e 01       	movw	r16, r28
    1d7a:	07 5a       	subi	r16, 0xA7	; 167
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e3 5a       	subi	r30, 0xA3	; 163
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	2b ea       	ldi	r18, 0xAB	; 171
    1d8e:	3a ea       	ldi	r19, 0xAA	; 170
    1d90:	4a e2       	ldi	r20, 0x2A	; 42
    1d92:	50 e4       	ldi	r21, 0x40	; 64
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	80 83       	st	Z, r24
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	a2 83       	std	Z+2, r26	; 0x02
    1da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da6:	fe 01       	movw	r30, r28
    1da8:	e7 5a       	subi	r30, 0xA7	; 167
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	34 f4       	brge	.+12     	; 0x1dd0 <LCD_sendCommand+0x7da>
		__ticks = 1;
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e8 5a       	subi	r30, 0xA8	; 168
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 83       	st	Z, r24
    1dce:	e0 c0       	rjmp	.+448    	; 0x1f90 <LCD_sendCommand+0x99a>
	else if (__tmp > 255)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e7 5a       	subi	r30, 0xA7	; 167
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	0c f0       	brlt	.+2      	; 0x1df0 <LCD_sendCommand+0x7fa>
    1dee:	c0 c0       	rjmp	.+384    	; 0x1f70 <LCD_sendCommand+0x97a>
	{
		_delay_ms(__us / 1000.0);
    1df0:	fe 01       	movw	r30, r28
    1df2:	e3 5a       	subi	r30, 0xA3	; 163
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ec 5a       	subi	r30, 0xAC	; 172
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 83       	st	Z, r24
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	a2 83       	std	Z+2, r26	; 0x02
    1e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	00 5b       	subi	r16, 0xB0	; 176
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	ec 5a       	subi	r30, 0xAC	; 172
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	a2 83       	std	Z+2, r26	; 0x02
    1e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e0 5b       	subi	r30, 0xB0	; 176
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	44 f4       	brge	.+16     	; 0x1e78 <LCD_sendCommand+0x882>
		__ticks = 1;
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e2 5b       	subi	r30, 0xB2	; 178
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    1e76:	64 c0       	rjmp	.+200    	; 0x1f40 <LCD_sendCommand+0x94a>
	else if (__tmp > 65535)
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e0 5b       	subi	r30, 0xB0	; 176
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	0c f0       	brlt	.+2      	; 0x1e98 <LCD_sendCommand+0x8a2>
    1e96:	43 c0       	rjmp	.+134    	; 0x1f1e <LCD_sendCommand+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ec 5a       	subi	r30, 0xAC	; 172
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	02 5b       	subi	r16, 0xB2	; 178
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
    1ece:	1f c0       	rjmp	.+62     	; 0x1f0e <LCD_sendCommand+0x918>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e4 5b       	subi	r30, 0xB4	; 180
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	88 ec       	ldi	r24, 0xC8	; 200
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e4 5b       	subi	r30, 0xB4	; 180
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_sendCommand+0x8f2>
    1eec:	fe 01       	movw	r30, r28
    1eee:	e4 5b       	subi	r30, 0xB4	; 180
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	de 01       	movw	r26, r28
    1ef8:	a2 5b       	subi	r26, 0xB2	; 178
    1efa:	bf 4f       	sbci	r27, 0xFF	; 255
    1efc:	fe 01       	movw	r30, r28
    1efe:	e2 5b       	subi	r30, 0xB2	; 178
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	11 96       	adiw	r26, 0x01	; 1
    1f0a:	9c 93       	st	X, r25
    1f0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e2 5b       	subi	r30, 0xB2	; 178
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	d1 f6       	brne	.-76     	; 0x1ed0 <LCD_sendCommand+0x8da>
    1f1c:	4b c0       	rjmp	.+150    	; 0x1fb4 <LCD_sendCommand+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	8e 01       	movw	r16, r28
    1f20:	02 5b       	subi	r16, 0xB2	; 178
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	fe 01       	movw	r30, r28
    1f26:	e0 5b       	subi	r30, 0xB0	; 176
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	de 01       	movw	r26, r28
    1f42:	a6 5b       	subi	r26, 0xB6	; 182
    1f44:	bf 4f       	sbci	r27, 0xFF	; 255
    1f46:	fe 01       	movw	r30, r28
    1f48:	e2 5b       	subi	r30, 0xB2	; 178
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	11 96       	adiw	r26, 0x01	; 1
    1f52:	9c 93       	st	X, r25
    1f54:	8e 93       	st	-X, r24
    1f56:	fe 01       	movw	r30, r28
    1f58:	e6 5b       	subi	r30, 0xB6	; 182
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_sendCommand+0x96a>
    1f64:	fe 01       	movw	r30, r28
    1f66:	e6 5b       	subi	r30, 0xB6	; 182
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
    1f6e:	22 c0       	rjmp	.+68     	; 0x1fb4 <LCD_sendCommand+0x9be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f70:	8e 01       	movw	r16, r28
    1f72:	08 5a       	subi	r16, 0xA8	; 168
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	fe 01       	movw	r30, r28
    1f78:	e7 5a       	subi	r30, 0xA7	; 167
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 83       	st	Z, r24
    1f90:	de 01       	movw	r26, r28
    1f92:	a7 5b       	subi	r26, 0xB7	; 183
    1f94:	bf 4f       	sbci	r27, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e8 5a       	subi	r30, 0xA8	; 168
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e7 5b       	subi	r30, 0xB7	; 183
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8a 95       	dec	r24
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_sendCommand+0x9b2>
    1fac:	fe 01       	movw	r30, r28
    1fae:	e7 5b       	subi	r30, 0xB7	; 183
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fb4:	ab e3       	ldi	r26, 0x3B	; 59
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	eb e3       	ldi	r30, 0x3B	; 59
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 60       	ori	r24, 0x08	; 8
    1fc0:	8c 93       	st	X, r24
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	eb 5b       	subi	r30, 0xBB	; 187
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a6 e1       	ldi	r26, 0x16	; 22
    1fce:	b4 e4       	ldi	r27, 0x44	; 68
    1fd0:	80 83       	st	Z, r24
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	a2 83       	std	Z+2, r26	; 0x02
    1fd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fd8:	8e 01       	movw	r16, r28
    1fda:	0f 5b       	subi	r16, 0xBF	; 191
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	fe 01       	movw	r30, r28
    1fe0:	eb 5b       	subi	r30, 0xBB	; 187
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	60 81       	ld	r22, Z
    1fe6:	71 81       	ldd	r23, Z+1	; 0x01
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	2b ea       	ldi	r18, 0xAB	; 171
    1fee:	3a ea       	ldi	r19, 0xAA	; 170
    1ff0:	4a e2       	ldi	r20, 0x2A	; 42
    1ff2:	50 e4       	ldi	r21, 0x40	; 64
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	80 83       	st	Z, r24
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	a2 83       	std	Z+2, r26	; 0x02
    2004:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2006:	fe 01       	movw	r30, r28
    2008:	ef 5b       	subi	r30, 0xBF	; 191
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	60 81       	ld	r22, Z
    200e:	71 81       	ldd	r23, Z+1	; 0x01
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	34 f4       	brge	.+12     	; 0x2030 <LCD_sendCommand+0xa3a>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	fe 01       	movw	r30, r28
    2028:	e0 5c       	subi	r30, 0xC0	; 192
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 83       	st	Z, r24
    202e:	9d c0       	rjmp	.+314    	; 0x216a <LCD_sendCommand+0xb74>
	else if (__tmp > 255)
    2030:	fe 01       	movw	r30, r28
    2032:	ef 5b       	subi	r30, 0xBF	; 191
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	53 e4       	ldi	r21, 0x43	; 67
    2046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	0c f0       	brlt	.+2      	; 0x2050 <LCD_sendCommand+0xa5a>
    204e:	7e c0       	rjmp	.+252    	; 0x214c <LCD_sendCommand+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2050:	fe 01       	movw	r30, r28
    2052:	eb 5b       	subi	r30, 0xBB	; 187
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a e7       	ldi	r20, 0x7A	; 122
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8c af       	std	Y+60, r24	; 0x3c
    2070:	9d af       	std	Y+61, r25	; 0x3d
    2072:	ae af       	std	Y+62, r26	; 0x3e
    2074:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2076:	6c ad       	ldd	r22, Y+60	; 0x3c
    2078:	7d ad       	ldd	r23, Y+61	; 0x3d
    207a:	8e ad       	ldd	r24, Y+62	; 0x3e
    207c:	9f ad       	ldd	r25, Y+63	; 0x3f
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a ef       	ldi	r20, 0xFA	; 250
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	88 af       	std	Y+56, r24	; 0x38
    2090:	99 af       	std	Y+57, r25	; 0x39
    2092:	aa af       	std	Y+58, r26	; 0x3a
    2094:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2096:	68 ad       	ldd	r22, Y+56	; 0x38
    2098:	79 ad       	ldd	r23, Y+57	; 0x39
    209a:	8a ad       	ldd	r24, Y+58	; 0x3a
    209c:	9b ad       	ldd	r25, Y+59	; 0x3b
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	2c f4       	brge	.+10     	; 0x20b8 <LCD_sendCommand+0xac2>
		__ticks = 1;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9f ab       	std	Y+55, r25	; 0x37
    20b4:	8e ab       	std	Y+54, r24	; 0x36
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <LCD_sendCommand+0xb40>
	else if (__tmp > 65535)
    20b8:	68 ad       	ldd	r22, Y+56	; 0x38
    20ba:	79 ad       	ldd	r23, Y+57	; 0x39
    20bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    20be:	9b ad       	ldd	r25, Y+59	; 0x3b
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	3f ef       	ldi	r19, 0xFF	; 255
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	57 e4       	ldi	r21, 0x47	; 71
    20c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	4c f5       	brge	.+82     	; 0x2122 <LCD_sendCommand+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    20d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    20d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e2       	ldi	r20, 0x20	; 32
    20de:	51 e4       	ldi	r21, 0x41	; 65
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9f ab       	std	Y+55, r25	; 0x37
    20f6:	8e ab       	std	Y+54, r24	; 0x36
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <LCD_sendCommand+0xb22>
    20fa:	88 ec       	ldi	r24, 0xC8	; 200
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9d ab       	std	Y+53, r25	; 0x35
    2100:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2102:	8c a9       	ldd	r24, Y+52	; 0x34
    2104:	9d a9       	ldd	r25, Y+53	; 0x35
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_sendCommand+0xb10>
    210a:	9d ab       	std	Y+53, r25	; 0x35
    210c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210e:	8e a9       	ldd	r24, Y+54	; 0x36
    2110:	9f a9       	ldd	r25, Y+55	; 0x37
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	9f ab       	std	Y+55, r25	; 0x37
    2116:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2118:	8e a9       	ldd	r24, Y+54	; 0x36
    211a:	9f a9       	ldd	r25, Y+55	; 0x37
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	69 f7       	brne	.-38     	; 0x20fa <LCD_sendCommand+0xb04>
    2120:	2d c0       	rjmp	.+90     	; 0x217c <LCD_sendCommand+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2122:	68 ad       	ldd	r22, Y+56	; 0x38
    2124:	79 ad       	ldd	r23, Y+57	; 0x39
    2126:	8a ad       	ldd	r24, Y+58	; 0x3a
    2128:	9b ad       	ldd	r25, Y+59	; 0x3b
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9f ab       	std	Y+55, r25	; 0x37
    2134:	8e ab       	std	Y+54, r24	; 0x36
    2136:	8e a9       	ldd	r24, Y+54	; 0x36
    2138:	9f a9       	ldd	r25, Y+55	; 0x37
    213a:	9b ab       	std	Y+51, r25	; 0x33
    213c:	8a ab       	std	Y+50, r24	; 0x32
    213e:	8a a9       	ldd	r24, Y+50	; 0x32
    2140:	9b a9       	ldd	r25, Y+51	; 0x33
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_sendCommand+0xb4c>
    2146:	9b ab       	std	Y+51, r25	; 0x33
    2148:	8a ab       	std	Y+50, r24	; 0x32
    214a:	18 c0       	rjmp	.+48     	; 0x217c <LCD_sendCommand+0xb86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    214c:	fe 01       	movw	r30, r28
    214e:	ef 5b       	subi	r30, 0xBF	; 191
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	fe 01       	movw	r30, r28
    2164:	e0 5c       	subi	r30, 0xC0	; 192
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 83       	st	Z, r24
    216a:	fe 01       	movw	r30, r28
    216c:	e0 5c       	subi	r30, 0xC0	; 192
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2174:	89 a9       	ldd	r24, Y+49	; 0x31
    2176:	8a 95       	dec	r24
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0xb80>
    217a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    217c:	ab e3       	ldi	r26, 0x3B	; 59
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	eb e3       	ldi	r30, 0x3B	; 59
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	2f 70       	andi	r18, 0x0F	; 15
    218a:	fe 01       	movw	r30, r28
    218c:	e7 55       	subi	r30, 0x57	; 87
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	82 95       	swap	r24
    2198:	92 95       	swap	r25
    219a:	90 7f       	andi	r25, 0xF0	; 240
    219c:	98 27       	eor	r25, r24
    219e:	80 7f       	andi	r24, 0xF0	; 240
    21a0:	98 27       	eor	r25, r24
    21a2:	82 2b       	or	r24, r18
    21a4:	8c 93       	st	X, r24
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a6 e1       	ldi	r26, 0x16	; 22
    21ac:	b4 e4       	ldi	r27, 0x44	; 68
    21ae:	8d a7       	std	Y+45, r24	; 0x2d
    21b0:	9e a7       	std	Y+46, r25	; 0x2e
    21b2:	af a7       	std	Y+47, r26	; 0x2f
    21b4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    21b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    21ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    21bc:	98 a9       	ldd	r25, Y+48	; 0x30
    21be:	2b ea       	ldi	r18, 0xAB	; 171
    21c0:	3a ea       	ldi	r19, 0xAA	; 170
    21c2:	4a e2       	ldi	r20, 0x2A	; 42
    21c4:	50 e4       	ldi	r21, 0x40	; 64
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	89 a7       	std	Y+41, r24	; 0x29
    21d0:	9a a7       	std	Y+42, r25	; 0x2a
    21d2:	ab a7       	std	Y+43, r26	; 0x2b
    21d4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    21d6:	69 a5       	ldd	r22, Y+41	; 0x29
    21d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    21da:	8b a5       	ldd	r24, Y+43	; 0x2b
    21dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	1c f4       	brge	.+6      	; 0x21f4 <LCD_sendCommand+0xbfe>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	88 a7       	std	Y+40, r24	; 0x28
    21f2:	91 c0       	rjmp	.+290    	; 0x2316 <LCD_sendCommand+0xd20>
	else if (__tmp > 255)
    21f4:	69 a5       	ldd	r22, Y+41	; 0x29
    21f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    21f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	53 e4       	ldi	r21, 0x43	; 67
    2204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	0c f0       	brlt	.+2      	; 0x220e <LCD_sendCommand+0xc18>
    220c:	7b c0       	rjmp	.+246    	; 0x2304 <LCD_sendCommand+0xd0e>
	{
		_delay_ms(__us / 1000.0);
    220e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2210:	7e a5       	ldd	r23, Y+46	; 0x2e
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	54 e4       	ldi	r21, 0x44	; 68
    221e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8c a3       	std	Y+36, r24	; 0x24
    2228:	9d a3       	std	Y+37, r25	; 0x25
    222a:	ae a3       	std	Y+38, r26	; 0x26
    222c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	6c a1       	ldd	r22, Y+36	; 0x24
    2230:	7d a1       	ldd	r23, Y+37	; 0x25
    2232:	8e a1       	ldd	r24, Y+38	; 0x26
    2234:	9f a1       	ldd	r25, Y+39	; 0x27
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a ef       	ldi	r20, 0xFA	; 250
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	88 a3       	std	Y+32, r24	; 0x20
    2248:	99 a3       	std	Y+33, r25	; 0x21
    224a:	aa a3       	std	Y+34, r26	; 0x22
    224c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    224e:	68 a1       	ldd	r22, Y+32	; 0x20
    2250:	79 a1       	ldd	r23, Y+33	; 0x21
    2252:	8a a1       	ldd	r24, Y+34	; 0x22
    2254:	9b a1       	ldd	r25, Y+35	; 0x23
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	2c f4       	brge	.+10     	; 0x2270 <LCD_sendCommand+0xc7a>
		__ticks = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9f 8f       	std	Y+31, r25	; 0x1f
    226c:	8e 8f       	std	Y+30, r24	; 0x1e
    226e:	3f c0       	rjmp	.+126    	; 0x22ee <LCD_sendCommand+0xcf8>
	else if (__tmp > 65535)
    2270:	68 a1       	ldd	r22, Y+32	; 0x20
    2272:	79 a1       	ldd	r23, Y+33	; 0x21
    2274:	8a a1       	ldd	r24, Y+34	; 0x22
    2276:	9b a1       	ldd	r25, Y+35	; 0x23
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	4c f5       	brge	.+82     	; 0x22da <LCD_sendCommand+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	6c a1       	ldd	r22, Y+36	; 0x24
    228a:	7d a1       	ldd	r23, Y+37	; 0x25
    228c:	8e a1       	ldd	r24, Y+38	; 0x26
    228e:	9f a1       	ldd	r25, Y+39	; 0x27
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9f 8f       	std	Y+31, r25	; 0x1f
    22ae:	8e 8f       	std	Y+30, r24	; 0x1e
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <LCD_sendCommand+0xcda>
    22b2:	88 ec       	ldi	r24, 0xC8	; 200
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9d 8f       	std	Y+29, r25	; 0x1d
    22b8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_sendCommand+0xcc8>
    22c2:	9d 8f       	std	Y+29, r25	; 0x1d
    22c4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9f 8f       	std	Y+31, r25	; 0x1f
    22ce:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <LCD_sendCommand+0xcbc>
    22d8:	24 c0       	rjmp	.+72     	; 0x2322 <LCD_sendCommand+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	68 a1       	ldd	r22, Y+32	; 0x20
    22dc:	79 a1       	ldd	r23, Y+33	; 0x21
    22de:	8a a1       	ldd	r24, Y+34	; 0x22
    22e0:	9b a1       	ldd	r25, Y+35	; 0x23
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9f 8f       	std	Y+31, r25	; 0x1f
    22ec:	8e 8f       	std	Y+30, r24	; 0x1e
    22ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22f2:	9b 8f       	std	Y+27, r25	; 0x1b
    22f4:	8a 8f       	std	Y+26, r24	; 0x1a
    22f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_sendCommand+0xd04>
    22fe:	9b 8f       	std	Y+27, r25	; 0x1b
    2300:	8a 8f       	std	Y+26, r24	; 0x1a
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_sendCommand+0xd2c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2304:	69 a5       	ldd	r22, Y+41	; 0x29
    2306:	7a a5       	ldd	r23, Y+42	; 0x2a
    2308:	8b a5       	ldd	r24, Y+43	; 0x2b
    230a:	9c a5       	ldd	r25, Y+44	; 0x2c
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	88 a7       	std	Y+40, r24	; 0x28
    2316:	88 a5       	ldd	r24, Y+40	; 0x28
    2318:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    231a:	89 8d       	ldd	r24, Y+25	; 0x19
    231c:	8a 95       	dec	r24
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_sendCommand+0xd26>
    2320:	89 8f       	std	Y+25, r24	; 0x19
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2322:	ab e3       	ldi	r26, 0x3B	; 59
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	eb e3       	ldi	r30, 0x3B	; 59
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	87 7f       	andi	r24, 0xF7	; 247
    232e:	8c 93       	st	X, r24
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a6 e1       	ldi	r26, 0x16	; 22
    2336:	b4 e4       	ldi	r27, 0x44	; 68
    2338:	8d 8b       	std	Y+21, r24	; 0x15
    233a:	9e 8b       	std	Y+22, r25	; 0x16
    233c:	af 8b       	std	Y+23, r26	; 0x17
    233e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2340:	6d 89       	ldd	r22, Y+21	; 0x15
    2342:	7e 89       	ldd	r23, Y+22	; 0x16
    2344:	8f 89       	ldd	r24, Y+23	; 0x17
    2346:	98 8d       	ldd	r25, Y+24	; 0x18
    2348:	2b ea       	ldi	r18, 0xAB	; 171
    234a:	3a ea       	ldi	r19, 0xAA	; 170
    234c:	4a e2       	ldi	r20, 0x2A	; 42
    234e:	50 e4       	ldi	r21, 0x40	; 64
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	89 8b       	std	Y+17, r24	; 0x11
    235a:	9a 8b       	std	Y+18, r25	; 0x12
    235c:	ab 8b       	std	Y+19, r26	; 0x13
    235e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2360:	69 89       	ldd	r22, Y+17	; 0x11
    2362:	7a 89       	ldd	r23, Y+18	; 0x12
    2364:	8b 89       	ldd	r24, Y+19	; 0x13
    2366:	9c 89       	ldd	r25, Y+20	; 0x14
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	1c f4       	brge	.+6      	; 0x237e <LCD_sendCommand+0xd88>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	88 8b       	std	Y+16, r24	; 0x10
    237c:	91 c0       	rjmp	.+290    	; 0x24a0 <LCD_sendCommand+0xeaa>
	else if (__tmp > 255)
    237e:	69 89       	ldd	r22, Y+17	; 0x11
    2380:	7a 89       	ldd	r23, Y+18	; 0x12
    2382:	8b 89       	ldd	r24, Y+19	; 0x13
    2384:	9c 89       	ldd	r25, Y+20	; 0x14
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	53 e4       	ldi	r21, 0x43	; 67
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	0c f0       	brlt	.+2      	; 0x2398 <LCD_sendCommand+0xda2>
    2396:	7b c0       	rjmp	.+246    	; 0x248e <LCD_sendCommand+0xe98>
	{
		_delay_ms(__us / 1000.0);
    2398:	6d 89       	ldd	r22, Y+21	; 0x15
    239a:	7e 89       	ldd	r23, Y+22	; 0x16
    239c:	8f 89       	ldd	r24, Y+23	; 0x17
    239e:	98 8d       	ldd	r25, Y+24	; 0x18
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	54 e4       	ldi	r21, 0x44	; 68
    23a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8c 87       	std	Y+12, r24	; 0x0c
    23b2:	9d 87       	std	Y+13, r25	; 0x0d
    23b4:	ae 87       	std	Y+14, r26	; 0x0e
    23b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    23bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    23be:	9f 85       	ldd	r25, Y+15	; 0x0f
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a ef       	ldi	r20, 0xFA	; 250
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	88 87       	std	Y+8, r24	; 0x08
    23d2:	99 87       	std	Y+9, r25	; 0x09
    23d4:	aa 87       	std	Y+10, r26	; 0x0a
    23d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23d8:	68 85       	ldd	r22, Y+8	; 0x08
    23da:	79 85       	ldd	r23, Y+9	; 0x09
    23dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23de:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <LCD_sendCommand+0xe04>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9f 83       	std	Y+7, r25	; 0x07
    23f6:	8e 83       	std	Y+6, r24	; 0x06
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <LCD_sendCommand+0xe82>
	else if (__tmp > 65535)
    23fa:	68 85       	ldd	r22, Y+8	; 0x08
    23fc:	79 85       	ldd	r23, Y+9	; 0x09
    23fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2400:	9b 85       	ldd	r25, Y+11	; 0x0b
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <LCD_sendCommand+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	6c 85       	ldd	r22, Y+12	; 0x0c
    2414:	7d 85       	ldd	r23, Y+13	; 0x0d
    2416:	8e 85       	ldd	r24, Y+14	; 0x0e
    2418:	9f 85       	ldd	r25, Y+15	; 0x0f
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
    243a:	0f c0       	rjmp	.+30     	; 0x245a <LCD_sendCommand+0xe64>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9d 83       	std	Y+5, r25	; 0x05
    2442:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_sendCommand+0xe52>
    244c:	9d 83       	std	Y+5, r25	; 0x05
    244e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	9f 81       	ldd	r25, Y+7	; 0x07
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9f 83       	std	Y+7, r25	; 0x07
    2458:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8e 81       	ldd	r24, Y+6	; 0x06
    245c:	9f 81       	ldd	r25, Y+7	; 0x07
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <LCD_sendCommand+0xe46>
    2462:	24 c0       	rjmp	.+72     	; 0x24ac <LCD_sendCommand+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	68 85       	ldd	r22, Y+8	; 0x08
    2466:	79 85       	ldd	r23, Y+9	; 0x09
    2468:	8a 85       	ldd	r24, Y+10	; 0x0a
    246a:	9b 85       	ldd	r25, Y+11	; 0x0b
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9f 83       	std	Y+7, r25	; 0x07
    2476:	8e 83       	std	Y+6, r24	; 0x06
    2478:	8e 81       	ldd	r24, Y+6	; 0x06
    247a:	9f 81       	ldd	r25, Y+7	; 0x07
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_sendCommand+0xe8e>
    2488:	9b 83       	std	Y+3, r25	; 0x03
    248a:	8a 83       	std	Y+2, r24	; 0x02
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <LCD_sendCommand+0xeb6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    248e:	69 89       	ldd	r22, Y+17	; 0x11
    2490:	7a 89       	ldd	r23, Y+18	; 0x12
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	88 8b       	std	Y+16, r24	; 0x10
    24a0:	88 89       	ldd	r24, Y+16	; 0x10
    24a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	8a 95       	dec	r24
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_sendCommand+0xeb0>
    24aa:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_us(600); /* delay for processing Th = 13ns */
#endif
}
    24ac:	c7 55       	subi	r28, 0x57	; 87
    24ae:	df 4f       	sbci	r29, 0xFF	; 255
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <LCD_displayCharacter>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_displayCharacter(uint8 data)
{
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	c9 5a       	subi	r28, 0xA9	; 169
    24d2:	d0 40       	sbci	r29, 0x00	; 0
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	fe 01       	movw	r30, r28
    24e0:	e7 55       	subi	r30, 0x57	; 87
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    24e6:	ab e3       	ldi	r26, 0x3B	; 59
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	eb e3       	ldi	r30, 0x3B	; 59
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	82 60       	ori	r24, 0x02	; 2
    24f2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    24f4:	ab e3       	ldi	r26, 0x3B	; 59
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	eb e3       	ldi	r30, 0x3B	; 59
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8b 7f       	andi	r24, 0xFB	; 251
    2500:	8c 93       	st	X, r24
    2502:	fe 01       	movw	r30, r28
    2504:	eb 55       	subi	r30, 0x5B	; 91
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a6 e1       	ldi	r26, 0x16	; 22
    250e:	b4 e4       	ldi	r27, 0x44	; 68
    2510:	80 83       	st	Z, r24
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	a2 83       	std	Z+2, r26	; 0x02
    2516:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2518:	8e 01       	movw	r16, r28
    251a:	0f 55       	subi	r16, 0x5F	; 95
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	fe 01       	movw	r30, r28
    2520:	eb 55       	subi	r30, 0x5B	; 91
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	2b ea       	ldi	r18, 0xAB	; 171
    252e:	3a ea       	ldi	r19, 0xAA	; 170
    2530:	4a e2       	ldi	r20, 0x2A	; 42
    2532:	50 e4       	ldi	r21, 0x40	; 64
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	80 83       	st	Z, r24
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	a2 83       	std	Z+2, r26	; 0x02
    2544:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2546:	fe 01       	movw	r30, r28
    2548:	ef 55       	subi	r30, 0x5F	; 95
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	34 f4       	brge	.+12     	; 0x2570 <LCD_displayCharacter+0xac>
		__ticks = 1;
    2564:	fe 01       	movw	r30, r28
    2566:	e0 56       	subi	r30, 0x60	; 96
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	80 83       	st	Z, r24
    256e:	e0 c0       	rjmp	.+448    	; 0x2730 <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    2570:	fe 01       	movw	r30, r28
    2572:	ef 55       	subi	r30, 0x5F	; 95
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	53 e4       	ldi	r21, 0x43	; 67
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	0c f0       	brlt	.+2      	; 0x2590 <LCD_displayCharacter+0xcc>
    258e:	c0 c0       	rjmp	.+384    	; 0x2710 <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    2590:	fe 01       	movw	r30, r28
    2592:	eb 55       	subi	r30, 0x5B	; 91
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a e7       	ldi	r20, 0x7A	; 122
    25a4:	54 e4       	ldi	r21, 0x44	; 68
    25a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	fe 01       	movw	r30, r28
    25b0:	e4 56       	subi	r30, 0x64	; 100
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	8e 01       	movw	r16, r28
    25be:	08 56       	subi	r16, 0x68	; 104
    25c0:	1f 4f       	sbci	r17, 0xFF	; 255
    25c2:	fe 01       	movw	r30, r28
    25c4:	e4 56       	subi	r30, 0x64	; 100
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a ef       	ldi	r20, 0xFA	; 250
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	f8 01       	movw	r30, r16
    25e2:	80 83       	st	Z, r24
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	a2 83       	std	Z+2, r26	; 0x02
    25e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ea:	fe 01       	movw	r30, r28
    25ec:	e8 56       	subi	r30, 0x68	; 104
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e8       	ldi	r20, 0x80	; 128
    25fe:	5f e3       	ldi	r21, 0x3F	; 63
    2600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2604:	88 23       	and	r24, r24
    2606:	44 f4       	brge	.+16     	; 0x2618 <LCD_displayCharacter+0x154>
		__ticks = 1;
    2608:	fe 01       	movw	r30, r28
    260a:	ea 56       	subi	r30, 0x6A	; 106
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	64 c0       	rjmp	.+200    	; 0x26e0 <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    2618:	fe 01       	movw	r30, r28
    261a:	e8 56       	subi	r30, 0x68	; 104
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	0c f0       	brlt	.+2      	; 0x2638 <LCD_displayCharacter+0x174>
    2636:	43 c0       	rjmp	.+134    	; 0x26be <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	fe 01       	movw	r30, r28
    263a:	e4 56       	subi	r30, 0x64	; 100
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e2       	ldi	r20, 0x20	; 32
    264c:	51 e4       	ldi	r21, 0x41	; 65
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8e 01       	movw	r16, r28
    2658:	0a 56       	subi	r16, 0x6A	; 106
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	f8 01       	movw	r30, r16
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	1f c0       	rjmp	.+62     	; 0x26ae <LCD_displayCharacter+0x1ea>
    2670:	fe 01       	movw	r30, r28
    2672:	ec 56       	subi	r30, 0x6C	; 108
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267e:	fe 01       	movw	r30, r28
    2680:	ec 56       	subi	r30, 0x6C	; 108
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_displayCharacter+0x1c4>
    268c:	fe 01       	movw	r30, r28
    268e:	ec 56       	subi	r30, 0x6C	; 108
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	de 01       	movw	r26, r28
    2698:	aa 56       	subi	r26, 0x6A	; 106
    269a:	bf 4f       	sbci	r27, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	ea 56       	subi	r30, 0x6A	; 106
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	11 96       	adiw	r26, 0x01	; 1
    26aa:	9c 93       	st	X, r25
    26ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ae:	fe 01       	movw	r30, r28
    26b0:	ea 56       	subi	r30, 0x6A	; 106
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	d1 f6       	brne	.-76     	; 0x2670 <LCD_displayCharacter+0x1ac>
    26bc:	4b c0       	rjmp	.+150    	; 0x2754 <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	8e 01       	movw	r16, r28
    26c0:	0a 56       	subi	r16, 0x6A	; 106
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e8 56       	subi	r30, 0x68	; 104
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	de 01       	movw	r26, r28
    26e2:	ae 56       	subi	r26, 0x6E	; 110
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	ea 56       	subi	r30, 0x6A	; 106
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	11 96       	adiw	r26, 0x01	; 1
    26f2:	9c 93       	st	X, r25
    26f4:	8e 93       	st	-X, r24
    26f6:	fe 01       	movw	r30, r28
    26f8:	ee 56       	subi	r30, 0x6E	; 110
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_displayCharacter+0x23c>
    2704:	fe 01       	movw	r30, r28
    2706:	ee 56       	subi	r30, 0x6E	; 110
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
    270e:	22 c0       	rjmp	.+68     	; 0x2754 <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2710:	8e 01       	movw	r16, r28
    2712:	00 56       	subi	r16, 0x60	; 96
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	ef 55       	subi	r30, 0x5F	; 95
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	f8 01       	movw	r30, r16
    272e:	80 83       	st	Z, r24
    2730:	de 01       	movw	r26, r28
    2732:	af 56       	subi	r26, 0x6F	; 111
    2734:	bf 4f       	sbci	r27, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	e0 56       	subi	r30, 0x60	; 96
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2740:	fe 01       	movw	r30, r28
    2742:	ef 56       	subi	r30, 0x6F	; 111
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	8a 95       	dec	r24
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_displayCharacter+0x284>
    274c:	fe 01       	movw	r30, r28
    274e:	ef 56       	subi	r30, 0x6F	; 111
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2754:	ab e3       	ldi	r26, 0x3B	; 59
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	eb e3       	ldi	r30, 0x3B	; 59
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	88 60       	ori	r24, 0x08	; 8
    2760:	8c 93       	st	X, r24
    2762:	fe 01       	movw	r30, r28
    2764:	e3 57       	subi	r30, 0x73	; 115
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a6 e1       	ldi	r26, 0x16	; 22
    276e:	b4 e4       	ldi	r27, 0x44	; 68
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2778:	8e 01       	movw	r16, r28
    277a:	07 57       	subi	r16, 0x77	; 119
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	e3 57       	subi	r30, 0x73	; 115
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	2b ea       	ldi	r18, 0xAB	; 171
    278e:	3a ea       	ldi	r19, 0xAA	; 170
    2790:	4a e2       	ldi	r20, 0x2A	; 42
    2792:	50 e4       	ldi	r21, 0x40	; 64
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	f8 01       	movw	r30, r16
    279e:	80 83       	st	Z, r24
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	a2 83       	std	Z+2, r26	; 0x02
    27a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a6:	fe 01       	movw	r30, r28
    27a8:	e7 57       	subi	r30, 0x77	; 119
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	34 f4       	brge	.+12     	; 0x27d0 <LCD_displayCharacter+0x30c>
		__ticks = 1;
    27c4:	fe 01       	movw	r30, r28
    27c6:	e8 57       	subi	r30, 0x78	; 120
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 83       	st	Z, r24
    27ce:	e0 c0       	rjmp	.+448    	; 0x2990 <LCD_displayCharacter+0x4cc>
	else if (__tmp > 255)
    27d0:	fe 01       	movw	r30, r28
    27d2:	e7 57       	subi	r30, 0x77	; 119
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	53 e4       	ldi	r21, 0x43	; 67
    27e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	0c f0       	brlt	.+2      	; 0x27f0 <LCD_displayCharacter+0x32c>
    27ee:	c0 c0       	rjmp	.+384    	; 0x2970 <LCD_displayCharacter+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    27f0:	fe 01       	movw	r30, r28
    27f2:	e3 57       	subi	r30, 0x73	; 115
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a e7       	ldi	r20, 0x7A	; 122
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	fe 01       	movw	r30, r28
    2810:	ec 57       	subi	r30, 0x7C	; 124
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	8e 01       	movw	r16, r28
    281e:	00 58       	subi	r16, 0x80	; 128
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	ec 57       	subi	r30, 0x7C	; 124
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	f8 01       	movw	r30, r16
    2842:	80 83       	st	Z, r24
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	a2 83       	std	Z+2, r26	; 0x02
    2848:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    284a:	fe 01       	movw	r30, r28
    284c:	e0 58       	subi	r30, 0x80	; 128
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2864:	88 23       	and	r24, r24
    2866:	44 f4       	brge	.+16     	; 0x2878 <LCD_displayCharacter+0x3b4>
		__ticks = 1;
    2868:	fe 01       	movw	r30, r28
    286a:	e2 58       	subi	r30, 0x82	; 130
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	64 c0       	rjmp	.+200    	; 0x2940 <LCD_displayCharacter+0x47c>
	else if (__tmp > 65535)
    2878:	fe 01       	movw	r30, r28
    287a:	e0 58       	subi	r30, 0x80	; 128
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	0c f0       	brlt	.+2      	; 0x2898 <LCD_displayCharacter+0x3d4>
    2896:	43 c0       	rjmp	.+134    	; 0x291e <LCD_displayCharacter+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2898:	fe 01       	movw	r30, r28
    289a:	ec 57       	subi	r30, 0x7C	; 124
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8e 01       	movw	r16, r28
    28b8:	02 58       	subi	r16, 0x82	; 130
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	f8 01       	movw	r30, r16
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	1f c0       	rjmp	.+62     	; 0x290e <LCD_displayCharacter+0x44a>
    28d0:	fe 01       	movw	r30, r28
    28d2:	e4 58       	subi	r30, 0x84	; 132
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	88 ec       	ldi	r24, 0xC8	; 200
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28de:	fe 01       	movw	r30, r28
    28e0:	e4 58       	subi	r30, 0x84	; 132
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_displayCharacter+0x424>
    28ec:	fe 01       	movw	r30, r28
    28ee:	e4 58       	subi	r30, 0x84	; 132
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	de 01       	movw	r26, r28
    28f8:	a2 58       	subi	r26, 0x82	; 130
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	fe 01       	movw	r30, r28
    28fe:	e2 58       	subi	r30, 0x82	; 130
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	11 96       	adiw	r26, 0x01	; 1
    290a:	9c 93       	st	X, r25
    290c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	fe 01       	movw	r30, r28
    2910:	e2 58       	subi	r30, 0x82	; 130
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	d1 f6       	brne	.-76     	; 0x28d0 <LCD_displayCharacter+0x40c>
    291c:	4b c0       	rjmp	.+150    	; 0x29b4 <LCD_displayCharacter+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291e:	8e 01       	movw	r16, r28
    2920:	02 58       	subi	r16, 0x82	; 130
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	fe 01       	movw	r30, r28
    2926:	e0 58       	subi	r30, 0x80	; 128
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	f8 01       	movw	r30, r16
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	de 01       	movw	r26, r28
    2942:	a6 58       	subi	r26, 0x86	; 134
    2944:	bf 4f       	sbci	r27, 0xFF	; 255
    2946:	fe 01       	movw	r30, r28
    2948:	e2 58       	subi	r30, 0x82	; 130
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 81       	ld	r24, Z
    294e:	91 81       	ldd	r25, Z+1	; 0x01
    2950:	11 96       	adiw	r26, 0x01	; 1
    2952:	9c 93       	st	X, r25
    2954:	8e 93       	st	-X, r24
    2956:	fe 01       	movw	r30, r28
    2958:	e6 58       	subi	r30, 0x86	; 134
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_displayCharacter+0x49c>
    2964:	fe 01       	movw	r30, r28
    2966:	e6 58       	subi	r30, 0x86	; 134
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	91 83       	std	Z+1, r25	; 0x01
    296c:	80 83       	st	Z, r24
    296e:	22 c0       	rjmp	.+68     	; 0x29b4 <LCD_displayCharacter+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2970:	8e 01       	movw	r16, r28
    2972:	08 57       	subi	r16, 0x78	; 120
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	e7 57       	subi	r30, 0x77	; 119
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	80 83       	st	Z, r24
    2990:	de 01       	movw	r26, r28
    2992:	a7 58       	subi	r26, 0x87	; 135
    2994:	bf 4f       	sbci	r27, 0xFF	; 255
    2996:	fe 01       	movw	r30, r28
    2998:	e8 57       	subi	r30, 0x78	; 120
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29a0:	fe 01       	movw	r30, r28
    29a2:	e7 58       	subi	r30, 0x87	; 135
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	8a 95       	dec	r24
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <LCD_displayCharacter+0x4e4>
    29ac:	fe 01       	movw	r30, r28
    29ae:	e7 58       	subi	r30, 0x87	; 135
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    29b4:	ab e3       	ldi	r26, 0x3B	; 59
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	eb e3       	ldi	r30, 0x3B	; 59
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	98 2f       	mov	r25, r24
    29c0:	9f 70       	andi	r25, 0x0F	; 15
    29c2:	fe 01       	movw	r30, r28
    29c4:	e7 55       	subi	r30, 0x57	; 87
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	80 7f       	andi	r24, 0xF0	; 240
    29cc:	89 2b       	or	r24, r25
    29ce:	8c 93       	st	X, r24
    29d0:	fe 01       	movw	r30, r28
    29d2:	eb 58       	subi	r30, 0x8B	; 139
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a6 e1       	ldi	r26, 0x16	; 22
    29dc:	b4 e4       	ldi	r27, 0x44	; 68
    29de:	80 83       	st	Z, r24
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	a2 83       	std	Z+2, r26	; 0x02
    29e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29e6:	8e 01       	movw	r16, r28
    29e8:	0f 58       	subi	r16, 0x8F	; 143
    29ea:	1f 4f       	sbci	r17, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	eb 58       	subi	r30, 0x8B	; 139
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	2b ea       	ldi	r18, 0xAB	; 171
    29fc:	3a ea       	ldi	r19, 0xAA	; 170
    29fe:	4a e2       	ldi	r20, 0x2A	; 42
    2a00:	50 e4       	ldi	r21, 0x40	; 64
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	80 83       	st	Z, r24
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	a2 83       	std	Z+2, r26	; 0x02
    2a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a14:	fe 01       	movw	r30, r28
    2a16:	ef 58       	subi	r30, 0x8F	; 143
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	34 f4       	brge	.+12     	; 0x2a3e <LCD_displayCharacter+0x57a>
		__ticks = 1;
    2a32:	fe 01       	movw	r30, r28
    2a34:	e0 59       	subi	r30, 0x90	; 144
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	80 83       	st	Z, r24
    2a3c:	e0 c0       	rjmp	.+448    	; 0x2bfe <LCD_displayCharacter+0x73a>
	else if (__tmp > 255)
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ef 58       	subi	r30, 0x8F	; 143
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	60 81       	ld	r22, Z
    2a46:	71 81       	ldd	r23, Z+1	; 0x01
    2a48:	82 81       	ldd	r24, Z+2	; 0x02
    2a4a:	93 81       	ldd	r25, Z+3	; 0x03
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	53 e4       	ldi	r21, 0x43	; 67
    2a54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	0c f0       	brlt	.+2      	; 0x2a5e <LCD_displayCharacter+0x59a>
    2a5c:	c0 c0       	rjmp	.+384    	; 0x2bde <LCD_displayCharacter+0x71a>
	{
		_delay_ms(__us / 1000.0);
    2a5e:	fe 01       	movw	r30, r28
    2a60:	eb 58       	subi	r30, 0x8B	; 139
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a e7       	ldi	r20, 0x7A	; 122
    2a72:	54 e4       	ldi	r21, 0x44	; 68
    2a74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e4 59       	subi	r30, 0x94	; 148
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 83       	st	Z, r24
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	a2 83       	std	Z+2, r26	; 0x02
    2a88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	08 59       	subi	r16, 0x98	; 152
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	e4 59       	subi	r30, 0x94	; 148
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	f8 01       	movw	r30, r16
    2ab0:	80 83       	st	Z, r24
    2ab2:	91 83       	std	Z+1, r25	; 0x01
    2ab4:	a2 83       	std	Z+2, r26	; 0x02
    2ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e8 59       	subi	r30, 0x98	; 152
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e8       	ldi	r20, 0x80	; 128
    2acc:	5f e3       	ldi	r21, 0x3F	; 63
    2ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad2:	88 23       	and	r24, r24
    2ad4:	44 f4       	brge	.+16     	; 0x2ae6 <LCD_displayCharacter+0x622>
		__ticks = 1;
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	ea 59       	subi	r30, 0x9A	; 154
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	80 83       	st	Z, r24
    2ae4:	64 c0       	rjmp	.+200    	; 0x2bae <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e8 59       	subi	r30, 0x98	; 152
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	3f ef       	ldi	r19, 0xFF	; 255
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	57 e4       	ldi	r21, 0x47	; 71
    2afc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	0c f0       	brlt	.+2      	; 0x2b06 <LCD_displayCharacter+0x642>
    2b04:	43 c0       	rjmp	.+134    	; 0x2b8c <LCD_displayCharacter+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b06:	fe 01       	movw	r30, r28
    2b08:	e4 59       	subi	r30, 0x94	; 148
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8e 01       	movw	r16, r28
    2b26:	0a 59       	subi	r16, 0x9A	; 154
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	f8 01       	movw	r30, r16
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	1f c0       	rjmp	.+62     	; 0x2b7c <LCD_displayCharacter+0x6b8>
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ec 59       	subi	r30, 0x9C	; 156
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	88 ec       	ldi	r24, 0xC8	; 200
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ec 59       	subi	r30, 0x9C	; 156
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <LCD_displayCharacter+0x692>
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ec 59       	subi	r30, 0x9C	; 156
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	de 01       	movw	r26, r28
    2b66:	aa 59       	subi	r26, 0x9A	; 154
    2b68:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ea 59       	subi	r30, 0x9A	; 154
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	11 96       	adiw	r26, 0x01	; 1
    2b78:	9c 93       	st	X, r25
    2b7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ea 59       	subi	r30, 0x9A	; 154
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	d1 f6       	brne	.-76     	; 0x2b3e <LCD_displayCharacter+0x67a>
    2b8a:	4b c0       	rjmp	.+150    	; 0x2c22 <LCD_displayCharacter+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	8e 01       	movw	r16, r28
    2b8e:	0a 59       	subi	r16, 0x9A	; 154
    2b90:	1f 4f       	sbci	r17, 0xFF	; 255
    2b92:	fe 01       	movw	r30, r28
    2b94:	e8 59       	subi	r30, 0x98	; 152
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	60 81       	ld	r22, Z
    2b9a:	71 81       	ldd	r23, Z+1	; 0x01
    2b9c:	82 81       	ldd	r24, Z+2	; 0x02
    2b9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	f8 01       	movw	r30, r16
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	de 01       	movw	r26, r28
    2bb0:	ae 59       	subi	r26, 0x9E	; 158
    2bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ea 59       	subi	r30, 0x9A	; 154
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	11 96       	adiw	r26, 0x01	; 1
    2bc0:	9c 93       	st	X, r25
    2bc2:	8e 93       	st	-X, r24
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ee 59       	subi	r30, 0x9E	; 158
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_displayCharacter+0x70a>
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ee 59       	subi	r30, 0x9E	; 158
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
    2bdc:	22 c0       	rjmp	.+68     	; 0x2c22 <LCD_displayCharacter+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bde:	8e 01       	movw	r16, r28
    2be0:	00 59       	subi	r16, 0x90	; 144
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	fe 01       	movw	r30, r28
    2be6:	ef 58       	subi	r30, 0x8F	; 143
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	93 81       	ldd	r25, Z+3	; 0x03
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	80 83       	st	Z, r24
    2bfe:	de 01       	movw	r26, r28
    2c00:	af 59       	subi	r26, 0x9F	; 159
    2c02:	bf 4f       	sbci	r27, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	e0 59       	subi	r30, 0x90	; 144
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ef 59       	subi	r30, 0x9F	; 159
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	8a 95       	dec	r24
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_displayCharacter+0x752>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ef 59       	subi	r30, 0x9F	; 159
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 83       	st	Z, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2c22:	ab e3       	ldi	r26, 0x3B	; 59
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	eb e3       	ldi	r30, 0x3B	; 59
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	87 7f       	andi	r24, 0xF7	; 247
    2c2e:	8c 93       	st	X, r24
    2c30:	fe 01       	movw	r30, r28
    2c32:	e3 5a       	subi	r30, 0xA3	; 163
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a6 e1       	ldi	r26, 0x16	; 22
    2c3c:	b4 e4       	ldi	r27, 0x44	; 68
    2c3e:	80 83       	st	Z, r24
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	a2 83       	std	Z+2, r26	; 0x02
    2c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c46:	8e 01       	movw	r16, r28
    2c48:	07 5a       	subi	r16, 0xA7	; 167
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e3 5a       	subi	r30, 0xA3	; 163
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	2b ea       	ldi	r18, 0xAB	; 171
    2c5c:	3a ea       	ldi	r19, 0xAA	; 170
    2c5e:	4a e2       	ldi	r20, 0x2A	; 42
    2c60:	50 e4       	ldi	r21, 0x40	; 64
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	80 83       	st	Z, r24
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	a2 83       	std	Z+2, r26	; 0x02
    2c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c74:	fe 01       	movw	r30, r28
    2c76:	e7 5a       	subi	r30, 0xA7	; 167
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	34 f4       	brge	.+12     	; 0x2c9e <LCD_displayCharacter+0x7da>
		__ticks = 1;
    2c92:	fe 01       	movw	r30, r28
    2c94:	e8 5a       	subi	r30, 0xA8	; 168
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	80 83       	st	Z, r24
    2c9c:	e0 c0       	rjmp	.+448    	; 0x2e5e <LCD_displayCharacter+0x99a>
	else if (__tmp > 255)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e7 5a       	subi	r30, 0xA7	; 167
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	53 e4       	ldi	r21, 0x43	; 67
    2cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	0c f0       	brlt	.+2      	; 0x2cbe <LCD_displayCharacter+0x7fa>
    2cbc:	c0 c0       	rjmp	.+384    	; 0x2e3e <LCD_displayCharacter+0x97a>
	{
		_delay_ms(__us / 1000.0);
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e3 5a       	subi	r30, 0xA3	; 163
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a e7       	ldi	r20, 0x7A	; 122
    2cd2:	54 e4       	ldi	r21, 0x44	; 68
    2cd4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ec 5a       	subi	r30, 0xAC	; 172
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 83       	st	Z, r24
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	a2 83       	std	Z+2, r26	; 0x02
    2ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cea:	8e 01       	movw	r16, r28
    2cec:	00 5b       	subi	r16, 0xB0	; 176
    2cee:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ec 5a       	subi	r30, 0xAC	; 172
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	4a ef       	ldi	r20, 0xFA	; 250
    2d04:	54 e4       	ldi	r21, 0x44	; 68
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	f8 01       	movw	r30, r16
    2d10:	80 83       	st	Z, r24
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	a2 83       	std	Z+2, r26	; 0x02
    2d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e0 5b       	subi	r30, 0xB0	; 176
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	44 f4       	brge	.+16     	; 0x2d46 <LCD_displayCharacter+0x882>
		__ticks = 1;
    2d36:	fe 01       	movw	r30, r28
    2d38:	e2 5b       	subi	r30, 0xB2	; 178
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	80 83       	st	Z, r24
    2d44:	64 c0       	rjmp	.+200    	; 0x2e0e <LCD_displayCharacter+0x94a>
	else if (__tmp > 65535)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e0 5b       	subi	r30, 0xB0	; 176
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	4f e7       	ldi	r20, 0x7F	; 127
    2d5a:	57 e4       	ldi	r21, 0x47	; 71
    2d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <LCD_displayCharacter+0x8a2>
    2d64:	43 c0       	rjmp	.+134    	; 0x2dec <LCD_displayCharacter+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	fe 01       	movw	r30, r28
    2d68:	ec 5a       	subi	r30, 0xAC	; 172
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	60 81       	ld	r22, Z
    2d6e:	71 81       	ldd	r23, Z+1	; 0x01
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	8e 01       	movw	r16, r28
    2d86:	02 5b       	subi	r16, 0xB2	; 178
    2d88:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	f8 01       	movw	r30, r16
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
    2d9c:	1f c0       	rjmp	.+62     	; 0x2ddc <LCD_displayCharacter+0x918>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e4 5b       	subi	r30, 0xB4	; 180
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	88 ec       	ldi	r24, 0xC8	; 200
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dac:	fe 01       	movw	r30, r28
    2dae:	e4 5b       	subi	r30, 0xB4	; 180
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <LCD_displayCharacter+0x8f2>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e4 5b       	subi	r30, 0xB4	; 180
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	de 01       	movw	r26, r28
    2dc6:	a2 5b       	subi	r26, 0xB2	; 178
    2dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e2 5b       	subi	r30, 0xB2	; 178
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	91 81       	ldd	r25, Z+1	; 0x01
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	11 96       	adiw	r26, 0x01	; 1
    2dd8:	9c 93       	st	X, r25
    2dda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e2 5b       	subi	r30, 0xB2	; 178
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	91 81       	ldd	r25, Z+1	; 0x01
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	d1 f6       	brne	.-76     	; 0x2d9e <LCD_displayCharacter+0x8da>
    2dea:	4b c0       	rjmp	.+150    	; 0x2e82 <LCD_displayCharacter+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	8e 01       	movw	r16, r28
    2dee:	02 5b       	subi	r16, 0xB2	; 178
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	fe 01       	movw	r30, r28
    2df4:	e0 5b       	subi	r30, 0xB0	; 176
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
    2e0e:	de 01       	movw	r26, r28
    2e10:	a6 5b       	subi	r26, 0xB6	; 182
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	fe 01       	movw	r30, r28
    2e16:	e2 5b       	subi	r30, 0xB2	; 178
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	11 96       	adiw	r26, 0x01	; 1
    2e20:	9c 93       	st	X, r25
    2e22:	8e 93       	st	-X, r24
    2e24:	fe 01       	movw	r30, r28
    2e26:	e6 5b       	subi	r30, 0xB6	; 182
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_displayCharacter+0x96a>
    2e32:	fe 01       	movw	r30, r28
    2e34:	e6 5b       	subi	r30, 0xB6	; 182
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	22 c0       	rjmp	.+68     	; 0x2e82 <LCD_displayCharacter+0x9be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e3e:	8e 01       	movw	r16, r28
    2e40:	08 5a       	subi	r16, 0xA8	; 168
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	fe 01       	movw	r30, r28
    2e46:	e7 5a       	subi	r30, 0xA7	; 167
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	60 81       	ld	r22, Z
    2e4c:	71 81       	ldd	r23, Z+1	; 0x01
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	80 83       	st	Z, r24
    2e5e:	de 01       	movw	r26, r28
    2e60:	a7 5b       	subi	r26, 0xB7	; 183
    2e62:	bf 4f       	sbci	r27, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	e8 5a       	subi	r30, 0xA8	; 168
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e7 5b       	subi	r30, 0xB7	; 183
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	8a 95       	dec	r24
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <LCD_displayCharacter+0x9b2>
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e7 5b       	subi	r30, 0xB7	; 183
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2e82:	ab e3       	ldi	r26, 0x3B	; 59
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	eb e3       	ldi	r30, 0x3B	; 59
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 60       	ori	r24, 0x08	; 8
    2e8e:	8c 93       	st	X, r24
    2e90:	fe 01       	movw	r30, r28
    2e92:	eb 5b       	subi	r30, 0xBB	; 187
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	a6 e1       	ldi	r26, 0x16	; 22
    2e9c:	b4 e4       	ldi	r27, 0x44	; 68
    2e9e:	80 83       	st	Z, r24
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	a2 83       	std	Z+2, r26	; 0x02
    2ea4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ea6:	8e 01       	movw	r16, r28
    2ea8:	0f 5b       	subi	r16, 0xBF	; 191
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	fe 01       	movw	r30, r28
    2eae:	eb 5b       	subi	r30, 0xBB	; 187
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	2b ea       	ldi	r18, 0xAB	; 171
    2ebc:	3a ea       	ldi	r19, 0xAA	; 170
    2ebe:	4a e2       	ldi	r20, 0x2A	; 42
    2ec0:	50 e4       	ldi	r21, 0x40	; 64
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	80 83       	st	Z, r24
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	a2 83       	std	Z+2, r26	; 0x02
    2ed2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ef 5b       	subi	r30, 0xBF	; 191
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	60 81       	ld	r22, Z
    2edc:	71 81       	ldd	r23, Z+1	; 0x01
    2ede:	82 81       	ldd	r24, Z+2	; 0x02
    2ee0:	93 81       	ldd	r25, Z+3	; 0x03
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e8       	ldi	r20, 0x80	; 128
    2ee8:	5f e3       	ldi	r21, 0x3F	; 63
    2eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eee:	88 23       	and	r24, r24
    2ef0:	34 f4       	brge	.+12     	; 0x2efe <LCD_displayCharacter+0xa3a>
		__ticks = 1;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e0 5c       	subi	r30, 0xC0	; 192
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 83       	st	Z, r24
    2efc:	9d c0       	rjmp	.+314    	; 0x3038 <LCD_displayCharacter+0xb74>
	else if (__tmp > 255)
    2efe:	fe 01       	movw	r30, r28
    2f00:	ef 5b       	subi	r30, 0xBF	; 191
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4f e7       	ldi	r20, 0x7F	; 127
    2f12:	53 e4       	ldi	r21, 0x43	; 67
    2f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f18:	18 16       	cp	r1, r24
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <LCD_displayCharacter+0xa5a>
    2f1c:	7e c0       	rjmp	.+252    	; 0x301a <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2f1e:	fe 01       	movw	r30, r28
    2f20:	eb 5b       	subi	r30, 0xBB	; 187
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	4a e7       	ldi	r20, 0x7A	; 122
    2f32:	54 e4       	ldi	r21, 0x44	; 68
    2f34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	8c af       	std	Y+60, r24	; 0x3c
    2f3e:	9d af       	std	Y+61, r25	; 0x3d
    2f40:	ae af       	std	Y+62, r26	; 0x3e
    2f42:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f46:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f48:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a ef       	ldi	r20, 0xFA	; 250
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	88 af       	std	Y+56, r24	; 0x38
    2f5e:	99 af       	std	Y+57, r25	; 0x39
    2f60:	aa af       	std	Y+58, r26	; 0x3a
    2f62:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2f64:	68 ad       	ldd	r22, Y+56	; 0x38
    2f66:	79 ad       	ldd	r23, Y+57	; 0x39
    2f68:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f6a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	2c f4       	brge	.+10     	; 0x2f86 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9f ab       	std	Y+55, r25	; 0x37
    2f82:	8e ab       	std	Y+54, r24	; 0x36
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    2f86:	68 ad       	ldd	r22, Y+56	; 0x38
    2f88:	79 ad       	ldd	r23, Y+57	; 0x39
    2f8a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f8c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2fa0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2fa2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fa4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9f ab       	std	Y+55, r25	; 0x37
    2fc4:	8e ab       	std	Y+54, r24	; 0x36
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <LCD_displayCharacter+0xb22>
    2fc8:	88 ec       	ldi	r24, 0xC8	; 200
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9d ab       	std	Y+53, r25	; 0x35
    2fce:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fd0:	8c a9       	ldd	r24, Y+52	; 0x34
    2fd2:	9d a9       	ldd	r25, Y+53	; 0x35
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <LCD_displayCharacter+0xb10>
    2fd8:	9d ab       	std	Y+53, r25	; 0x35
    2fda:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	8e a9       	ldd	r24, Y+54	; 0x36
    2fde:	9f a9       	ldd	r25, Y+55	; 0x37
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	9f ab       	std	Y+55, r25	; 0x37
    2fe4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe6:	8e a9       	ldd	r24, Y+54	; 0x36
    2fe8:	9f a9       	ldd	r25, Y+55	; 0x37
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	69 f7       	brne	.-38     	; 0x2fc8 <LCD_displayCharacter+0xb04>
    2fee:	2d c0       	rjmp	.+90     	; 0x304a <LCD_displayCharacter+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	68 ad       	ldd	r22, Y+56	; 0x38
    2ff2:	79 ad       	ldd	r23, Y+57	; 0x39
    2ff4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ff6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9f ab       	std	Y+55, r25	; 0x37
    3002:	8e ab       	std	Y+54, r24	; 0x36
    3004:	8e a9       	ldd	r24, Y+54	; 0x36
    3006:	9f a9       	ldd	r25, Y+55	; 0x37
    3008:	9b ab       	std	Y+51, r25	; 0x33
    300a:	8a ab       	std	Y+50, r24	; 0x32
    300c:	8a a9       	ldd	r24, Y+50	; 0x32
    300e:	9b a9       	ldd	r25, Y+51	; 0x33
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <LCD_displayCharacter+0xb4c>
    3014:	9b ab       	std	Y+51, r25	; 0x33
    3016:	8a ab       	std	Y+50, r24	; 0x32
    3018:	18 c0       	rjmp	.+48     	; 0x304a <LCD_displayCharacter+0xb86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    301a:	fe 01       	movw	r30, r28
    301c:	ef 5b       	subi	r30, 0xBF	; 191
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	fe 01       	movw	r30, r28
    3032:	e0 5c       	subi	r30, 0xC0	; 192
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	80 83       	st	Z, r24
    3038:	fe 01       	movw	r30, r28
    303a:	e0 5c       	subi	r30, 0xC0	; 192
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3042:	89 a9       	ldd	r24, Y+49	; 0x31
    3044:	8a 95       	dec	r24
    3046:	f1 f7       	brne	.-4      	; 0x3044 <LCD_displayCharacter+0xb80>
    3048:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    304a:	ab e3       	ldi	r26, 0x3B	; 59
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	eb e3       	ldi	r30, 0x3B	; 59
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	28 2f       	mov	r18, r24
    3056:	2f 70       	andi	r18, 0x0F	; 15
    3058:	fe 01       	movw	r30, r28
    305a:	e7 55       	subi	r30, 0x57	; 87
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	80 81       	ld	r24, Z
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	82 95       	swap	r24
    3066:	92 95       	swap	r25
    3068:	90 7f       	andi	r25, 0xF0	; 240
    306a:	98 27       	eor	r25, r24
    306c:	80 7f       	andi	r24, 0xF0	; 240
    306e:	98 27       	eor	r25, r24
    3070:	82 2b       	or	r24, r18
    3072:	8c 93       	st	X, r24
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a6 e1       	ldi	r26, 0x16	; 22
    307a:	b4 e4       	ldi	r27, 0x44	; 68
    307c:	8d a7       	std	Y+45, r24	; 0x2d
    307e:	9e a7       	std	Y+46, r25	; 0x2e
    3080:	af a7       	std	Y+47, r26	; 0x2f
    3082:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3084:	6d a5       	ldd	r22, Y+45	; 0x2d
    3086:	7e a5       	ldd	r23, Y+46	; 0x2e
    3088:	8f a5       	ldd	r24, Y+47	; 0x2f
    308a:	98 a9       	ldd	r25, Y+48	; 0x30
    308c:	2b ea       	ldi	r18, 0xAB	; 171
    308e:	3a ea       	ldi	r19, 0xAA	; 170
    3090:	4a e2       	ldi	r20, 0x2A	; 42
    3092:	50 e4       	ldi	r21, 0x40	; 64
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	89 a7       	std	Y+41, r24	; 0x29
    309e:	9a a7       	std	Y+42, r25	; 0x2a
    30a0:	ab a7       	std	Y+43, r26	; 0x2b
    30a2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30a4:	69 a5       	ldd	r22, Y+41	; 0x29
    30a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    30a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e8       	ldi	r20, 0x80	; 128
    30b2:	5f e3       	ldi	r21, 0x3F	; 63
    30b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b8:	88 23       	and	r24, r24
    30ba:	1c f4       	brge	.+6      	; 0x30c2 <LCD_displayCharacter+0xbfe>
		__ticks = 1;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	88 a7       	std	Y+40, r24	; 0x28
    30c0:	91 c0       	rjmp	.+290    	; 0x31e4 <LCD_displayCharacter+0xd20>
	else if (__tmp > 255)
    30c2:	69 a5       	ldd	r22, Y+41	; 0x29
    30c4:	7a a5       	ldd	r23, Y+42	; 0x2a
    30c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	4f e7       	ldi	r20, 0x7F	; 127
    30d0:	53 e4       	ldi	r21, 0x43	; 67
    30d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d6:	18 16       	cp	r1, r24
    30d8:	0c f0       	brlt	.+2      	; 0x30dc <LCD_displayCharacter+0xc18>
    30da:	7b c0       	rjmp	.+246    	; 0x31d2 <LCD_displayCharacter+0xd0e>
	{
		_delay_ms(__us / 1000.0);
    30dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    30de:	7e a5       	ldd	r23, Y+46	; 0x2e
    30e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e2:	98 a9       	ldd	r25, Y+48	; 0x30
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a e7       	ldi	r20, 0x7A	; 122
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8c a3       	std	Y+36, r24	; 0x24
    30f6:	9d a3       	std	Y+37, r25	; 0x25
    30f8:	ae a3       	std	Y+38, r26	; 0x26
    30fa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	6c a1       	ldd	r22, Y+36	; 0x24
    30fe:	7d a1       	ldd	r23, Y+37	; 0x25
    3100:	8e a1       	ldd	r24, Y+38	; 0x26
    3102:	9f a1       	ldd	r25, Y+39	; 0x27
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a ef       	ldi	r20, 0xFA	; 250
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	88 a3       	std	Y+32, r24	; 0x20
    3116:	99 a3       	std	Y+33, r25	; 0x21
    3118:	aa a3       	std	Y+34, r26	; 0x22
    311a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    311c:	68 a1       	ldd	r22, Y+32	; 0x20
    311e:	79 a1       	ldd	r23, Y+33	; 0x21
    3120:	8a a1       	ldd	r24, Y+34	; 0x22
    3122:	9b a1       	ldd	r25, Y+35	; 0x23
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	5f e3       	ldi	r21, 0x3F	; 63
    312c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3130:	88 23       	and	r24, r24
    3132:	2c f4       	brge	.+10     	; 0x313e <LCD_displayCharacter+0xc7a>
		__ticks = 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9f 8f       	std	Y+31, r25	; 0x1f
    313a:	8e 8f       	std	Y+30, r24	; 0x1e
    313c:	3f c0       	rjmp	.+126    	; 0x31bc <LCD_displayCharacter+0xcf8>
	else if (__tmp > 65535)
    313e:	68 a1       	ldd	r22, Y+32	; 0x20
    3140:	79 a1       	ldd	r23, Y+33	; 0x21
    3142:	8a a1       	ldd	r24, Y+34	; 0x22
    3144:	9b a1       	ldd	r25, Y+35	; 0x23
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	4c f5       	brge	.+82     	; 0x31a8 <LCD_displayCharacter+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	6c a1       	ldd	r22, Y+36	; 0x24
    3158:	7d a1       	ldd	r23, Y+37	; 0x25
    315a:	8e a1       	ldd	r24, Y+38	; 0x26
    315c:	9f a1       	ldd	r25, Y+39	; 0x27
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9f 8f       	std	Y+31, r25	; 0x1f
    317c:	8e 8f       	std	Y+30, r24	; 0x1e
    317e:	0f c0       	rjmp	.+30     	; 0x319e <LCD_displayCharacter+0xcda>
    3180:	88 ec       	ldi	r24, 0xC8	; 200
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9d 8f       	std	Y+29, r25	; 0x1d
    3186:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3188:	8c 8d       	ldd	r24, Y+28	; 0x1c
    318a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <LCD_displayCharacter+0xcc8>
    3190:	9d 8f       	std	Y+29, r25	; 0x1d
    3192:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3194:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3196:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	9f 8f       	std	Y+31, r25	; 0x1f
    319c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	69 f7       	brne	.-38     	; 0x3180 <LCD_displayCharacter+0xcbc>
    31a6:	24 c0       	rjmp	.+72     	; 0x31f0 <LCD_displayCharacter+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a8:	68 a1       	ldd	r22, Y+32	; 0x20
    31aa:	79 a1       	ldd	r23, Y+33	; 0x21
    31ac:	8a a1       	ldd	r24, Y+34	; 0x22
    31ae:	9b a1       	ldd	r25, Y+35	; 0x23
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9f 8f       	std	Y+31, r25	; 0x1f
    31ba:	8e 8f       	std	Y+30, r24	; 0x1e
    31bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31c0:	9b 8f       	std	Y+27, r25	; 0x1b
    31c2:	8a 8f       	std	Y+26, r24	; 0x1a
    31c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_displayCharacter+0xd04>
    31cc:	9b 8f       	std	Y+27, r25	; 0x1b
    31ce:	8a 8f       	std	Y+26, r24	; 0x1a
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <LCD_displayCharacter+0xd2c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31d2:	69 a5       	ldd	r22, Y+41	; 0x29
    31d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    31d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	88 a7       	std	Y+40, r24	; 0x28
    31e4:	88 a5       	ldd	r24, Y+40	; 0x28
    31e6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e8:	89 8d       	ldd	r24, Y+25	; 0x19
    31ea:	8a 95       	dec	r24
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <LCD_displayCharacter+0xd26>
    31ee:	89 8f       	std	Y+25, r24	; 0x19
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    31f0:	ab e3       	ldi	r26, 0x3B	; 59
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	eb e3       	ldi	r30, 0x3B	; 59
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	87 7f       	andi	r24, 0xF7	; 247
    31fc:	8c 93       	st	X, r24
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	a6 e1       	ldi	r26, 0x16	; 22
    3204:	b4 e4       	ldi	r27, 0x44	; 68
    3206:	8d 8b       	std	Y+21, r24	; 0x15
    3208:	9e 8b       	std	Y+22, r25	; 0x16
    320a:	af 8b       	std	Y+23, r26	; 0x17
    320c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    320e:	6d 89       	ldd	r22, Y+21	; 0x15
    3210:	7e 89       	ldd	r23, Y+22	; 0x16
    3212:	8f 89       	ldd	r24, Y+23	; 0x17
    3214:	98 8d       	ldd	r25, Y+24	; 0x18
    3216:	2b ea       	ldi	r18, 0xAB	; 171
    3218:	3a ea       	ldi	r19, 0xAA	; 170
    321a:	4a e2       	ldi	r20, 0x2A	; 42
    321c:	50 e4       	ldi	r21, 0x40	; 64
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	89 8b       	std	Y+17, r24	; 0x11
    3228:	9a 8b       	std	Y+18, r25	; 0x12
    322a:	ab 8b       	std	Y+19, r26	; 0x13
    322c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    322e:	69 89       	ldd	r22, Y+17	; 0x11
    3230:	7a 89       	ldd	r23, Y+18	; 0x12
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	1c f4       	brge	.+6      	; 0x324c <LCD_displayCharacter+0xd88>
		__ticks = 1;
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	88 8b       	std	Y+16, r24	; 0x10
    324a:	91 c0       	rjmp	.+290    	; 0x336e <LCD_displayCharacter+0xeaa>
	else if (__tmp > 255)
    324c:	69 89       	ldd	r22, Y+17	; 0x11
    324e:	7a 89       	ldd	r23, Y+18	; 0x12
    3250:	8b 89       	ldd	r24, Y+19	; 0x13
    3252:	9c 89       	ldd	r25, Y+20	; 0x14
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	53 e4       	ldi	r21, 0x43	; 67
    325c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3260:	18 16       	cp	r1, r24
    3262:	0c f0       	brlt	.+2      	; 0x3266 <LCD_displayCharacter+0xda2>
    3264:	7b c0       	rjmp	.+246    	; 0x335c <LCD_displayCharacter+0xe98>
	{
		_delay_ms(__us / 1000.0);
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	4a e7       	ldi	r20, 0x7A	; 122
    3274:	54 e4       	ldi	r21, 0x44	; 68
    3276:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	8c 87       	std	Y+12, r24	; 0x0c
    3280:	9d 87       	std	Y+13, r25	; 0x0d
    3282:	ae 87       	std	Y+14, r26	; 0x0e
    3284:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3286:	6c 85       	ldd	r22, Y+12	; 0x0c
    3288:	7d 85       	ldd	r23, Y+13	; 0x0d
    328a:	8e 85       	ldd	r24, Y+14	; 0x0e
    328c:	9f 85       	ldd	r25, Y+15	; 0x0f
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4a ef       	ldi	r20, 0xFA	; 250
    3294:	54 e4       	ldi	r21, 0x44	; 68
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	88 87       	std	Y+8, r24	; 0x08
    32a0:	99 87       	std	Y+9, r25	; 0x09
    32a2:	aa 87       	std	Y+10, r26	; 0x0a
    32a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32a6:	68 85       	ldd	r22, Y+8	; 0x08
    32a8:	79 85       	ldd	r23, Y+9	; 0x09
    32aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <LCD_displayCharacter+0xe04>
		__ticks = 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9f 83       	std	Y+7, r25	; 0x07
    32c4:	8e 83       	std	Y+6, r24	; 0x06
    32c6:	3f c0       	rjmp	.+126    	; 0x3346 <LCD_displayCharacter+0xe82>
	else if (__tmp > 65535)
    32c8:	68 85       	ldd	r22, Y+8	; 0x08
    32ca:	79 85       	ldd	r23, Y+9	; 0x09
    32cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	4f e7       	ldi	r20, 0x7F	; 127
    32d6:	57 e4       	ldi	r21, 0x47	; 71
    32d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32dc:	18 16       	cp	r1, r24
    32de:	4c f5       	brge	.+82     	; 0x3332 <LCD_displayCharacter+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e2       	ldi	r20, 0x20	; 32
    32ee:	51 e4       	ldi	r21, 0x41	; 65
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9f 83       	std	Y+7, r25	; 0x07
    3306:	8e 83       	std	Y+6, r24	; 0x06
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <LCD_displayCharacter+0xe64>
    330a:	88 ec       	ldi	r24, 0xC8	; 200
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	9d 83       	std	Y+5, r25	; 0x05
    3310:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3312:	8c 81       	ldd	r24, Y+4	; 0x04
    3314:	9d 81       	ldd	r25, Y+5	; 0x05
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <LCD_displayCharacter+0xe52>
    331a:	9d 83       	std	Y+5, r25	; 0x05
    331c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331e:	8e 81       	ldd	r24, Y+6	; 0x06
    3320:	9f 81       	ldd	r25, Y+7	; 0x07
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9f 83       	std	Y+7, r25	; 0x07
    3326:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	69 f7       	brne	.-38     	; 0x330a <LCD_displayCharacter+0xe46>
    3330:	24 c0       	rjmp	.+72     	; 0x337a <LCD_displayCharacter+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3332:	68 85       	ldd	r22, Y+8	; 0x08
    3334:	79 85       	ldd	r23, Y+9	; 0x09
    3336:	8a 85       	ldd	r24, Y+10	; 0x0a
    3338:	9b 85       	ldd	r25, Y+11	; 0x0b
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9f 83       	std	Y+7, r25	; 0x07
    3344:	8e 83       	std	Y+6, r24	; 0x06
    3346:	8e 81       	ldd	r24, Y+6	; 0x06
    3348:	9f 81       	ldd	r25, Y+7	; 0x07
    334a:	9b 83       	std	Y+3, r25	; 0x03
    334c:	8a 83       	std	Y+2, r24	; 0x02
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	9b 81       	ldd	r25, Y+3	; 0x03
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LCD_displayCharacter+0xe8e>
    3356:	9b 83       	std	Y+3, r25	; 0x03
    3358:	8a 83       	std	Y+2, r24	; 0x02
    335a:	0f c0       	rjmp	.+30     	; 0x337a <LCD_displayCharacter+0xeb6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    335c:	69 89       	ldd	r22, Y+17	; 0x11
    335e:	7a 89       	ldd	r23, Y+18	; 0x12
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	88 8b       	std	Y+16, r24	; 0x10
    336e:	88 89       	ldd	r24, Y+16	; 0x10
    3370:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	8a 95       	dec	r24
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_displayCharacter+0xeb0>
    3378:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_us(600); /* delay for processing Th = 13ns */
#endif
}
    337a:	c7 55       	subi	r28, 0x57	; 87
    337c:	df 4f       	sbci	r29, 0xFF	; 255
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	08 95       	ret

00003392 <LCD_displayString>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_displayString(const uint8 *Str)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <LCD_displayString+0x6>
    3398:	0f 92       	push	r0
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	9b 83       	std	Y+3, r25	; 0x03
    33a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33a2:	19 82       	std	Y+1, r1	; 0x01
    33a4:	0e c0       	rjmp	.+28     	; 0x33c2 <LCD_displayString+0x30>
	/*use loop to send string byte by byte to display on LCD*/
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	28 2f       	mov	r18, r24
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	9b 81       	ldd	r25, Y+3	; 0x03
    33b0:	fc 01       	movw	r30, r24
    33b2:	e2 0f       	add	r30, r18
    33b4:	f3 1f       	adc	r31, r19
    33b6:	80 81       	ld	r24, Z
    33b8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <LCD_displayCharacter>
		i++;
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	8f 5f       	subi	r24, 0xFF	; 255
    33c0:	89 83       	std	Y+1, r24	; 0x01
 *******************************************************************************/
void LCD_displayString(const uint8 *Str)
{
	uint8 i = 0;
	/*use loop to send string byte by byte to display on LCD*/
	while(Str[i] != '\0')
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	fc 01       	movw	r30, r24
    33ce:	e2 0f       	add	r30, r18
    33d0:	f3 1f       	adc	r31, r19
    33d2:	80 81       	ld	r24, Z
    33d4:	88 23       	and	r24, r24
    33d6:	39 f7       	brne	.-50     	; 0x33a6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	08 95       	ret

000033e4 <LCD_goToRowColumn>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	00 d0       	rcall	.+0      	; 0x33ea <LCD_goToRowColumn+0x6>
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <LCD_goToRowColumn+0x8>
    33ec:	0f 92       	push	r0
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	8a 83       	std	Y+2, r24	; 0x02
    33f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	28 2f       	mov	r18, r24
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	3d 83       	std	Y+5, r19	; 0x05
    33fe:	2c 83       	std	Y+4, r18	; 0x04
    3400:	8c 81       	ldd	r24, Y+4	; 0x04
    3402:	9d 81       	ldd	r25, Y+5	; 0x05
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	91 05       	cpc	r25, r1
    3408:	c1 f0       	breq	.+48     	; 0x343a <LCD_goToRowColumn+0x56>
    340a:	2c 81       	ldd	r18, Y+4	; 0x04
    340c:	3d 81       	ldd	r19, Y+5	; 0x05
    340e:	22 30       	cpi	r18, 0x02	; 2
    3410:	31 05       	cpc	r19, r1
    3412:	2c f4       	brge	.+10     	; 0x341e <LCD_goToRowColumn+0x3a>
    3414:	8c 81       	ldd	r24, Y+4	; 0x04
    3416:	9d 81       	ldd	r25, Y+5	; 0x05
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	61 f0       	breq	.+24     	; 0x3434 <LCD_goToRowColumn+0x50>
    341c:	19 c0       	rjmp	.+50     	; 0x3450 <LCD_goToRowColumn+0x6c>
    341e:	2c 81       	ldd	r18, Y+4	; 0x04
    3420:	3d 81       	ldd	r19, Y+5	; 0x05
    3422:	22 30       	cpi	r18, 0x02	; 2
    3424:	31 05       	cpc	r19, r1
    3426:	69 f0       	breq	.+26     	; 0x3442 <LCD_goToRowColumn+0x5e>
    3428:	8c 81       	ldd	r24, Y+4	; 0x04
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	83 30       	cpi	r24, 0x03	; 3
    342e:	91 05       	cpc	r25, r1
    3430:	61 f0       	breq	.+24     	; 0x344a <LCD_goToRowColumn+0x66>
    3432:	0e c0       	rjmp	.+28     	; 0x3450 <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	0b c0       	rjmp	.+22     	; 0x3450 <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	80 5c       	subi	r24, 0xC0	; 192
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	07 c0       	rjmp	.+14     	; 0x3450 <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	80 5f       	subi	r24, 0xF0	; 240
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	03 c0       	rjmp	.+6      	; 0x3450 <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	80 5b       	subi	r24, 0xB0	; 176
    344e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	80 68       	ori	r24, 0x80	; 128
    3454:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <LCD_displayStringRowColumn>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <LCD_displayStringRowColumn+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <LCD_displayStringRowColumn+0x8>
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	89 83       	std	Y+1, r24	; 0x01
    3476:	6a 83       	std	Y+2, r22	; 0x02
    3478:	5c 83       	std	Y+4, r21	; 0x04
    347a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	6a 81       	ldd	r22, Y+2	; 0x02
    3480:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	9c 81       	ldd	r25, Y+4	; 0x04
    3488:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayString>
}
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <LCD_clearScreen>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_clearScreen(void)
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <LCD_Task>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void LCD_Task(void)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	c8 51       	subi	r28, 0x18	; 24
    34b8:	d1 40       	sbci	r29, 0x01	; 1
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61

	 /*Variable to check if Yes or No Key is pressed or Not*/
	static uint8 OldProgramSteps=0;

	/*LED on to calculate CPU Load because of this task*/
	DIO_WritePin(DIO_PIN12,HIGH);
    34c4:	8c e0       	ldi	r24, 0x0C	; 12
    34c6:	61 e0       	ldi	r22, 0x01	; 1
    34c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>

	/*messages strings*/
	uint8 Welcome[8] = "Welcome";
    34cc:	9e 01       	movw	r18, r28
    34ce:	2d 5f       	subi	r18, 0xFD	; 253
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	c5 53       	subi	r28, 0x35	; 53
    34d4:	df 4f       	sbci	r29, 0xFF	; 255
    34d6:	39 83       	std	Y+1, r19	; 0x01
    34d8:	28 83       	st	Y, r18
    34da:	cb 5c       	subi	r28, 0xCB	; 203
    34dc:	d0 40       	sbci	r29, 0x00	; 0
    34de:	80 e6       	ldi	r24, 0x60	; 96
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	c3 53       	subi	r28, 0x33	; 51
    34e4:	df 4f       	sbci	r29, 0xFF	; 255
    34e6:	99 83       	std	Y+1, r25	; 0x01
    34e8:	88 83       	st	Y, r24
    34ea:	cd 5c       	subi	r28, 0xCD	; 205
    34ec:	d0 40       	sbci	r29, 0x00	; 0
    34ee:	98 e0       	ldi	r25, 0x08	; 8
    34f0:	c1 53       	subi	r28, 0x31	; 49
    34f2:	df 4f       	sbci	r29, 0xFF	; 255
    34f4:	98 83       	st	Y, r25
    34f6:	cf 5c       	subi	r28, 0xCF	; 207
    34f8:	d0 40       	sbci	r29, 0x00	; 0
    34fa:	c3 53       	subi	r28, 0x33	; 51
    34fc:	df 4f       	sbci	r29, 0xFF	; 255
    34fe:	a8 81       	ld	r26, Y
    3500:	b9 81       	ldd	r27, Y+1	; 0x01
    3502:	cd 5c       	subi	r28, 0xCD	; 205
    3504:	d0 40       	sbci	r29, 0x00	; 0
    3506:	0c 90       	ld	r0, X
    3508:	c3 53       	subi	r28, 0x33	; 51
    350a:	df 4f       	sbci	r29, 0xFF	; 255
    350c:	e8 81       	ld	r30, Y
    350e:	f9 81       	ldd	r31, Y+1	; 0x01
    3510:	cd 5c       	subi	r28, 0xCD	; 205
    3512:	d0 40       	sbci	r29, 0x00	; 0
    3514:	31 96       	adiw	r30, 0x01	; 1
    3516:	c3 53       	subi	r28, 0x33	; 51
    3518:	df 4f       	sbci	r29, 0xFF	; 255
    351a:	f9 83       	std	Y+1, r31	; 0x01
    351c:	e8 83       	st	Y, r30
    351e:	cd 5c       	subi	r28, 0xCD	; 205
    3520:	d0 40       	sbci	r29, 0x00	; 0
    3522:	c5 53       	subi	r28, 0x35	; 53
    3524:	df 4f       	sbci	r29, 0xFF	; 255
    3526:	a8 81       	ld	r26, Y
    3528:	b9 81       	ldd	r27, Y+1	; 0x01
    352a:	cb 5c       	subi	r28, 0xCB	; 203
    352c:	d0 40       	sbci	r29, 0x00	; 0
    352e:	0c 92       	st	X, r0
    3530:	c5 53       	subi	r28, 0x35	; 53
    3532:	df 4f       	sbci	r29, 0xFF	; 255
    3534:	e8 81       	ld	r30, Y
    3536:	f9 81       	ldd	r31, Y+1	; 0x01
    3538:	cb 5c       	subi	r28, 0xCB	; 203
    353a:	d0 40       	sbci	r29, 0x00	; 0
    353c:	31 96       	adiw	r30, 0x01	; 1
    353e:	c5 53       	subi	r28, 0x35	; 53
    3540:	df 4f       	sbci	r29, 0xFF	; 255
    3542:	f9 83       	std	Y+1, r31	; 0x01
    3544:	e8 83       	st	Y, r30
    3546:	cb 5c       	subi	r28, 0xCB	; 203
    3548:	d0 40       	sbci	r29, 0x00	; 0
    354a:	c1 53       	subi	r28, 0x31	; 49
    354c:	df 4f       	sbci	r29, 0xFF	; 255
    354e:	f8 81       	ld	r31, Y
    3550:	cf 5c       	subi	r28, 0xCF	; 207
    3552:	d0 40       	sbci	r29, 0x00	; 0
    3554:	f1 50       	subi	r31, 0x01	; 1
    3556:	c1 53       	subi	r28, 0x31	; 49
    3558:	df 4f       	sbci	r29, 0xFF	; 255
    355a:	f8 83       	st	Y, r31
    355c:	cf 5c       	subi	r28, 0xCF	; 207
    355e:	d0 40       	sbci	r29, 0x00	; 0
    3560:	c1 53       	subi	r28, 0x31	; 49
    3562:	df 4f       	sbci	r29, 0xFF	; 255
    3564:	28 81       	ld	r18, Y
    3566:	cf 5c       	subi	r28, 0xCF	; 207
    3568:	d0 40       	sbci	r29, 0x00	; 0
    356a:	22 23       	and	r18, r18
    356c:	31 f6       	brne	.-116    	; 0x34fa <LCD_Task+0x4c>
	uint8 Are_You_Ready[15] =  "Are you ready?";
    356e:	ce 01       	movw	r24, r28
    3570:	0b 96       	adiw	r24, 0x0b	; 11
    3572:	c0 53       	subi	r28, 0x30	; 48
    3574:	df 4f       	sbci	r29, 0xFF	; 255
    3576:	99 83       	std	Y+1, r25	; 0x01
    3578:	88 83       	st	Y, r24
    357a:	c0 5d       	subi	r28, 0xD0	; 208
    357c:	d0 40       	sbci	r29, 0x00	; 0
    357e:	a8 e6       	ldi	r26, 0x68	; 104
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	ce 52       	subi	r28, 0x2E	; 46
    3584:	df 4f       	sbci	r29, 0xFF	; 255
    3586:	b9 83       	std	Y+1, r27	; 0x01
    3588:	a8 83       	st	Y, r26
    358a:	c2 5d       	subi	r28, 0xD2	; 210
    358c:	d0 40       	sbci	r29, 0x00	; 0
    358e:	bf e0       	ldi	r27, 0x0F	; 15
    3590:	cc 52       	subi	r28, 0x2C	; 44
    3592:	df 4f       	sbci	r29, 0xFF	; 255
    3594:	b8 83       	st	Y, r27
    3596:	c4 5d       	subi	r28, 0xD4	; 212
    3598:	d0 40       	sbci	r29, 0x00	; 0
    359a:	ce 52       	subi	r28, 0x2E	; 46
    359c:	df 4f       	sbci	r29, 0xFF	; 255
    359e:	e8 81       	ld	r30, Y
    35a0:	f9 81       	ldd	r31, Y+1	; 0x01
    35a2:	c2 5d       	subi	r28, 0xD2	; 210
    35a4:	d0 40       	sbci	r29, 0x00	; 0
    35a6:	00 80       	ld	r0, Z
    35a8:	ce 52       	subi	r28, 0x2E	; 46
    35aa:	df 4f       	sbci	r29, 0xFF	; 255
    35ac:	28 81       	ld	r18, Y
    35ae:	39 81       	ldd	r19, Y+1	; 0x01
    35b0:	c2 5d       	subi	r28, 0xD2	; 210
    35b2:	d0 40       	sbci	r29, 0x00	; 0
    35b4:	2f 5f       	subi	r18, 0xFF	; 255
    35b6:	3f 4f       	sbci	r19, 0xFF	; 255
    35b8:	ce 52       	subi	r28, 0x2E	; 46
    35ba:	df 4f       	sbci	r29, 0xFF	; 255
    35bc:	39 83       	std	Y+1, r19	; 0x01
    35be:	28 83       	st	Y, r18
    35c0:	c2 5d       	subi	r28, 0xD2	; 210
    35c2:	d0 40       	sbci	r29, 0x00	; 0
    35c4:	c0 53       	subi	r28, 0x30	; 48
    35c6:	df 4f       	sbci	r29, 0xFF	; 255
    35c8:	a8 81       	ld	r26, Y
    35ca:	b9 81       	ldd	r27, Y+1	; 0x01
    35cc:	c0 5d       	subi	r28, 0xD0	; 208
    35ce:	d0 40       	sbci	r29, 0x00	; 0
    35d0:	0c 92       	st	X, r0
    35d2:	c0 53       	subi	r28, 0x30	; 48
    35d4:	df 4f       	sbci	r29, 0xFF	; 255
    35d6:	e8 81       	ld	r30, Y
    35d8:	f9 81       	ldd	r31, Y+1	; 0x01
    35da:	c0 5d       	subi	r28, 0xD0	; 208
    35dc:	d0 40       	sbci	r29, 0x00	; 0
    35de:	31 96       	adiw	r30, 0x01	; 1
    35e0:	c0 53       	subi	r28, 0x30	; 48
    35e2:	df 4f       	sbci	r29, 0xFF	; 255
    35e4:	f9 83       	std	Y+1, r31	; 0x01
    35e6:	e8 83       	st	Y, r30
    35e8:	c0 5d       	subi	r28, 0xD0	; 208
    35ea:	d0 40       	sbci	r29, 0x00	; 0
    35ec:	cc 52       	subi	r28, 0x2C	; 44
    35ee:	df 4f       	sbci	r29, 0xFF	; 255
    35f0:	f8 81       	ld	r31, Y
    35f2:	c4 5d       	subi	r28, 0xD4	; 212
    35f4:	d0 40       	sbci	r29, 0x00	; 0
    35f6:	f1 50       	subi	r31, 0x01	; 1
    35f8:	cc 52       	subi	r28, 0x2C	; 44
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	f8 83       	st	Y, r31
    35fe:	c4 5d       	subi	r28, 0xD4	; 212
    3600:	d0 40       	sbci	r29, 0x00	; 0
    3602:	cc 52       	subi	r28, 0x2C	; 44
    3604:	df 4f       	sbci	r29, 0xFF	; 255
    3606:	28 81       	ld	r18, Y
    3608:	c4 5d       	subi	r28, 0xD4	; 212
    360a:	d0 40       	sbci	r29, 0x00	; 0
    360c:	22 23       	and	r18, r18
    360e:	29 f6       	brne	.-118    	; 0x359a <LCD_Task+0xec>
	uint8 Press_1_to_yes[15] = "Press 1 to yes";
    3610:	ce 01       	movw	r24, r28
    3612:	4a 96       	adiw	r24, 0x1a	; 26
    3614:	cb 52       	subi	r28, 0x2B	; 43
    3616:	df 4f       	sbci	r29, 0xFF	; 255
    3618:	99 83       	std	Y+1, r25	; 0x01
    361a:	88 83       	st	Y, r24
    361c:	c5 5d       	subi	r28, 0xD5	; 213
    361e:	d0 40       	sbci	r29, 0x00	; 0
    3620:	a7 e7       	ldi	r26, 0x77	; 119
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	c9 52       	subi	r28, 0x29	; 41
    3626:	df 4f       	sbci	r29, 0xFF	; 255
    3628:	b9 83       	std	Y+1, r27	; 0x01
    362a:	a8 83       	st	Y, r26
    362c:	c7 5d       	subi	r28, 0xD7	; 215
    362e:	d0 40       	sbci	r29, 0x00	; 0
    3630:	bf e0       	ldi	r27, 0x0F	; 15
    3632:	c7 52       	subi	r28, 0x27	; 39
    3634:	df 4f       	sbci	r29, 0xFF	; 255
    3636:	b8 83       	st	Y, r27
    3638:	c9 5d       	subi	r28, 0xD9	; 217
    363a:	d0 40       	sbci	r29, 0x00	; 0
    363c:	c9 52       	subi	r28, 0x29	; 41
    363e:	df 4f       	sbci	r29, 0xFF	; 255
    3640:	e8 81       	ld	r30, Y
    3642:	f9 81       	ldd	r31, Y+1	; 0x01
    3644:	c7 5d       	subi	r28, 0xD7	; 215
    3646:	d0 40       	sbci	r29, 0x00	; 0
    3648:	00 80       	ld	r0, Z
    364a:	c9 52       	subi	r28, 0x29	; 41
    364c:	df 4f       	sbci	r29, 0xFF	; 255
    364e:	28 81       	ld	r18, Y
    3650:	39 81       	ldd	r19, Y+1	; 0x01
    3652:	c7 5d       	subi	r28, 0xD7	; 215
    3654:	d0 40       	sbci	r29, 0x00	; 0
    3656:	2f 5f       	subi	r18, 0xFF	; 255
    3658:	3f 4f       	sbci	r19, 0xFF	; 255
    365a:	c9 52       	subi	r28, 0x29	; 41
    365c:	df 4f       	sbci	r29, 0xFF	; 255
    365e:	39 83       	std	Y+1, r19	; 0x01
    3660:	28 83       	st	Y, r18
    3662:	c7 5d       	subi	r28, 0xD7	; 215
    3664:	d0 40       	sbci	r29, 0x00	; 0
    3666:	cb 52       	subi	r28, 0x2B	; 43
    3668:	df 4f       	sbci	r29, 0xFF	; 255
    366a:	a8 81       	ld	r26, Y
    366c:	b9 81       	ldd	r27, Y+1	; 0x01
    366e:	c5 5d       	subi	r28, 0xD5	; 213
    3670:	d0 40       	sbci	r29, 0x00	; 0
    3672:	0c 92       	st	X, r0
    3674:	cb 52       	subi	r28, 0x2B	; 43
    3676:	df 4f       	sbci	r29, 0xFF	; 255
    3678:	e8 81       	ld	r30, Y
    367a:	f9 81       	ldd	r31, Y+1	; 0x01
    367c:	c5 5d       	subi	r28, 0xD5	; 213
    367e:	d0 40       	sbci	r29, 0x00	; 0
    3680:	31 96       	adiw	r30, 0x01	; 1
    3682:	cb 52       	subi	r28, 0x2B	; 43
    3684:	df 4f       	sbci	r29, 0xFF	; 255
    3686:	f9 83       	std	Y+1, r31	; 0x01
    3688:	e8 83       	st	Y, r30
    368a:	c5 5d       	subi	r28, 0xD5	; 213
    368c:	d0 40       	sbci	r29, 0x00	; 0
    368e:	c7 52       	subi	r28, 0x27	; 39
    3690:	df 4f       	sbci	r29, 0xFF	; 255
    3692:	f8 81       	ld	r31, Y
    3694:	c9 5d       	subi	r28, 0xD9	; 217
    3696:	d0 40       	sbci	r29, 0x00	; 0
    3698:	f1 50       	subi	r31, 0x01	; 1
    369a:	c7 52       	subi	r28, 0x27	; 39
    369c:	df 4f       	sbci	r29, 0xFF	; 255
    369e:	f8 83       	st	Y, r31
    36a0:	c9 5d       	subi	r28, 0xD9	; 217
    36a2:	d0 40       	sbci	r29, 0x00	; 0
    36a4:	c7 52       	subi	r28, 0x27	; 39
    36a6:	df 4f       	sbci	r29, 0xFF	; 255
    36a8:	28 81       	ld	r18, Y
    36aa:	c9 5d       	subi	r28, 0xD9	; 217
    36ac:	d0 40       	sbci	r29, 0x00	; 0
    36ae:	22 23       	and	r18, r18
    36b0:	29 f6       	brne	.-118    	; 0x363c <LCD_Task+0x18e>
	uint8 Press_3_to_no[14] = "Press 3 to no";
    36b2:	ce 01       	movw	r24, r28
    36b4:	89 96       	adiw	r24, 0x29	; 41
    36b6:	c6 52       	subi	r28, 0x26	; 38
    36b8:	df 4f       	sbci	r29, 0xFF	; 255
    36ba:	99 83       	std	Y+1, r25	; 0x01
    36bc:	88 83       	st	Y, r24
    36be:	ca 5d       	subi	r28, 0xDA	; 218
    36c0:	d0 40       	sbci	r29, 0x00	; 0
    36c2:	a6 e8       	ldi	r26, 0x86	; 134
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	c4 52       	subi	r28, 0x24	; 36
    36c8:	df 4f       	sbci	r29, 0xFF	; 255
    36ca:	b9 83       	std	Y+1, r27	; 0x01
    36cc:	a8 83       	st	Y, r26
    36ce:	cc 5d       	subi	r28, 0xDC	; 220
    36d0:	d0 40       	sbci	r29, 0x00	; 0
    36d2:	be e0       	ldi	r27, 0x0E	; 14
    36d4:	c2 52       	subi	r28, 0x22	; 34
    36d6:	df 4f       	sbci	r29, 0xFF	; 255
    36d8:	b8 83       	st	Y, r27
    36da:	ce 5d       	subi	r28, 0xDE	; 222
    36dc:	d0 40       	sbci	r29, 0x00	; 0
    36de:	c4 52       	subi	r28, 0x24	; 36
    36e0:	df 4f       	sbci	r29, 0xFF	; 255
    36e2:	e8 81       	ld	r30, Y
    36e4:	f9 81       	ldd	r31, Y+1	; 0x01
    36e6:	cc 5d       	subi	r28, 0xDC	; 220
    36e8:	d0 40       	sbci	r29, 0x00	; 0
    36ea:	00 80       	ld	r0, Z
    36ec:	c4 52       	subi	r28, 0x24	; 36
    36ee:	df 4f       	sbci	r29, 0xFF	; 255
    36f0:	28 81       	ld	r18, Y
    36f2:	39 81       	ldd	r19, Y+1	; 0x01
    36f4:	cc 5d       	subi	r28, 0xDC	; 220
    36f6:	d0 40       	sbci	r29, 0x00	; 0
    36f8:	2f 5f       	subi	r18, 0xFF	; 255
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	c4 52       	subi	r28, 0x24	; 36
    36fe:	df 4f       	sbci	r29, 0xFF	; 255
    3700:	39 83       	std	Y+1, r19	; 0x01
    3702:	28 83       	st	Y, r18
    3704:	cc 5d       	subi	r28, 0xDC	; 220
    3706:	d0 40       	sbci	r29, 0x00	; 0
    3708:	c6 52       	subi	r28, 0x26	; 38
    370a:	df 4f       	sbci	r29, 0xFF	; 255
    370c:	a8 81       	ld	r26, Y
    370e:	b9 81       	ldd	r27, Y+1	; 0x01
    3710:	ca 5d       	subi	r28, 0xDA	; 218
    3712:	d0 40       	sbci	r29, 0x00	; 0
    3714:	0c 92       	st	X, r0
    3716:	c6 52       	subi	r28, 0x26	; 38
    3718:	df 4f       	sbci	r29, 0xFF	; 255
    371a:	e8 81       	ld	r30, Y
    371c:	f9 81       	ldd	r31, Y+1	; 0x01
    371e:	ca 5d       	subi	r28, 0xDA	; 218
    3720:	d0 40       	sbci	r29, 0x00	; 0
    3722:	31 96       	adiw	r30, 0x01	; 1
    3724:	c6 52       	subi	r28, 0x26	; 38
    3726:	df 4f       	sbci	r29, 0xFF	; 255
    3728:	f9 83       	std	Y+1, r31	; 0x01
    372a:	e8 83       	st	Y, r30
    372c:	ca 5d       	subi	r28, 0xDA	; 218
    372e:	d0 40       	sbci	r29, 0x00	; 0
    3730:	c2 52       	subi	r28, 0x22	; 34
    3732:	df 4f       	sbci	r29, 0xFF	; 255
    3734:	f8 81       	ld	r31, Y
    3736:	ce 5d       	subi	r28, 0xDE	; 222
    3738:	d0 40       	sbci	r29, 0x00	; 0
    373a:	f1 50       	subi	r31, 0x01	; 1
    373c:	c2 52       	subi	r28, 0x22	; 34
    373e:	df 4f       	sbci	r29, 0xFF	; 255
    3740:	f8 83       	st	Y, r31
    3742:	ce 5d       	subi	r28, 0xDE	; 222
    3744:	d0 40       	sbci	r29, 0x00	; 0
    3746:	c2 52       	subi	r28, 0x22	; 34
    3748:	df 4f       	sbci	r29, 0xFF	; 255
    374a:	28 81       	ld	r18, Y
    374c:	ce 5d       	subi	r28, 0xDE	; 222
    374e:	d0 40       	sbci	r29, 0x00	; 0
    3750:	22 23       	and	r18, r18
    3752:	29 f6       	brne	.-118    	; 0x36de <LCD_Task+0x230>
	uint8 Start[6] = "Start";
    3754:	ce 01       	movw	r24, r28
    3756:	c7 96       	adiw	r24, 0x37	; 55
    3758:	c1 52       	subi	r28, 0x21	; 33
    375a:	df 4f       	sbci	r29, 0xFF	; 255
    375c:	99 83       	std	Y+1, r25	; 0x01
    375e:	88 83       	st	Y, r24
    3760:	cf 5d       	subi	r28, 0xDF	; 223
    3762:	d0 40       	sbci	r29, 0x00	; 0
    3764:	a4 e9       	ldi	r26, 0x94	; 148
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	cf 51       	subi	r28, 0x1F	; 31
    376a:	df 4f       	sbci	r29, 0xFF	; 255
    376c:	b9 83       	std	Y+1, r27	; 0x01
    376e:	a8 83       	st	Y, r26
    3770:	c1 5e       	subi	r28, 0xE1	; 225
    3772:	d0 40       	sbci	r29, 0x00	; 0
    3774:	b6 e0       	ldi	r27, 0x06	; 6
    3776:	cd 51       	subi	r28, 0x1D	; 29
    3778:	df 4f       	sbci	r29, 0xFF	; 255
    377a:	b8 83       	st	Y, r27
    377c:	c3 5e       	subi	r28, 0xE3	; 227
    377e:	d0 40       	sbci	r29, 0x00	; 0
    3780:	cf 51       	subi	r28, 0x1F	; 31
    3782:	df 4f       	sbci	r29, 0xFF	; 255
    3784:	e8 81       	ld	r30, Y
    3786:	f9 81       	ldd	r31, Y+1	; 0x01
    3788:	c1 5e       	subi	r28, 0xE1	; 225
    378a:	d0 40       	sbci	r29, 0x00	; 0
    378c:	00 80       	ld	r0, Z
    378e:	cf 51       	subi	r28, 0x1F	; 31
    3790:	df 4f       	sbci	r29, 0xFF	; 255
    3792:	28 81       	ld	r18, Y
    3794:	39 81       	ldd	r19, Y+1	; 0x01
    3796:	c1 5e       	subi	r28, 0xE1	; 225
    3798:	d0 40       	sbci	r29, 0x00	; 0
    379a:	2f 5f       	subi	r18, 0xFF	; 255
    379c:	3f 4f       	sbci	r19, 0xFF	; 255
    379e:	cf 51       	subi	r28, 0x1F	; 31
    37a0:	df 4f       	sbci	r29, 0xFF	; 255
    37a2:	39 83       	std	Y+1, r19	; 0x01
    37a4:	28 83       	st	Y, r18
    37a6:	c1 5e       	subi	r28, 0xE1	; 225
    37a8:	d0 40       	sbci	r29, 0x00	; 0
    37aa:	c1 52       	subi	r28, 0x21	; 33
    37ac:	df 4f       	sbci	r29, 0xFF	; 255
    37ae:	a8 81       	ld	r26, Y
    37b0:	b9 81       	ldd	r27, Y+1	; 0x01
    37b2:	cf 5d       	subi	r28, 0xDF	; 223
    37b4:	d0 40       	sbci	r29, 0x00	; 0
    37b6:	0c 92       	st	X, r0
    37b8:	c1 52       	subi	r28, 0x21	; 33
    37ba:	df 4f       	sbci	r29, 0xFF	; 255
    37bc:	e8 81       	ld	r30, Y
    37be:	f9 81       	ldd	r31, Y+1	; 0x01
    37c0:	cf 5d       	subi	r28, 0xDF	; 223
    37c2:	d0 40       	sbci	r29, 0x00	; 0
    37c4:	31 96       	adiw	r30, 0x01	; 1
    37c6:	c1 52       	subi	r28, 0x21	; 33
    37c8:	df 4f       	sbci	r29, 0xFF	; 255
    37ca:	f9 83       	std	Y+1, r31	; 0x01
    37cc:	e8 83       	st	Y, r30
    37ce:	cf 5d       	subi	r28, 0xDF	; 223
    37d0:	d0 40       	sbci	r29, 0x00	; 0
    37d2:	cd 51       	subi	r28, 0x1D	; 29
    37d4:	df 4f       	sbci	r29, 0xFF	; 255
    37d6:	f8 81       	ld	r31, Y
    37d8:	c3 5e       	subi	r28, 0xE3	; 227
    37da:	d0 40       	sbci	r29, 0x00	; 0
    37dc:	f1 50       	subi	r31, 0x01	; 1
    37de:	cd 51       	subi	r28, 0x1D	; 29
    37e0:	df 4f       	sbci	r29, 0xFF	; 255
    37e2:	f8 83       	st	Y, r31
    37e4:	c3 5e       	subi	r28, 0xE3	; 227
    37e6:	d0 40       	sbci	r29, 0x00	; 0
    37e8:	cd 51       	subi	r28, 0x1D	; 29
    37ea:	df 4f       	sbci	r29, 0xFF	; 255
    37ec:	28 81       	ld	r18, Y
    37ee:	c3 5e       	subi	r28, 0xE3	; 227
    37f0:	d0 40       	sbci	r29, 0x00	; 0
    37f2:	22 23       	and	r18, r18
    37f4:	29 f6       	brne	.-118    	; 0x3780 <LCD_Task+0x2d2>
	uint8 Your_Score_Is[16] = "Your Score Is: ";
    37f6:	ce 01       	movw	r24, r28
    37f8:	cd 96       	adiw	r24, 0x3d	; 61
    37fa:	cc 51       	subi	r28, 0x1C	; 28
    37fc:	df 4f       	sbci	r29, 0xFF	; 255
    37fe:	99 83       	std	Y+1, r25	; 0x01
    3800:	88 83       	st	Y, r24
    3802:	c4 5e       	subi	r28, 0xE4	; 228
    3804:	d0 40       	sbci	r29, 0x00	; 0
    3806:	aa e9       	ldi	r26, 0x9A	; 154
    3808:	b0 e0       	ldi	r27, 0x00	; 0
    380a:	ca 51       	subi	r28, 0x1A	; 26
    380c:	df 4f       	sbci	r29, 0xFF	; 255
    380e:	b9 83       	std	Y+1, r27	; 0x01
    3810:	a8 83       	st	Y, r26
    3812:	c6 5e       	subi	r28, 0xE6	; 230
    3814:	d0 40       	sbci	r29, 0x00	; 0
    3816:	b0 e1       	ldi	r27, 0x10	; 16
    3818:	c8 51       	subi	r28, 0x18	; 24
    381a:	df 4f       	sbci	r29, 0xFF	; 255
    381c:	b8 83       	st	Y, r27
    381e:	c8 5e       	subi	r28, 0xE8	; 232
    3820:	d0 40       	sbci	r29, 0x00	; 0
    3822:	ca 51       	subi	r28, 0x1A	; 26
    3824:	df 4f       	sbci	r29, 0xFF	; 255
    3826:	e8 81       	ld	r30, Y
    3828:	f9 81       	ldd	r31, Y+1	; 0x01
    382a:	c6 5e       	subi	r28, 0xE6	; 230
    382c:	d0 40       	sbci	r29, 0x00	; 0
    382e:	00 80       	ld	r0, Z
    3830:	ca 51       	subi	r28, 0x1A	; 26
    3832:	df 4f       	sbci	r29, 0xFF	; 255
    3834:	28 81       	ld	r18, Y
    3836:	39 81       	ldd	r19, Y+1	; 0x01
    3838:	c6 5e       	subi	r28, 0xE6	; 230
    383a:	d0 40       	sbci	r29, 0x00	; 0
    383c:	2f 5f       	subi	r18, 0xFF	; 255
    383e:	3f 4f       	sbci	r19, 0xFF	; 255
    3840:	ca 51       	subi	r28, 0x1A	; 26
    3842:	df 4f       	sbci	r29, 0xFF	; 255
    3844:	39 83       	std	Y+1, r19	; 0x01
    3846:	28 83       	st	Y, r18
    3848:	c6 5e       	subi	r28, 0xE6	; 230
    384a:	d0 40       	sbci	r29, 0x00	; 0
    384c:	cc 51       	subi	r28, 0x1C	; 28
    384e:	df 4f       	sbci	r29, 0xFF	; 255
    3850:	a8 81       	ld	r26, Y
    3852:	b9 81       	ldd	r27, Y+1	; 0x01
    3854:	c4 5e       	subi	r28, 0xE4	; 228
    3856:	d0 40       	sbci	r29, 0x00	; 0
    3858:	0c 92       	st	X, r0
    385a:	cc 51       	subi	r28, 0x1C	; 28
    385c:	df 4f       	sbci	r29, 0xFF	; 255
    385e:	e8 81       	ld	r30, Y
    3860:	f9 81       	ldd	r31, Y+1	; 0x01
    3862:	c4 5e       	subi	r28, 0xE4	; 228
    3864:	d0 40       	sbci	r29, 0x00	; 0
    3866:	31 96       	adiw	r30, 0x01	; 1
    3868:	cc 51       	subi	r28, 0x1C	; 28
    386a:	df 4f       	sbci	r29, 0xFF	; 255
    386c:	f9 83       	std	Y+1, r31	; 0x01
    386e:	e8 83       	st	Y, r30
    3870:	c4 5e       	subi	r28, 0xE4	; 228
    3872:	d0 40       	sbci	r29, 0x00	; 0
    3874:	c8 51       	subi	r28, 0x18	; 24
    3876:	df 4f       	sbci	r29, 0xFF	; 255
    3878:	f8 81       	ld	r31, Y
    387a:	c8 5e       	subi	r28, 0xE8	; 232
    387c:	d0 40       	sbci	r29, 0x00	; 0
    387e:	f1 50       	subi	r31, 0x01	; 1
    3880:	c8 51       	subi	r28, 0x18	; 24
    3882:	df 4f       	sbci	r29, 0xFF	; 255
    3884:	f8 83       	st	Y, r31
    3886:	c8 5e       	subi	r28, 0xE8	; 232
    3888:	d0 40       	sbci	r29, 0x00	; 0
    388a:	c8 51       	subi	r28, 0x18	; 24
    388c:	df 4f       	sbci	r29, 0xFF	; 255
    388e:	28 81       	ld	r18, Y
    3890:	c8 5e       	subi	r28, 0xE8	; 232
    3892:	d0 40       	sbci	r29, 0x00	; 0
    3894:	22 23       	and	r18, r18
    3896:	29 f6       	brne	.-118    	; 0x3822 <LCD_Task+0x374>
	uint8 Congratulations[17] = " Congratulations ";
    3898:	ce 01       	movw	r24, r28
    389a:	83 5b       	subi	r24, 0xB3	; 179
    389c:	9f 4f       	sbci	r25, 0xFF	; 255
    389e:	c7 51       	subi	r28, 0x17	; 23
    38a0:	df 4f       	sbci	r29, 0xFF	; 255
    38a2:	99 83       	std	Y+1, r25	; 0x01
    38a4:	88 83       	st	Y, r24
    38a6:	c9 5e       	subi	r28, 0xE9	; 233
    38a8:	d0 40       	sbci	r29, 0x00	; 0
    38aa:	8a ea       	ldi	r24, 0xAA	; 170
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	c5 51       	subi	r28, 0x15	; 21
    38b0:	df 4f       	sbci	r29, 0xFF	; 255
    38b2:	99 83       	std	Y+1, r25	; 0x01
    38b4:	88 83       	st	Y, r24
    38b6:	cb 5e       	subi	r28, 0xEB	; 235
    38b8:	d0 40       	sbci	r29, 0x00	; 0
    38ba:	91 e1       	ldi	r25, 0x11	; 17
    38bc:	c3 51       	subi	r28, 0x13	; 19
    38be:	df 4f       	sbci	r29, 0xFF	; 255
    38c0:	98 83       	st	Y, r25
    38c2:	cd 5e       	subi	r28, 0xED	; 237
    38c4:	d0 40       	sbci	r29, 0x00	; 0
    38c6:	c5 51       	subi	r28, 0x15	; 21
    38c8:	df 4f       	sbci	r29, 0xFF	; 255
    38ca:	a8 81       	ld	r26, Y
    38cc:	b9 81       	ldd	r27, Y+1	; 0x01
    38ce:	cb 5e       	subi	r28, 0xEB	; 235
    38d0:	d0 40       	sbci	r29, 0x00	; 0
    38d2:	0c 90       	ld	r0, X
    38d4:	c5 51       	subi	r28, 0x15	; 21
    38d6:	df 4f       	sbci	r29, 0xFF	; 255
    38d8:	e8 81       	ld	r30, Y
    38da:	f9 81       	ldd	r31, Y+1	; 0x01
    38dc:	cb 5e       	subi	r28, 0xEB	; 235
    38de:	d0 40       	sbci	r29, 0x00	; 0
    38e0:	31 96       	adiw	r30, 0x01	; 1
    38e2:	c5 51       	subi	r28, 0x15	; 21
    38e4:	df 4f       	sbci	r29, 0xFF	; 255
    38e6:	f9 83       	std	Y+1, r31	; 0x01
    38e8:	e8 83       	st	Y, r30
    38ea:	cb 5e       	subi	r28, 0xEB	; 235
    38ec:	d0 40       	sbci	r29, 0x00	; 0
    38ee:	c7 51       	subi	r28, 0x17	; 23
    38f0:	df 4f       	sbci	r29, 0xFF	; 255
    38f2:	a8 81       	ld	r26, Y
    38f4:	b9 81       	ldd	r27, Y+1	; 0x01
    38f6:	c9 5e       	subi	r28, 0xE9	; 233
    38f8:	d0 40       	sbci	r29, 0x00	; 0
    38fa:	0c 92       	st	X, r0
    38fc:	c7 51       	subi	r28, 0x17	; 23
    38fe:	df 4f       	sbci	r29, 0xFF	; 255
    3900:	e8 81       	ld	r30, Y
    3902:	f9 81       	ldd	r31, Y+1	; 0x01
    3904:	c9 5e       	subi	r28, 0xE9	; 233
    3906:	d0 40       	sbci	r29, 0x00	; 0
    3908:	31 96       	adiw	r30, 0x01	; 1
    390a:	c7 51       	subi	r28, 0x17	; 23
    390c:	df 4f       	sbci	r29, 0xFF	; 255
    390e:	f9 83       	std	Y+1, r31	; 0x01
    3910:	e8 83       	st	Y, r30
    3912:	c9 5e       	subi	r28, 0xE9	; 233
    3914:	d0 40       	sbci	r29, 0x00	; 0
    3916:	c3 51       	subi	r28, 0x13	; 19
    3918:	df 4f       	sbci	r29, 0xFF	; 255
    391a:	f8 81       	ld	r31, Y
    391c:	cd 5e       	subi	r28, 0xED	; 237
    391e:	d0 40       	sbci	r29, 0x00	; 0
    3920:	f1 50       	subi	r31, 0x01	; 1
    3922:	c3 51       	subi	r28, 0x13	; 19
    3924:	df 4f       	sbci	r29, 0xFF	; 255
    3926:	f8 83       	st	Y, r31
    3928:	cd 5e       	subi	r28, 0xED	; 237
    392a:	d0 40       	sbci	r29, 0x00	; 0
    392c:	c3 51       	subi	r28, 0x13	; 19
    392e:	df 4f       	sbci	r29, 0xFF	; 255
    3930:	28 81       	ld	r18, Y
    3932:	cd 5e       	subi	r28, 0xED	; 237
    3934:	d0 40       	sbci	r29, 0x00	; 0
    3936:	22 23       	and	r18, r18
    3938:	31 f6       	brne	.-116    	; 0x38c6 <LCD_Task+0x418>
	uint8 To_Play_Again[14] = "To Play Again";
    393a:	ce 01       	movw	r24, r28
    393c:	82 5a       	subi	r24, 0xA2	; 162
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	c2 51       	subi	r28, 0x12	; 18
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	99 83       	std	Y+1, r25	; 0x01
    3946:	88 83       	st	Y, r24
    3948:	ce 5e       	subi	r28, 0xEE	; 238
    394a:	d0 40       	sbci	r29, 0x00	; 0
    394c:	8c eb       	ldi	r24, 0xBC	; 188
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	c0 51       	subi	r28, 0x10	; 16
    3952:	df 4f       	sbci	r29, 0xFF	; 255
    3954:	99 83       	std	Y+1, r25	; 0x01
    3956:	88 83       	st	Y, r24
    3958:	c0 5f       	subi	r28, 0xF0	; 240
    395a:	d0 40       	sbci	r29, 0x00	; 0
    395c:	9e e0       	ldi	r25, 0x0E	; 14
    395e:	ce 50       	subi	r28, 0x0E	; 14
    3960:	df 4f       	sbci	r29, 0xFF	; 255
    3962:	98 83       	st	Y, r25
    3964:	c2 5f       	subi	r28, 0xF2	; 242
    3966:	d0 40       	sbci	r29, 0x00	; 0
    3968:	c0 51       	subi	r28, 0x10	; 16
    396a:	df 4f       	sbci	r29, 0xFF	; 255
    396c:	a8 81       	ld	r26, Y
    396e:	b9 81       	ldd	r27, Y+1	; 0x01
    3970:	c0 5f       	subi	r28, 0xF0	; 240
    3972:	d0 40       	sbci	r29, 0x00	; 0
    3974:	0c 90       	ld	r0, X
    3976:	c0 51       	subi	r28, 0x10	; 16
    3978:	df 4f       	sbci	r29, 0xFF	; 255
    397a:	e8 81       	ld	r30, Y
    397c:	f9 81       	ldd	r31, Y+1	; 0x01
    397e:	c0 5f       	subi	r28, 0xF0	; 240
    3980:	d0 40       	sbci	r29, 0x00	; 0
    3982:	31 96       	adiw	r30, 0x01	; 1
    3984:	c0 51       	subi	r28, 0x10	; 16
    3986:	df 4f       	sbci	r29, 0xFF	; 255
    3988:	f9 83       	std	Y+1, r31	; 0x01
    398a:	e8 83       	st	Y, r30
    398c:	c0 5f       	subi	r28, 0xF0	; 240
    398e:	d0 40       	sbci	r29, 0x00	; 0
    3990:	c2 51       	subi	r28, 0x12	; 18
    3992:	df 4f       	sbci	r29, 0xFF	; 255
    3994:	a8 81       	ld	r26, Y
    3996:	b9 81       	ldd	r27, Y+1	; 0x01
    3998:	ce 5e       	subi	r28, 0xEE	; 238
    399a:	d0 40       	sbci	r29, 0x00	; 0
    399c:	0c 92       	st	X, r0
    399e:	c2 51       	subi	r28, 0x12	; 18
    39a0:	df 4f       	sbci	r29, 0xFF	; 255
    39a2:	e8 81       	ld	r30, Y
    39a4:	f9 81       	ldd	r31, Y+1	; 0x01
    39a6:	ce 5e       	subi	r28, 0xEE	; 238
    39a8:	d0 40       	sbci	r29, 0x00	; 0
    39aa:	31 96       	adiw	r30, 0x01	; 1
    39ac:	c2 51       	subi	r28, 0x12	; 18
    39ae:	df 4f       	sbci	r29, 0xFF	; 255
    39b0:	f9 83       	std	Y+1, r31	; 0x01
    39b2:	e8 83       	st	Y, r30
    39b4:	ce 5e       	subi	r28, 0xEE	; 238
    39b6:	d0 40       	sbci	r29, 0x00	; 0
    39b8:	ce 50       	subi	r28, 0x0E	; 14
    39ba:	df 4f       	sbci	r29, 0xFF	; 255
    39bc:	f8 81       	ld	r31, Y
    39be:	c2 5f       	subi	r28, 0xF2	; 242
    39c0:	d0 40       	sbci	r29, 0x00	; 0
    39c2:	f1 50       	subi	r31, 0x01	; 1
    39c4:	ce 50       	subi	r28, 0x0E	; 14
    39c6:	df 4f       	sbci	r29, 0xFF	; 255
    39c8:	f8 83       	st	Y, r31
    39ca:	c2 5f       	subi	r28, 0xF2	; 242
    39cc:	d0 40       	sbci	r29, 0x00	; 0
    39ce:	ce 50       	subi	r28, 0x0E	; 14
    39d0:	df 4f       	sbci	r29, 0xFF	; 255
    39d2:	28 81       	ld	r18, Y
    39d4:	c2 5f       	subi	r28, 0xF2	; 242
    39d6:	d0 40       	sbci	r29, 0x00	; 0
    39d8:	22 23       	and	r18, r18
    39da:	31 f6       	brne	.-116    	; 0x3968 <LCD_Task+0x4ba>
	uint8 Press_On_Reset[15] = "Press On Reset";
    39dc:	ce 01       	movw	r24, r28
    39de:	84 59       	subi	r24, 0x94	; 148
    39e0:	9f 4f       	sbci	r25, 0xFF	; 255
    39e2:	cd 50       	subi	r28, 0x0D	; 13
    39e4:	df 4f       	sbci	r29, 0xFF	; 255
    39e6:	99 83       	std	Y+1, r25	; 0x01
    39e8:	88 83       	st	Y, r24
    39ea:	c3 5f       	subi	r28, 0xF3	; 243
    39ec:	d0 40       	sbci	r29, 0x00	; 0
    39ee:	8a ec       	ldi	r24, 0xCA	; 202
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	cb 50       	subi	r28, 0x0B	; 11
    39f4:	df 4f       	sbci	r29, 0xFF	; 255
    39f6:	99 83       	std	Y+1, r25	; 0x01
    39f8:	88 83       	st	Y, r24
    39fa:	c5 5f       	subi	r28, 0xF5	; 245
    39fc:	d0 40       	sbci	r29, 0x00	; 0
    39fe:	9f e0       	ldi	r25, 0x0F	; 15
    3a00:	c9 50       	subi	r28, 0x09	; 9
    3a02:	df 4f       	sbci	r29, 0xFF	; 255
    3a04:	98 83       	st	Y, r25
    3a06:	c7 5f       	subi	r28, 0xF7	; 247
    3a08:	d0 40       	sbci	r29, 0x00	; 0
    3a0a:	cb 50       	subi	r28, 0x0B	; 11
    3a0c:	df 4f       	sbci	r29, 0xFF	; 255
    3a0e:	a8 81       	ld	r26, Y
    3a10:	b9 81       	ldd	r27, Y+1	; 0x01
    3a12:	c5 5f       	subi	r28, 0xF5	; 245
    3a14:	d0 40       	sbci	r29, 0x00	; 0
    3a16:	0c 90       	ld	r0, X
    3a18:	cb 50       	subi	r28, 0x0B	; 11
    3a1a:	df 4f       	sbci	r29, 0xFF	; 255
    3a1c:	e8 81       	ld	r30, Y
    3a1e:	f9 81       	ldd	r31, Y+1	; 0x01
    3a20:	c5 5f       	subi	r28, 0xF5	; 245
    3a22:	d0 40       	sbci	r29, 0x00	; 0
    3a24:	31 96       	adiw	r30, 0x01	; 1
    3a26:	cb 50       	subi	r28, 0x0B	; 11
    3a28:	df 4f       	sbci	r29, 0xFF	; 255
    3a2a:	f9 83       	std	Y+1, r31	; 0x01
    3a2c:	e8 83       	st	Y, r30
    3a2e:	c5 5f       	subi	r28, 0xF5	; 245
    3a30:	d0 40       	sbci	r29, 0x00	; 0
    3a32:	cd 50       	subi	r28, 0x0D	; 13
    3a34:	df 4f       	sbci	r29, 0xFF	; 255
    3a36:	a8 81       	ld	r26, Y
    3a38:	b9 81       	ldd	r27, Y+1	; 0x01
    3a3a:	c3 5f       	subi	r28, 0xF3	; 243
    3a3c:	d0 40       	sbci	r29, 0x00	; 0
    3a3e:	0c 92       	st	X, r0
    3a40:	cd 50       	subi	r28, 0x0D	; 13
    3a42:	df 4f       	sbci	r29, 0xFF	; 255
    3a44:	e8 81       	ld	r30, Y
    3a46:	f9 81       	ldd	r31, Y+1	; 0x01
    3a48:	c3 5f       	subi	r28, 0xF3	; 243
    3a4a:	d0 40       	sbci	r29, 0x00	; 0
    3a4c:	31 96       	adiw	r30, 0x01	; 1
    3a4e:	cd 50       	subi	r28, 0x0D	; 13
    3a50:	df 4f       	sbci	r29, 0xFF	; 255
    3a52:	f9 83       	std	Y+1, r31	; 0x01
    3a54:	e8 83       	st	Y, r30
    3a56:	c3 5f       	subi	r28, 0xF3	; 243
    3a58:	d0 40       	sbci	r29, 0x00	; 0
    3a5a:	c9 50       	subi	r28, 0x09	; 9
    3a5c:	df 4f       	sbci	r29, 0xFF	; 255
    3a5e:	f8 81       	ld	r31, Y
    3a60:	c7 5f       	subi	r28, 0xF7	; 247
    3a62:	d0 40       	sbci	r29, 0x00	; 0
    3a64:	f1 50       	subi	r31, 0x01	; 1
    3a66:	c9 50       	subi	r28, 0x09	; 9
    3a68:	df 4f       	sbci	r29, 0xFF	; 255
    3a6a:	f8 83       	st	Y, r31
    3a6c:	c7 5f       	subi	r28, 0xF7	; 247
    3a6e:	d0 40       	sbci	r29, 0x00	; 0
    3a70:	c9 50       	subi	r28, 0x09	; 9
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	28 81       	ld	r18, Y
    3a76:	c7 5f       	subi	r28, 0xF7	; 247
    3a78:	d0 40       	sbci	r29, 0x00	; 0
    3a7a:	22 23       	and	r18, r18
    3a7c:	31 f6       	brne	.-116    	; 0x3a0a <LCD_Task+0x55c>

	/*array of strings to App Questions*/
	uint8 Question[][16] = {"Do you love H?","Is 1457 prime?",
			"egg > chicken?","egg < chicken?","Is hamada yel3b?"};
    3a7e:	ce 01       	movw	r24, r28
    3a80:	85 58       	subi	r24, 0x85	; 133
    3a82:	9f 4f       	sbci	r25, 0xFF	; 255
    3a84:	20 e5       	ldi	r18, 0x50	; 80
    3a86:	fc 01       	movw	r30, r24
    3a88:	df 01       	movw	r26, r30
    3a8a:	32 2f       	mov	r19, r18
    3a8c:	1d 92       	st	X+, r1
    3a8e:	3a 95       	dec	r19
    3a90:	e9 f7       	brne	.-6      	; 0x3a8c <LCD_Task+0x5de>
    3a92:	ce 01       	movw	r24, r28
    3a94:	85 58       	subi	r24, 0x85	; 133
    3a96:	9f 4f       	sbci	r25, 0xFF	; 255
    3a98:	c8 50       	subi	r28, 0x08	; 8
    3a9a:	df 4f       	sbci	r29, 0xFF	; 255
    3a9c:	99 83       	std	Y+1, r25	; 0x01
    3a9e:	88 83       	st	Y, r24
    3aa0:	c8 5f       	subi	r28, 0xF8	; 248
    3aa2:	d0 40       	sbci	r29, 0x00	; 0
    3aa4:	c8 50       	subi	r28, 0x08	; 8
    3aa6:	df 4f       	sbci	r29, 0xFF	; 255
    3aa8:	a8 81       	ld	r26, Y
    3aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    3aac:	c8 5f       	subi	r28, 0xF8	; 248
    3aae:	d0 40       	sbci	r29, 0x00	; 0
    3ab0:	c6 50       	subi	r28, 0x06	; 6
    3ab2:	df 4f       	sbci	r29, 0xFF	; 255
    3ab4:	b9 83       	std	Y+1, r27	; 0x01
    3ab6:	a8 83       	st	Y, r26
    3ab8:	ca 5f       	subi	r28, 0xFA	; 250
    3aba:	d0 40       	sbci	r29, 0x00	; 0
    3abc:	e9 ed       	ldi	r30, 0xD9	; 217
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	c4 50       	subi	r28, 0x04	; 4
    3ac2:	df 4f       	sbci	r29, 0xFF	; 255
    3ac4:	f9 83       	std	Y+1, r31	; 0x01
    3ac6:	e8 83       	st	Y, r30
    3ac8:	cc 5f       	subi	r28, 0xFC	; 252
    3aca:	d0 40       	sbci	r29, 0x00	; 0
    3acc:	ff e0       	ldi	r31, 0x0F	; 15
    3ace:	c2 50       	subi	r28, 0x02	; 2
    3ad0:	df 4f       	sbci	r29, 0xFF	; 255
    3ad2:	f8 83       	st	Y, r31
    3ad4:	ce 5f       	subi	r28, 0xFE	; 254
    3ad6:	d0 40       	sbci	r29, 0x00	; 0
    3ad8:	c4 50       	subi	r28, 0x04	; 4
    3ada:	df 4f       	sbci	r29, 0xFF	; 255
    3adc:	a8 81       	ld	r26, Y
    3ade:	b9 81       	ldd	r27, Y+1	; 0x01
    3ae0:	cc 5f       	subi	r28, 0xFC	; 252
    3ae2:	d0 40       	sbci	r29, 0x00	; 0
    3ae4:	0c 90       	ld	r0, X
    3ae6:	c4 50       	subi	r28, 0x04	; 4
    3ae8:	df 4f       	sbci	r29, 0xFF	; 255
    3aea:	e8 81       	ld	r30, Y
    3aec:	f9 81       	ldd	r31, Y+1	; 0x01
    3aee:	cc 5f       	subi	r28, 0xFC	; 252
    3af0:	d0 40       	sbci	r29, 0x00	; 0
    3af2:	31 96       	adiw	r30, 0x01	; 1
    3af4:	c4 50       	subi	r28, 0x04	; 4
    3af6:	df 4f       	sbci	r29, 0xFF	; 255
    3af8:	f9 83       	std	Y+1, r31	; 0x01
    3afa:	e8 83       	st	Y, r30
    3afc:	cc 5f       	subi	r28, 0xFC	; 252
    3afe:	d0 40       	sbci	r29, 0x00	; 0
    3b00:	c6 50       	subi	r28, 0x06	; 6
    3b02:	df 4f       	sbci	r29, 0xFF	; 255
    3b04:	a8 81       	ld	r26, Y
    3b06:	b9 81       	ldd	r27, Y+1	; 0x01
    3b08:	ca 5f       	subi	r28, 0xFA	; 250
    3b0a:	d0 40       	sbci	r29, 0x00	; 0
    3b0c:	0c 92       	st	X, r0
    3b0e:	c6 50       	subi	r28, 0x06	; 6
    3b10:	df 4f       	sbci	r29, 0xFF	; 255
    3b12:	e8 81       	ld	r30, Y
    3b14:	f9 81       	ldd	r31, Y+1	; 0x01
    3b16:	ca 5f       	subi	r28, 0xFA	; 250
    3b18:	d0 40       	sbci	r29, 0x00	; 0
    3b1a:	31 96       	adiw	r30, 0x01	; 1
    3b1c:	c6 50       	subi	r28, 0x06	; 6
    3b1e:	df 4f       	sbci	r29, 0xFF	; 255
    3b20:	f9 83       	std	Y+1, r31	; 0x01
    3b22:	e8 83       	st	Y, r30
    3b24:	ca 5f       	subi	r28, 0xFA	; 250
    3b26:	d0 40       	sbci	r29, 0x00	; 0
    3b28:	c2 50       	subi	r28, 0x02	; 2
    3b2a:	df 4f       	sbci	r29, 0xFF	; 255
    3b2c:	f8 81       	ld	r31, Y
    3b2e:	ce 5f       	subi	r28, 0xFE	; 254
    3b30:	d0 40       	sbci	r29, 0x00	; 0
    3b32:	f1 50       	subi	r31, 0x01	; 1
    3b34:	c2 50       	subi	r28, 0x02	; 2
    3b36:	df 4f       	sbci	r29, 0xFF	; 255
    3b38:	f8 83       	st	Y, r31
    3b3a:	ce 5f       	subi	r28, 0xFE	; 254
    3b3c:	d0 40       	sbci	r29, 0x00	; 0
    3b3e:	c2 50       	subi	r28, 0x02	; 2
    3b40:	df 4f       	sbci	r29, 0xFF	; 255
    3b42:	28 81       	ld	r18, Y
    3b44:	ce 5f       	subi	r28, 0xFE	; 254
    3b46:	d0 40       	sbci	r29, 0x00	; 0
    3b48:	22 23       	and	r18, r18
    3b4a:	31 f6       	brne	.-116    	; 0x3ad8 <LCD_Task+0x62a>
    3b4c:	c8 50       	subi	r28, 0x08	; 8
    3b4e:	df 4f       	sbci	r29, 0xFF	; 255
    3b50:	a8 81       	ld	r26, Y
    3b52:	b9 81       	ldd	r27, Y+1	; 0x01
    3b54:	c8 5f       	subi	r28, 0xF8	; 248
    3b56:	d0 40       	sbci	r29, 0x00	; 0
    3b58:	1f 96       	adiw	r26, 0x0f	; 15
    3b5a:	1c 92       	st	X, r1
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e5 58       	subi	r30, 0x85	; 133
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	c1 50       	subi	r28, 0x01	; 1
    3b64:	df 4f       	sbci	r29, 0xFF	; 255
    3b66:	f9 83       	std	Y+1, r31	; 0x01
    3b68:	e8 83       	st	Y, r30
    3b6a:	cf 5f       	subi	r28, 0xFF	; 255
    3b6c:	d0 40       	sbci	r29, 0x00	; 0
    3b6e:	c1 50       	subi	r28, 0x01	; 1
    3b70:	df 4f       	sbci	r29, 0xFF	; 255
    3b72:	28 81       	ld	r18, Y
    3b74:	39 81       	ldd	r19, Y+1	; 0x01
    3b76:	cf 5f       	subi	r28, 0xFF	; 255
    3b78:	d0 40       	sbci	r29, 0x00	; 0
    3b7a:	20 5f       	subi	r18, 0xF0	; 240
    3b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7e:	cf 5f       	subi	r28, 0xFF	; 255
    3b80:	de 4f       	sbci	r29, 0xFE	; 254
    3b82:	39 83       	std	Y+1, r19	; 0x01
    3b84:	28 83       	st	Y, r18
    3b86:	c1 50       	subi	r28, 0x01	; 1
    3b88:	d1 40       	sbci	r29, 0x01	; 1
    3b8a:	89 ee       	ldi	r24, 0xE9	; 233
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	cd 5f       	subi	r28, 0xFD	; 253
    3b90:	de 4f       	sbci	r29, 0xFE	; 254
    3b92:	99 83       	std	Y+1, r25	; 0x01
    3b94:	88 83       	st	Y, r24
    3b96:	c3 50       	subi	r28, 0x03	; 3
    3b98:	d1 40       	sbci	r29, 0x01	; 1
    3b9a:	9f e0       	ldi	r25, 0x0F	; 15
    3b9c:	cb 5f       	subi	r28, 0xFB	; 251
    3b9e:	de 4f       	sbci	r29, 0xFE	; 254
    3ba0:	98 83       	st	Y, r25
    3ba2:	c5 50       	subi	r28, 0x05	; 5
    3ba4:	d1 40       	sbci	r29, 0x01	; 1
    3ba6:	cd 5f       	subi	r28, 0xFD	; 253
    3ba8:	de 4f       	sbci	r29, 0xFE	; 254
    3baa:	a8 81       	ld	r26, Y
    3bac:	b9 81       	ldd	r27, Y+1	; 0x01
    3bae:	c3 50       	subi	r28, 0x03	; 3
    3bb0:	d1 40       	sbci	r29, 0x01	; 1
    3bb2:	0c 90       	ld	r0, X
    3bb4:	cd 5f       	subi	r28, 0xFD	; 253
    3bb6:	de 4f       	sbci	r29, 0xFE	; 254
    3bb8:	e8 81       	ld	r30, Y
    3bba:	f9 81       	ldd	r31, Y+1	; 0x01
    3bbc:	c3 50       	subi	r28, 0x03	; 3
    3bbe:	d1 40       	sbci	r29, 0x01	; 1
    3bc0:	31 96       	adiw	r30, 0x01	; 1
    3bc2:	cd 5f       	subi	r28, 0xFD	; 253
    3bc4:	de 4f       	sbci	r29, 0xFE	; 254
    3bc6:	f9 83       	std	Y+1, r31	; 0x01
    3bc8:	e8 83       	st	Y, r30
    3bca:	c3 50       	subi	r28, 0x03	; 3
    3bcc:	d1 40       	sbci	r29, 0x01	; 1
    3bce:	cf 5f       	subi	r28, 0xFF	; 255
    3bd0:	de 4f       	sbci	r29, 0xFE	; 254
    3bd2:	a8 81       	ld	r26, Y
    3bd4:	b9 81       	ldd	r27, Y+1	; 0x01
    3bd6:	c1 50       	subi	r28, 0x01	; 1
    3bd8:	d1 40       	sbci	r29, 0x01	; 1
    3bda:	0c 92       	st	X, r0
    3bdc:	cf 5f       	subi	r28, 0xFF	; 255
    3bde:	de 4f       	sbci	r29, 0xFE	; 254
    3be0:	e8 81       	ld	r30, Y
    3be2:	f9 81       	ldd	r31, Y+1	; 0x01
    3be4:	c1 50       	subi	r28, 0x01	; 1
    3be6:	d1 40       	sbci	r29, 0x01	; 1
    3be8:	31 96       	adiw	r30, 0x01	; 1
    3bea:	cf 5f       	subi	r28, 0xFF	; 255
    3bec:	de 4f       	sbci	r29, 0xFE	; 254
    3bee:	f9 83       	std	Y+1, r31	; 0x01
    3bf0:	e8 83       	st	Y, r30
    3bf2:	c1 50       	subi	r28, 0x01	; 1
    3bf4:	d1 40       	sbci	r29, 0x01	; 1
    3bf6:	cb 5f       	subi	r28, 0xFB	; 251
    3bf8:	de 4f       	sbci	r29, 0xFE	; 254
    3bfa:	f8 81       	ld	r31, Y
    3bfc:	c5 50       	subi	r28, 0x05	; 5
    3bfe:	d1 40       	sbci	r29, 0x01	; 1
    3c00:	f1 50       	subi	r31, 0x01	; 1
    3c02:	cb 5f       	subi	r28, 0xFB	; 251
    3c04:	de 4f       	sbci	r29, 0xFE	; 254
    3c06:	f8 83       	st	Y, r31
    3c08:	c5 50       	subi	r28, 0x05	; 5
    3c0a:	d1 40       	sbci	r29, 0x01	; 1
    3c0c:	cb 5f       	subi	r28, 0xFB	; 251
    3c0e:	de 4f       	sbci	r29, 0xFE	; 254
    3c10:	28 81       	ld	r18, Y
    3c12:	c5 50       	subi	r28, 0x05	; 5
    3c14:	d1 40       	sbci	r29, 0x01	; 1
    3c16:	22 23       	and	r18, r18
    3c18:	31 f6       	brne	.-116    	; 0x3ba6 <LCD_Task+0x6f8>
    3c1a:	c1 50       	subi	r28, 0x01	; 1
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	a8 81       	ld	r26, Y
    3c20:	b9 81       	ldd	r27, Y+1	; 0x01
    3c22:	cf 5f       	subi	r28, 0xFF	; 255
    3c24:	d0 40       	sbci	r29, 0x00	; 0
    3c26:	5f 96       	adiw	r26, 0x1f	; 31
    3c28:	1c 92       	st	X, r1
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e5 58       	subi	r30, 0x85	; 133
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	ca 5f       	subi	r28, 0xFA	; 250
    3c32:	de 4f       	sbci	r29, 0xFE	; 254
    3c34:	f9 83       	std	Y+1, r31	; 0x01
    3c36:	e8 83       	st	Y, r30
    3c38:	c6 50       	subi	r28, 0x06	; 6
    3c3a:	d1 40       	sbci	r29, 0x01	; 1
    3c3c:	ca 5f       	subi	r28, 0xFA	; 250
    3c3e:	de 4f       	sbci	r29, 0xFE	; 254
    3c40:	28 81       	ld	r18, Y
    3c42:	39 81       	ldd	r19, Y+1	; 0x01
    3c44:	c6 50       	subi	r28, 0x06	; 6
    3c46:	d1 40       	sbci	r29, 0x01	; 1
    3c48:	20 5e       	subi	r18, 0xE0	; 224
    3c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4c:	c8 5f       	subi	r28, 0xF8	; 248
    3c4e:	de 4f       	sbci	r29, 0xFE	; 254
    3c50:	39 83       	std	Y+1, r19	; 0x01
    3c52:	28 83       	st	Y, r18
    3c54:	c8 50       	subi	r28, 0x08	; 8
    3c56:	d1 40       	sbci	r29, 0x01	; 1
    3c58:	89 ef       	ldi	r24, 0xF9	; 249
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	c6 5f       	subi	r28, 0xF6	; 246
    3c5e:	de 4f       	sbci	r29, 0xFE	; 254
    3c60:	99 83       	std	Y+1, r25	; 0x01
    3c62:	88 83       	st	Y, r24
    3c64:	ca 50       	subi	r28, 0x0A	; 10
    3c66:	d1 40       	sbci	r29, 0x01	; 1
    3c68:	9f e0       	ldi	r25, 0x0F	; 15
    3c6a:	c4 5f       	subi	r28, 0xF4	; 244
    3c6c:	de 4f       	sbci	r29, 0xFE	; 254
    3c6e:	98 83       	st	Y, r25
    3c70:	cc 50       	subi	r28, 0x0C	; 12
    3c72:	d1 40       	sbci	r29, 0x01	; 1
    3c74:	c6 5f       	subi	r28, 0xF6	; 246
    3c76:	de 4f       	sbci	r29, 0xFE	; 254
    3c78:	a8 81       	ld	r26, Y
    3c7a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c7c:	ca 50       	subi	r28, 0x0A	; 10
    3c7e:	d1 40       	sbci	r29, 0x01	; 1
    3c80:	0c 90       	ld	r0, X
    3c82:	c6 5f       	subi	r28, 0xF6	; 246
    3c84:	de 4f       	sbci	r29, 0xFE	; 254
    3c86:	e8 81       	ld	r30, Y
    3c88:	f9 81       	ldd	r31, Y+1	; 0x01
    3c8a:	ca 50       	subi	r28, 0x0A	; 10
    3c8c:	d1 40       	sbci	r29, 0x01	; 1
    3c8e:	31 96       	adiw	r30, 0x01	; 1
    3c90:	c6 5f       	subi	r28, 0xF6	; 246
    3c92:	de 4f       	sbci	r29, 0xFE	; 254
    3c94:	f9 83       	std	Y+1, r31	; 0x01
    3c96:	e8 83       	st	Y, r30
    3c98:	ca 50       	subi	r28, 0x0A	; 10
    3c9a:	d1 40       	sbci	r29, 0x01	; 1
    3c9c:	c8 5f       	subi	r28, 0xF8	; 248
    3c9e:	de 4f       	sbci	r29, 0xFE	; 254
    3ca0:	a8 81       	ld	r26, Y
    3ca2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ca4:	c8 50       	subi	r28, 0x08	; 8
    3ca6:	d1 40       	sbci	r29, 0x01	; 1
    3ca8:	0c 92       	st	X, r0
    3caa:	c8 5f       	subi	r28, 0xF8	; 248
    3cac:	de 4f       	sbci	r29, 0xFE	; 254
    3cae:	e8 81       	ld	r30, Y
    3cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb2:	c8 50       	subi	r28, 0x08	; 8
    3cb4:	d1 40       	sbci	r29, 0x01	; 1
    3cb6:	31 96       	adiw	r30, 0x01	; 1
    3cb8:	c8 5f       	subi	r28, 0xF8	; 248
    3cba:	de 4f       	sbci	r29, 0xFE	; 254
    3cbc:	f9 83       	std	Y+1, r31	; 0x01
    3cbe:	e8 83       	st	Y, r30
    3cc0:	c8 50       	subi	r28, 0x08	; 8
    3cc2:	d1 40       	sbci	r29, 0x01	; 1
    3cc4:	c4 5f       	subi	r28, 0xF4	; 244
    3cc6:	de 4f       	sbci	r29, 0xFE	; 254
    3cc8:	f8 81       	ld	r31, Y
    3cca:	cc 50       	subi	r28, 0x0C	; 12
    3ccc:	d1 40       	sbci	r29, 0x01	; 1
    3cce:	f1 50       	subi	r31, 0x01	; 1
    3cd0:	c4 5f       	subi	r28, 0xF4	; 244
    3cd2:	de 4f       	sbci	r29, 0xFE	; 254
    3cd4:	f8 83       	st	Y, r31
    3cd6:	cc 50       	subi	r28, 0x0C	; 12
    3cd8:	d1 40       	sbci	r29, 0x01	; 1
    3cda:	c4 5f       	subi	r28, 0xF4	; 244
    3cdc:	de 4f       	sbci	r29, 0xFE	; 254
    3cde:	28 81       	ld	r18, Y
    3ce0:	cc 50       	subi	r28, 0x0C	; 12
    3ce2:	d1 40       	sbci	r29, 0x01	; 1
    3ce4:	22 23       	and	r18, r18
    3ce6:	31 f6       	brne	.-116    	; 0x3c74 <LCD_Task+0x7c6>
    3ce8:	ca 5f       	subi	r28, 0xFA	; 250
    3cea:	de 4f       	sbci	r29, 0xFE	; 254
    3cec:	a8 81       	ld	r26, Y
    3cee:	b9 81       	ldd	r27, Y+1	; 0x01
    3cf0:	c6 50       	subi	r28, 0x06	; 6
    3cf2:	d1 40       	sbci	r29, 0x01	; 1
    3cf4:	9f 96       	adiw	r26, 0x2f	; 47
    3cf6:	1c 92       	st	X, r1
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	e5 58       	subi	r30, 0x85	; 133
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	c3 5f       	subi	r28, 0xF3	; 243
    3d00:	de 4f       	sbci	r29, 0xFE	; 254
    3d02:	f9 83       	std	Y+1, r31	; 0x01
    3d04:	e8 83       	st	Y, r30
    3d06:	cd 50       	subi	r28, 0x0D	; 13
    3d08:	d1 40       	sbci	r29, 0x01	; 1
    3d0a:	c3 5f       	subi	r28, 0xF3	; 243
    3d0c:	de 4f       	sbci	r29, 0xFE	; 254
    3d0e:	28 81       	ld	r18, Y
    3d10:	39 81       	ldd	r19, Y+1	; 0x01
    3d12:	cd 50       	subi	r28, 0x0D	; 13
    3d14:	d1 40       	sbci	r29, 0x01	; 1
    3d16:	20 5d       	subi	r18, 0xD0	; 208
    3d18:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1a:	c1 5f       	subi	r28, 0xF1	; 241
    3d1c:	de 4f       	sbci	r29, 0xFE	; 254
    3d1e:	39 83       	std	Y+1, r19	; 0x01
    3d20:	28 83       	st	Y, r18
    3d22:	cf 50       	subi	r28, 0x0F	; 15
    3d24:	d1 40       	sbci	r29, 0x01	; 1
    3d26:	89 e0       	ldi	r24, 0x09	; 9
    3d28:	91 e0       	ldi	r25, 0x01	; 1
    3d2a:	cf 5e       	subi	r28, 0xEF	; 239
    3d2c:	de 4f       	sbci	r29, 0xFE	; 254
    3d2e:	99 83       	std	Y+1, r25	; 0x01
    3d30:	88 83       	st	Y, r24
    3d32:	c1 51       	subi	r28, 0x11	; 17
    3d34:	d1 40       	sbci	r29, 0x01	; 1
    3d36:	9f e0       	ldi	r25, 0x0F	; 15
    3d38:	cd 5e       	subi	r28, 0xED	; 237
    3d3a:	de 4f       	sbci	r29, 0xFE	; 254
    3d3c:	98 83       	st	Y, r25
    3d3e:	c3 51       	subi	r28, 0x13	; 19
    3d40:	d1 40       	sbci	r29, 0x01	; 1
    3d42:	cf 5e       	subi	r28, 0xEF	; 239
    3d44:	de 4f       	sbci	r29, 0xFE	; 254
    3d46:	a8 81       	ld	r26, Y
    3d48:	b9 81       	ldd	r27, Y+1	; 0x01
    3d4a:	c1 51       	subi	r28, 0x11	; 17
    3d4c:	d1 40       	sbci	r29, 0x01	; 1
    3d4e:	0c 90       	ld	r0, X
    3d50:	cf 5e       	subi	r28, 0xEF	; 239
    3d52:	de 4f       	sbci	r29, 0xFE	; 254
    3d54:	e8 81       	ld	r30, Y
    3d56:	f9 81       	ldd	r31, Y+1	; 0x01
    3d58:	c1 51       	subi	r28, 0x11	; 17
    3d5a:	d1 40       	sbci	r29, 0x01	; 1
    3d5c:	31 96       	adiw	r30, 0x01	; 1
    3d5e:	cf 5e       	subi	r28, 0xEF	; 239
    3d60:	de 4f       	sbci	r29, 0xFE	; 254
    3d62:	f9 83       	std	Y+1, r31	; 0x01
    3d64:	e8 83       	st	Y, r30
    3d66:	c1 51       	subi	r28, 0x11	; 17
    3d68:	d1 40       	sbci	r29, 0x01	; 1
    3d6a:	c1 5f       	subi	r28, 0xF1	; 241
    3d6c:	de 4f       	sbci	r29, 0xFE	; 254
    3d6e:	a8 81       	ld	r26, Y
    3d70:	b9 81       	ldd	r27, Y+1	; 0x01
    3d72:	cf 50       	subi	r28, 0x0F	; 15
    3d74:	d1 40       	sbci	r29, 0x01	; 1
    3d76:	0c 92       	st	X, r0
    3d78:	c1 5f       	subi	r28, 0xF1	; 241
    3d7a:	de 4f       	sbci	r29, 0xFE	; 254
    3d7c:	e8 81       	ld	r30, Y
    3d7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d80:	cf 50       	subi	r28, 0x0F	; 15
    3d82:	d1 40       	sbci	r29, 0x01	; 1
    3d84:	31 96       	adiw	r30, 0x01	; 1
    3d86:	c1 5f       	subi	r28, 0xF1	; 241
    3d88:	de 4f       	sbci	r29, 0xFE	; 254
    3d8a:	f9 83       	std	Y+1, r31	; 0x01
    3d8c:	e8 83       	st	Y, r30
    3d8e:	cf 50       	subi	r28, 0x0F	; 15
    3d90:	d1 40       	sbci	r29, 0x01	; 1
    3d92:	cd 5e       	subi	r28, 0xED	; 237
    3d94:	de 4f       	sbci	r29, 0xFE	; 254
    3d96:	f8 81       	ld	r31, Y
    3d98:	c3 51       	subi	r28, 0x13	; 19
    3d9a:	d1 40       	sbci	r29, 0x01	; 1
    3d9c:	f1 50       	subi	r31, 0x01	; 1
    3d9e:	cd 5e       	subi	r28, 0xED	; 237
    3da0:	de 4f       	sbci	r29, 0xFE	; 254
    3da2:	f8 83       	st	Y, r31
    3da4:	c3 51       	subi	r28, 0x13	; 19
    3da6:	d1 40       	sbci	r29, 0x01	; 1
    3da8:	cd 5e       	subi	r28, 0xED	; 237
    3daa:	de 4f       	sbci	r29, 0xFE	; 254
    3dac:	28 81       	ld	r18, Y
    3dae:	c3 51       	subi	r28, 0x13	; 19
    3db0:	d1 40       	sbci	r29, 0x01	; 1
    3db2:	22 23       	and	r18, r18
    3db4:	31 f6       	brne	.-116    	; 0x3d42 <LCD_Task+0x894>
    3db6:	c3 5f       	subi	r28, 0xF3	; 243
    3db8:	de 4f       	sbci	r29, 0xFE	; 254
    3dba:	a8 81       	ld	r26, Y
    3dbc:	b9 81       	ldd	r27, Y+1	; 0x01
    3dbe:	cd 50       	subi	r28, 0x0D	; 13
    3dc0:	d1 40       	sbci	r29, 0x01	; 1
    3dc2:	df 96       	adiw	r26, 0x3f	; 63
    3dc4:	1c 92       	st	X, r1
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	85 58       	subi	r24, 0x85	; 133
    3dca:	9f 4f       	sbci	r25, 0xFF	; 255
    3dcc:	fc 01       	movw	r30, r24
    3dce:	e0 5c       	subi	r30, 0xC0	; 192
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	cc 5e       	subi	r28, 0xEC	; 236
    3dd4:	de 4f       	sbci	r29, 0xFE	; 254
    3dd6:	f9 83       	std	Y+1, r31	; 0x01
    3dd8:	e8 83       	st	Y, r30
    3dda:	c4 51       	subi	r28, 0x14	; 20
    3ddc:	d1 40       	sbci	r29, 0x01	; 1
    3dde:	29 e1       	ldi	r18, 0x19	; 25
    3de0:	31 e0       	ldi	r19, 0x01	; 1
    3de2:	ca 5e       	subi	r28, 0xEA	; 234
    3de4:	de 4f       	sbci	r29, 0xFE	; 254
    3de6:	39 83       	std	Y+1, r19	; 0x01
    3de8:	28 83       	st	Y, r18
    3dea:	c6 51       	subi	r28, 0x16	; 22
    3dec:	d1 40       	sbci	r29, 0x01	; 1
    3dee:	30 e1       	ldi	r19, 0x10	; 16
    3df0:	c8 5e       	subi	r28, 0xE8	; 232
    3df2:	de 4f       	sbci	r29, 0xFE	; 254
    3df4:	38 83       	st	Y, r19
    3df6:	c8 51       	subi	r28, 0x18	; 24
    3df8:	d1 40       	sbci	r29, 0x01	; 1
    3dfa:	ca 5e       	subi	r28, 0xEA	; 234
    3dfc:	de 4f       	sbci	r29, 0xFE	; 254
    3dfe:	a8 81       	ld	r26, Y
    3e00:	b9 81       	ldd	r27, Y+1	; 0x01
    3e02:	c6 51       	subi	r28, 0x16	; 22
    3e04:	d1 40       	sbci	r29, 0x01	; 1
    3e06:	0c 90       	ld	r0, X
    3e08:	ca 5e       	subi	r28, 0xEA	; 234
    3e0a:	de 4f       	sbci	r29, 0xFE	; 254
    3e0c:	e8 81       	ld	r30, Y
    3e0e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e10:	c6 51       	subi	r28, 0x16	; 22
    3e12:	d1 40       	sbci	r29, 0x01	; 1
    3e14:	31 96       	adiw	r30, 0x01	; 1
    3e16:	ca 5e       	subi	r28, 0xEA	; 234
    3e18:	de 4f       	sbci	r29, 0xFE	; 254
    3e1a:	f9 83       	std	Y+1, r31	; 0x01
    3e1c:	e8 83       	st	Y, r30
    3e1e:	c6 51       	subi	r28, 0x16	; 22
    3e20:	d1 40       	sbci	r29, 0x01	; 1
    3e22:	cc 5e       	subi	r28, 0xEC	; 236
    3e24:	de 4f       	sbci	r29, 0xFE	; 254
    3e26:	a8 81       	ld	r26, Y
    3e28:	b9 81       	ldd	r27, Y+1	; 0x01
    3e2a:	c4 51       	subi	r28, 0x14	; 20
    3e2c:	d1 40       	sbci	r29, 0x01	; 1
    3e2e:	0c 92       	st	X, r0
    3e30:	cc 5e       	subi	r28, 0xEC	; 236
    3e32:	de 4f       	sbci	r29, 0xFE	; 254
    3e34:	e8 81       	ld	r30, Y
    3e36:	f9 81       	ldd	r31, Y+1	; 0x01
    3e38:	c4 51       	subi	r28, 0x14	; 20
    3e3a:	d1 40       	sbci	r29, 0x01	; 1
    3e3c:	31 96       	adiw	r30, 0x01	; 1
    3e3e:	cc 5e       	subi	r28, 0xEC	; 236
    3e40:	de 4f       	sbci	r29, 0xFE	; 254
    3e42:	f9 83       	std	Y+1, r31	; 0x01
    3e44:	e8 83       	st	Y, r30
    3e46:	c4 51       	subi	r28, 0x14	; 20
    3e48:	d1 40       	sbci	r29, 0x01	; 1
    3e4a:	c8 5e       	subi	r28, 0xE8	; 232
    3e4c:	de 4f       	sbci	r29, 0xFE	; 254
    3e4e:	f8 81       	ld	r31, Y
    3e50:	c8 51       	subi	r28, 0x18	; 24
    3e52:	d1 40       	sbci	r29, 0x01	; 1
    3e54:	f1 50       	subi	r31, 0x01	; 1
    3e56:	c8 5e       	subi	r28, 0xE8	; 232
    3e58:	de 4f       	sbci	r29, 0xFE	; 254
    3e5a:	f8 83       	st	Y, r31
    3e5c:	c8 51       	subi	r28, 0x18	; 24
    3e5e:	d1 40       	sbci	r29, 0x01	; 1
    3e60:	c8 5e       	subi	r28, 0xE8	; 232
    3e62:	de 4f       	sbci	r29, 0xFE	; 254
    3e64:	28 81       	ld	r18, Y
    3e66:	c8 51       	subi	r28, 0x18	; 24
    3e68:	d1 40       	sbci	r29, 0x01	; 1
    3e6a:	22 23       	and	r18, r18
    3e6c:	31 f6       	brne	.-116    	; 0x3dfa <LCD_Task+0x94c>

	/*determine when display specific string on LCD*/
	if(once<5)
    3e6e:	80 91 40 01 	lds	r24, 0x0140
    3e72:	85 30       	cpi	r24, 0x05	; 5
    3e74:	70 f4       	brcc	.+28     	; 0x3e92 <LCD_Task+0x9e4>
	{
		LCD_displayStringRowColumn(0,4,Welcome);				/*select position of displaying string*/
    3e76:	9e 01       	movw	r18, r28
    3e78:	2d 5f       	subi	r18, 0xFD	; 253
    3e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	64 e0       	ldi	r22, 0x04	; 4
    3e80:	a9 01       	movw	r20, r18
    3e82:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		once++;													/*Increase counter*/
    3e86:	80 91 40 01 	lds	r24, 0x0140
    3e8a:	8f 5f       	subi	r24, 0xFF	; 255
    3e8c:	80 93 40 01 	sts	0x0140, r24
    3e90:	ea c0       	rjmp	.+468    	; 0x4066 <LCD_Task+0xbb8>
	}
	else if (once<10)
    3e92:	80 91 40 01 	lds	r24, 0x0140
    3e96:	8a 30       	cpi	r24, 0x0A	; 10
    3e98:	70 f4       	brcc	.+28     	; 0x3eb6 <LCD_Task+0xa08>
	{
		LCD_displayStringRowColumn(1,1,Are_You_Ready);			/*select position of displaying string*/
    3e9a:	9e 01       	movw	r18, r28
    3e9c:	25 5f       	subi	r18, 0xF5	; 245
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	61 e0       	ldi	r22, 0x01	; 1
    3ea4:	a9 01       	movw	r20, r18
    3ea6:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		once++;													/*Increase counter*/
    3eaa:	80 91 40 01 	lds	r24, 0x0140
    3eae:	8f 5f       	subi	r24, 0xFF	; 255
    3eb0:	80 93 40 01 	sts	0x0140, r24
    3eb4:	d8 c0       	rjmp	.+432    	; 0x4066 <LCD_Task+0xbb8>
	}
	else if(once==10)
    3eb6:	80 91 40 01 	lds	r24, 0x0140
    3eba:	8a 30       	cpi	r24, 0x0A	; 10
    3ebc:	41 f4       	brne	.+16     	; 0x3ece <LCD_Task+0xa20>
	{
		LCD_clearScreen();										/*Clear LCD*/
    3ebe:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
		once++;													/*Increase counter*/
    3ec2:	80 91 40 01 	lds	r24, 0x0140
    3ec6:	8f 5f       	subi	r24, 0xFF	; 255
    3ec8:	80 93 40 01 	sts	0x0140, r24
    3ecc:	cc c0       	rjmp	.+408    	; 0x4066 <LCD_Task+0xbb8>
	}
	else if(once<15)
    3ece:	80 91 40 01 	lds	r24, 0x0140
    3ed2:	8f 30       	cpi	r24, 0x0F	; 15
    3ed4:	b0 f4       	brcc	.+44     	; 0x3f02 <LCD_Task+0xa54>
	{
		LCD_displayStringRowColumn(0,1,Press_1_to_yes);			/*select position of displaying string */								/*Increase counter*/
    3ed6:	9e 01       	movw	r18, r28
    3ed8:	26 5e       	subi	r18, 0xE6	; 230
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	61 e0       	ldi	r22, 0x01	; 1
    3ee0:	a9 01       	movw	r20, r18
    3ee2:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,1,Press_3_to_no);			/*select position of displaying string */
    3ee6:	9e 01       	movw	r18, r28
    3ee8:	27 5d       	subi	r18, 0xD7	; 215
    3eea:	3f 4f       	sbci	r19, 0xFF	; 255
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	61 e0       	ldi	r22, 0x01	; 1
    3ef0:	a9 01       	movw	r20, r18
    3ef2:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		once++;													/*Increase counter*/
    3ef6:	80 91 40 01 	lds	r24, 0x0140
    3efa:	8f 5f       	subi	r24, 0xFF	; 255
    3efc:	80 93 40 01 	sts	0x0140, r24
    3f00:	b2 c0       	rjmp	.+356    	; 0x4066 <LCD_Task+0xbb8>
	}
	else if(once==15)
    3f02:	80 91 40 01 	lds	r24, 0x0140
    3f06:	8f 30       	cpi	r24, 0x0F	; 15
    3f08:	41 f4       	brne	.+16     	; 0x3f1a <LCD_Task+0xa6c>
	{
		LCD_clearScreen();										/*Clear LCD*/
    3f0a:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
		once++;													/*Increase counter*/
    3f0e:	80 91 40 01 	lds	r24, 0x0140
    3f12:	8f 5f       	subi	r24, 0xFF	; 255
    3f14:	80 93 40 01 	sts	0x0140, r24
    3f18:	a6 c0       	rjmp	.+332    	; 0x4066 <LCD_Task+0xbb8>
	}
	else if(once<20)
    3f1a:	80 91 40 01 	lds	r24, 0x0140
    3f1e:	84 31       	cpi	r24, 0x14	; 20
    3f20:	70 f4       	brcc	.+28     	; 0x3f3e <LCD_Task+0xa90>
	{
		LCD_displayStringRowColumn(0,5,Start);					/*select position of displaying string*/
    3f22:	9e 01       	movw	r18, r28
    3f24:	29 5c       	subi	r18, 0xC9	; 201
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	65 e0       	ldi	r22, 0x05	; 5
    3f2c:	a9 01       	movw	r20, r18
    3f2e:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		once++;													/*Increase counter*/
    3f32:	80 91 40 01 	lds	r24, 0x0140
    3f36:	8f 5f       	subi	r24, 0xFF	; 255
    3f38:	80 93 40 01 	sts	0x0140, r24
    3f3c:	94 c0       	rjmp	.+296    	; 0x4066 <LCD_Task+0xbb8>
	}
	else if(once==20||once==21)
    3f3e:	80 91 40 01 	lds	r24, 0x0140
    3f42:	84 31       	cpi	r24, 0x14	; 20
    3f44:	29 f0       	breq	.+10     	; 0x3f50 <LCD_Task+0xaa2>
    3f46:	80 91 40 01 	lds	r24, 0x0140
    3f4a:	85 31       	cpi	r24, 0x15	; 21
    3f4c:	09 f0       	breq	.+2      	; 0x3f50 <LCD_Task+0xaa2>
    3f4e:	66 c0       	rjmp	.+204    	; 0x401c <LCD_Task+0xb6e>
	{
		if(once==20)
    3f50:	80 91 40 01 	lds	r24, 0x0140
    3f54:	84 31       	cpi	r24, 0x14	; 20
    3f56:	c9 f4       	brne	.+50     	; 0x3f8a <LCD_Task+0xadc>
		{
			LCD_clearScreen();									/*Clear LCD*/
    3f58:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_displayString(Question[ProgramSteps]);			/*display question string*/
    3f5c:	9e 01       	movw	r18, r28
    3f5e:	25 58       	subi	r18, 0x85	; 133
    3f60:	3f 4f       	sbci	r19, 0xFF	; 255
    3f62:	80 91 3a 01 	lds	r24, 0x013A
    3f66:	88 2f       	mov	r24, r24
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	82 95       	swap	r24
    3f6c:	92 95       	swap	r25
    3f6e:	90 7f       	andi	r25, 0xF0	; 240
    3f70:	98 27       	eor	r25, r24
    3f72:	80 7f       	andi	r24, 0xF0	; 240
    3f74:	98 27       	eor	r25, r24
    3f76:	82 0f       	add	r24, r18
    3f78:	93 1f       	adc	r25, r19
    3f7a:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayString>
			once++;												/*Increase counter*/
    3f7e:	80 91 40 01 	lds	r24, 0x0140
    3f82:	8f 5f       	subi	r24, 0xFF	; 255
    3f84:	80 93 40 01 	sts	0x0140, r24
    3f88:	6e c0       	rjmp	.+220    	; 0x4066 <LCD_Task+0xbb8>
		}
		else if(once==21)
    3f8a:	80 91 40 01 	lds	r24, 0x0140
    3f8e:	85 31       	cpi	r24, 0x15	; 21
    3f90:	09 f0       	breq	.+2      	; 0x3f94 <LCD_Task+0xae6>
    3f92:	69 c0       	rjmp	.+210    	; 0x4066 <LCD_Task+0xbb8>
		{
			uint8 *temp =Question[ProgramSteps];				/*temp to get question string to display it*/
    3f94:	9e 01       	movw	r18, r28
    3f96:	25 58       	subi	r18, 0x85	; 133
    3f98:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9a:	80 91 3a 01 	lds	r24, 0x013A
    3f9e:	88 2f       	mov	r24, r24
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	82 95       	swap	r24
    3fa4:	92 95       	swap	r25
    3fa6:	90 7f       	andi	r25, 0xF0	; 240
    3fa8:	98 27       	eor	r25, r24
    3faa:	80 7f       	andi	r24, 0xF0	; 240
    3fac:	98 27       	eor	r25, r24
    3fae:	82 0f       	add	r24, r18
    3fb0:	93 1f       	adc	r25, r19
    3fb2:	9a 83       	std	Y+2, r25	; 0x02
    3fb4:	89 83       	std	Y+1, r24	; 0x01
			if(OldProgramSteps!=ProgramSteps)
    3fb6:	90 91 3f 01 	lds	r25, 0x013F
    3fba:	80 91 3a 01 	lds	r24, 0x013A
    3fbe:	98 17       	cp	r25, r24
    3fc0:	31 f0       	breq	.+12     	; 0x3fce <LCD_Task+0xb20>
			{

				LCD_clearScreen();								/*Clear LCD*/
    3fc2:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
				LCD_displayString(temp);						/*display question string*/
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_displayString>
			}
			if(ProgramSteps == 5)
    3fce:	80 91 3a 01 	lds	r24, 0x013A
    3fd2:	85 30       	cpi	r24, 0x05	; 5
    3fd4:	f1 f4       	brne	.+60     	; 0x4012 <LCD_Task+0xb64>
			{
				LCD_clearScreen();								/*Clear LCD*/
    3fd6:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,Your_Score_Is);	/*display Score string*/
    3fda:	9e 01       	movw	r18, r28
    3fdc:	23 5c       	subi	r18, 0xC3	; 195
    3fde:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	a9 01       	movw	r20, r18
    3fe6:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
				LCD_displayCharacter(Score+48);					/*display Value*/
    3fea:	80 91 3b 01 	lds	r24, 0x013B
    3fee:	80 5d       	subi	r24, 0xD0	; 208
    3ff0:	0e 94 62 12 	call	0x24c4	; 0x24c4 <LCD_displayCharacter>
				LCD_displayStringRowColumn(1,0,Congratulations);/*display Congratulation string*/
    3ff4:	9e 01       	movw	r18, r28
    3ff6:	23 5b       	subi	r18, 0xB3	; 179
    3ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	60 e0       	ldi	r22, 0x00	; 0
    3ffe:	a9 01       	movw	r20, r18
    4000:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
				ProgramSteps=0;									/*return question counter to zero value*/
    4004:	10 92 3a 01 	sts	0x013A, r1
				once++;											/*Increase counter*/
    4008:	80 91 40 01 	lds	r24, 0x0140
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	80 93 40 01 	sts	0x0140, r24
			}
			OldProgramSteps=ProgramSteps;
    4012:	80 91 3a 01 	lds	r24, 0x013A
    4016:	80 93 3f 01 	sts	0x013F, r24
    401a:	25 c0       	rjmp	.+74     	; 0x4066 <LCD_Task+0xbb8>
		}
	}
	else if(once<30)
    401c:	80 91 40 01 	lds	r24, 0x0140
    4020:	8e 31       	cpi	r24, 0x1E	; 30
    4022:	30 f4       	brcc	.+12     	; 0x4030 <LCD_Task+0xb82>
	{
		once++;													/*Increase counter*/
    4024:	80 91 40 01 	lds	r24, 0x0140
    4028:	8f 5f       	subi	r24, 0xFF	; 255
    402a:	80 93 40 01 	sts	0x0140, r24
    402e:	1b c0       	rjmp	.+54     	; 0x4066 <LCD_Task+0xbb8>
	}
	else if(once==30)
    4030:	80 91 40 01 	lds	r24, 0x0140
    4034:	8e 31       	cpi	r24, 0x1E	; 30
    4036:	b9 f4       	brne	.+46     	; 0x4066 <LCD_Task+0xbb8>
	{
		LCD_clearScreen();										/*Clear LCD*/
    4038:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,To_Play_Again);			/*display string*/
    403c:	9e 01       	movw	r18, r28
    403e:	22 5a       	subi	r18, 0xA2	; 162
    4040:	3f 4f       	sbci	r19, 0xFF	; 255
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	a9 01       	movw	r20, r18
    4048:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,Press_On_Reset);			/*display string*/
    404c:	9e 01       	movw	r18, r28
    404e:	24 59       	subi	r18, 0x94	; 148
    4050:	3f 4f       	sbci	r19, 0xFF	; 255
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	a9 01       	movw	r20, r18
    4058:	0e 94 34 1a 	call	0x3468	; 0x3468 <LCD_displayStringRowColumn>
		once++;													/*Increase counter*/
    405c:	80 91 40 01 	lds	r24, 0x0140
    4060:	8f 5f       	subi	r24, 0xFF	; 255
    4062:	80 93 40 01 	sts	0x0140, r24
	}
	/*LED off to calculate CPU Load because of this task*/
	DIO_WritePin(DIO_PIN12,LOW);
    4066:	8c e0       	ldi	r24, 0x0C	; 12
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
}
    406e:	c8 5e       	subi	r28, 0xE8	; 232
    4070:	de 4f       	sbci	r29, 0xFE	; 254
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	f8 94       	cli
    4076:	de bf       	out	0x3e, r29	; 62
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	cd bf       	out	0x3d, r28	; 61
    407c:	cf 91       	pop	r28
    407e:	df 91       	pop	r29
    4080:	08 95       	ret

00004082 <main>:
#include "keypad.h"
#include "scheduler.h"


int main(void)
{
    4082:	df 93       	push	r29
    4084:	cf 93       	push	r28
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
	/*To calculate CPU Load*/
	DIO_SetPinDirection(DIO_PIN12,OUTPUT);
    408a:	8c e0       	ldi	r24, 0x0C	; 12
    408c:	61 e0       	ldi	r22, 0x01	; 1
    408e:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN13,OUTPUT);
    4092:	8d e0       	ldi	r24, 0x0D	; 13
    4094:	61 e0       	ldi	r22, 0x01	; 1
    4096:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN14,OUTPUT);
    409a:	8e e0       	ldi	r24, 0x0E	; 14
    409c:	61 e0       	ldi	r22, 0x01	; 1
    409e:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	/*Initialize OS */
	SOS_Init();
    40a2:	0e 94 06 21 	call	0x420c	; 0x420c <SOS_Init>
	/*Initialize KeyPad */
	KeyPad_Init();
    40a6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KeyPad_Init>
	/*Initialize LCD */
	LCD_init();
    40aa:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_init>
	/*OS Tasks*/
	SOS_CreateTask(PRIORITY_1,200,Key_PressedTask);
    40ae:	2d eb       	ldi	r18, 0xBD	; 189
    40b0:	3a e0       	ldi	r19, 0x0A	; 10
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	68 ec       	ldi	r22, 0xC8	; 200
    40b6:	70 e0       	ldi	r23, 0x00	; 0
    40b8:	a9 01       	movw	r20, r18
    40ba:	0e 94 47 21 	call	0x428e	; 0x428e <SOS_CreateTask>
	SOS_CreateTask(PRIORITY_0,200,LCD_Task);
    40be:	27 e5       	ldi	r18, 0x57	; 87
    40c0:	3a e1       	ldi	r19, 0x1A	; 26
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	68 ec       	ldi	r22, 0xC8	; 200
    40c6:	70 e0       	ldi	r23, 0x00	; 0
    40c8:	a9 01       	movw	r20, r18
    40ca:	0e 94 47 21 	call	0x428e	; 0x428e <SOS_CreateTask>
	/*Enable Global Interrupt*/
	SET_BIT(SREG,I);
    40ce:	af e5       	ldi	r26, 0x5F	; 95
    40d0:	b0 e0       	ldi	r27, 0x00	; 0
    40d2:	ef e5       	ldi	r30, 0x5F	; 95
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	80 81       	ld	r24, Z
    40d8:	80 68       	ori	r24, 0x80	; 128
    40da:	8c 93       	st	X, r24
	/*Run OS Scheduler*/
	SOS_Run();
    40dc:	0e 94 a3 21 	call	0x4346	; 0x4346 <SOS_Run>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0


}
    40e4:	cf 91       	pop	r28
    40e6:	df 91       	pop	r29
    40e8:	08 95       	ret

000040ea <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    40ea:	1f 92       	push	r1
    40ec:	0f 92       	push	r0
    40ee:	0f b6       	in	r0, 0x3f	; 63
    40f0:	0f 92       	push	r0
    40f2:	11 24       	eor	r1, r1
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	2f 93       	push	r18
    40fe:	3f 93       	push	r19
    4100:	4f 93       	push	r20
    4102:	5f 93       	push	r21
    4104:	6f 93       	push	r22
    4106:	7f 93       	push	r23
    4108:	8f 93       	push	r24
    410a:	9f 93       	push	r25
    410c:	af 93       	push	r26
    410e:	bf 93       	push	r27
    4110:	ef 93       	push	r30
    4112:	ff 93       	push	r31
    4114:	df 93       	push	r29
    4116:	cf 93       	push	r28
    4118:	0f 92       	push	r0
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
	g_Tick_Count++;
    411e:	80 91 41 01 	lds	r24, 0x0141
    4122:	90 91 42 01 	lds	r25, 0x0142
    4126:	a0 91 43 01 	lds	r26, 0x0143
    412a:	b0 91 44 01 	lds	r27, 0x0144
    412e:	01 96       	adiw	r24, 0x01	; 1
    4130:	a1 1d       	adc	r26, r1
    4132:	b1 1d       	adc	r27, r1
    4134:	80 93 41 01 	sts	0x0141, r24
    4138:	90 93 42 01 	sts	0x0142, r25
    413c:	a0 93 43 01 	sts	0x0143, r26
    4140:	b0 93 44 01 	sts	0x0144, r27
	uint8 loopcounter;
	/*loop to find a task ready to be executed*/
	for(loopcounter = 0 ; loopcounter<ID_MAX ; loopcounter++)
    4144:	19 82       	std	Y+1, r1	; 0x01
    4146:	46 c0       	rjmp	.+140    	; 0x41d4 <__vector_10+0xea>
	{
		/*check if there is a created task or not*/
		if(arr[loopcounter].Task_Ptr != NULL_PTR)
    4148:	89 81       	ldd	r24, Y+1	; 0x01
    414a:	28 2f       	mov	r18, r24
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	c9 01       	movw	r24, r18
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	88 0f       	add	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	82 0f       	add	r24, r18
    415a:	93 1f       	adc	r25, r19
    415c:	fc 01       	movw	r30, r24
    415e:	e8 5b       	subi	r30, 0xB8	; 184
    4160:	fe 4f       	sbci	r31, 0xFE	; 254
    4162:	80 81       	ld	r24, Z
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	00 97       	sbiw	r24, 0x00	; 0
    4168:	91 f1       	breq	.+100    	; 0x41ce <__vector_10+0xe4>
		{
			/*check if the task is ready to be executed by check task Periodicity*/
			if((g_Tick_Count % (arr[loopcounter].Periodicity))==0u)
    416a:	e0 90 41 01 	lds	r14, 0x0141
    416e:	f0 90 42 01 	lds	r15, 0x0142
    4172:	00 91 43 01 	lds	r16, 0x0143
    4176:	10 91 44 01 	lds	r17, 0x0144
    417a:	89 81       	ldd	r24, Y+1	; 0x01
    417c:	28 2f       	mov	r18, r24
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	c9 01       	movw	r24, r18
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	82 0f       	add	r24, r18
    418c:	93 1f       	adc	r25, r19
    418e:	fc 01       	movw	r30, r24
    4190:	ea 5b       	subi	r30, 0xBA	; 186
    4192:	fe 4f       	sbci	r31, 0xFE	; 254
    4194:	80 81       	ld	r24, Z
    4196:	91 81       	ldd	r25, Z+1	; 0x01
    4198:	9c 01       	movw	r18, r24
    419a:	40 e0       	ldi	r20, 0x00	; 0
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	c8 01       	movw	r24, r16
    41a0:	b7 01       	movw	r22, r14
    41a2:	0e 94 8b 22 	call	0x4516	; 0x4516 <__udivmodsi4>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	00 97       	sbiw	r24, 0x00	; 0
    41ac:	a1 05       	cpc	r26, r1
    41ae:	b1 05       	cpc	r27, r1
    41b0:	71 f4       	brne	.+28     	; 0x41ce <__vector_10+0xe4>
			{
				/*switch task state to Ready State*/
				arr[loopcounter].Mode = SOS_READY_MODE;
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	28 2f       	mov	r18, r24
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	c9 01       	movw	r24, r18
    41ba:	88 0f       	add	r24, r24
    41bc:	99 1f       	adc	r25, r25
    41be:	88 0f       	add	r24, r24
    41c0:	99 1f       	adc	r25, r25
    41c2:	82 0f       	add	r24, r18
    41c4:	93 1f       	adc	r25, r19
    41c6:	fc 01       	movw	r30, r24
    41c8:	eb 5b       	subi	r30, 0xBB	; 187
    41ca:	fe 4f       	sbci	r31, 0xFE	; 254
    41cc:	10 82       	st	Z, r1
ISR(TIMER0_COMP_vect)
{
	g_Tick_Count++;
	uint8 loopcounter;
	/*loop to find a task ready to be executed*/
	for(loopcounter = 0 ; loopcounter<ID_MAX ; loopcounter++)
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	8f 5f       	subi	r24, 0xFF	; 255
    41d2:	89 83       	std	Y+1, r24	; 0x01
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	84 36       	cpi	r24, 0x64	; 100
    41d8:	08 f4       	brcc	.+2      	; 0x41dc <__vector_10+0xf2>
    41da:	b6 cf       	rjmp	.-148    	; 0x4148 <__vector_10+0x5e>
		{
			/*Do Nothing*/
		}

	}
}
    41dc:	0f 90       	pop	r0
    41de:	cf 91       	pop	r28
    41e0:	df 91       	pop	r29
    41e2:	ff 91       	pop	r31
    41e4:	ef 91       	pop	r30
    41e6:	bf 91       	pop	r27
    41e8:	af 91       	pop	r26
    41ea:	9f 91       	pop	r25
    41ec:	8f 91       	pop	r24
    41ee:	7f 91       	pop	r23
    41f0:	6f 91       	pop	r22
    41f2:	5f 91       	pop	r21
    41f4:	4f 91       	pop	r20
    41f6:	3f 91       	pop	r19
    41f8:	2f 91       	pop	r18
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	ff 90       	pop	r15
    4200:	ef 90       	pop	r14
    4202:	0f 90       	pop	r0
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	0f 90       	pop	r0
    4208:	1f 90       	pop	r1
    420a:	18 95       	reti

0000420c <SOS_Init>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_Init(void)
{
    420c:	df 93       	push	r29
    420e:	cf 93       	push	r28
    4210:	0f 92       	push	r0
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
	TIMER_init();
    4216:	0e 94 9f 08 	call	0x113e	; 0x113e <TIMER_init>
	uint8 LoopCounter = 0;
    421a:	19 82       	std	Y+1, r1	; 0x01
	/*loop to Initialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    421c:	19 82       	std	Y+1, r1	; 0x01
    421e:	30 c0       	rjmp	.+96     	; 0x4280 <SOS_Init+0x74>
	{
		/*switch task state to Waiting State*/
		arr[LoopCounter].Mode = SOS_WAITING_MODE;
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	28 2f       	mov	r18, r24
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	c9 01       	movw	r24, r18
    4228:	88 0f       	add	r24, r24
    422a:	99 1f       	adc	r25, r25
    422c:	88 0f       	add	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	82 0f       	add	r24, r18
    4232:	93 1f       	adc	r25, r19
    4234:	fc 01       	movw	r30, r24
    4236:	eb 5b       	subi	r30, 0xBB	; 187
    4238:	fe 4f       	sbci	r31, 0xFE	; 254
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	80 83       	st	Z, r24
		/*Initialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	28 2f       	mov	r18, r24
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	c9 01       	movw	r24, r18
    4246:	88 0f       	add	r24, r24
    4248:	99 1f       	adc	r25, r25
    424a:	88 0f       	add	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	82 0f       	add	r24, r18
    4250:	93 1f       	adc	r25, r19
    4252:	fc 01       	movw	r30, r24
    4254:	ea 5b       	subi	r30, 0xBA	; 186
    4256:	fe 4f       	sbci	r31, 0xFE	; 254
    4258:	11 82       	std	Z+1, r1	; 0x01
    425a:	10 82       	st	Z, r1
		/*Initialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
    425c:	89 81       	ldd	r24, Y+1	; 0x01
    425e:	28 2f       	mov	r18, r24
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	c9 01       	movw	r24, r18
    4264:	88 0f       	add	r24, r24
    4266:	99 1f       	adc	r25, r25
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	82 0f       	add	r24, r18
    426e:	93 1f       	adc	r25, r19
    4270:	fc 01       	movw	r30, r24
    4272:	e8 5b       	subi	r30, 0xB8	; 184
    4274:	fe 4f       	sbci	r31, 0xFE	; 254
    4276:	11 82       	std	Z+1, r1	; 0x01
    4278:	10 82       	st	Z, r1
void SOS_Init(void)
{
	TIMER_init();
	uint8 LoopCounter = 0;
	/*loop to Initialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    427a:	89 81       	ldd	r24, Y+1	; 0x01
    427c:	8f 5f       	subi	r24, 0xFF	; 255
    427e:	89 83       	std	Y+1, r24	; 0x01
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	84 36       	cpi	r24, 0x64	; 100
    4284:	68 f2       	brcs	.-102    	; 0x4220 <SOS_Init+0x14>
		/*Initialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
		/*Initialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
	}
}
    4286:	0f 90       	pop	r0
    4288:	cf 91       	pop	r28
    428a:	df 91       	pop	r29
    428c:	08 95       	ret

0000428e <SOS_CreateTask>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmSosStatus_t SOS_CreateTask(EnmSosPriority_t a_Priority, uint16 a_periodicity, void (* Task_Select_Ptr)(void))
{
    428e:	df 93       	push	r29
    4290:	cf 93       	push	r28
    4292:	00 d0       	rcall	.+0      	; 0x4294 <SOS_CreateTask+0x6>
    4294:	00 d0       	rcall	.+0      	; 0x4296 <SOS_CreateTask+0x8>
    4296:	00 d0       	rcall	.+0      	; 0x4298 <SOS_CreateTask+0xa>
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	8a 83       	std	Y+2, r24	; 0x02
    429e:	7c 83       	std	Y+4, r23	; 0x04
    42a0:	6b 83       	std	Y+3, r22	; 0x03
    42a2:	5e 83       	std	Y+6, r21	; 0x06
    42a4:	4d 83       	std	Y+5, r20	; 0x05
	/*Return Value*/
	EnmSosStatus_t ReternVal;
	/*To avoid condition of two tasks have same Priority*/
	if(arr[a_Priority].Task_Ptr != NULL_PTR)
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	28 2f       	mov	r18, r24
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	c9 01       	movw	r24, r18
    42ae:	88 0f       	add	r24, r24
    42b0:	99 1f       	adc	r25, r25
    42b2:	88 0f       	add	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	fc 01       	movw	r30, r24
    42bc:	e8 5b       	subi	r30, 0xB8	; 184
    42be:	fe 4f       	sbci	r31, 0xFE	; 254
    42c0:	80 81       	ld	r24, Z
    42c2:	91 81       	ldd	r25, Z+1	; 0x01
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	19 f0       	breq	.+6      	; 0x42ce <SOS_CreateTask+0x40>
	{
		ReternVal = RESERVED_TASK;
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	89 83       	std	Y+1, r24	; 0x01
    42cc:	32 c0       	rjmp	.+100    	; 0x4332 <SOS_CreateTask+0xa4>
	}
	else
	{
		/*create task with its Priority and periodicity*/
		arr[a_Priority].Mode = SOS_WAITING_MODE;
    42ce:	8a 81       	ldd	r24, Y+2	; 0x02
    42d0:	28 2f       	mov	r18, r24
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	c9 01       	movw	r24, r18
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	82 0f       	add	r24, r18
    42e0:	93 1f       	adc	r25, r19
    42e2:	fc 01       	movw	r30, r24
    42e4:	eb 5b       	subi	r30, 0xBB	; 187
    42e6:	fe 4f       	sbci	r31, 0xFE	; 254
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	80 83       	st	Z, r24
		arr[a_Priority].Periodicity = a_periodicity;
    42ec:	8a 81       	ldd	r24, Y+2	; 0x02
    42ee:	28 2f       	mov	r18, r24
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	c9 01       	movw	r24, r18
    42f4:	88 0f       	add	r24, r24
    42f6:	99 1f       	adc	r25, r25
    42f8:	88 0f       	add	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	82 0f       	add	r24, r18
    42fe:	93 1f       	adc	r25, r19
    4300:	fc 01       	movw	r30, r24
    4302:	ea 5b       	subi	r30, 0xBA	; 186
    4304:	fe 4f       	sbci	r31, 0xFE	; 254
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	9c 81       	ldd	r25, Y+4	; 0x04
    430a:	91 83       	std	Z+1, r25	; 0x01
    430c:	80 83       	st	Z, r24
		arr[a_Priority].Task_Ptr = Task_Select_Ptr;
    430e:	8a 81       	ldd	r24, Y+2	; 0x02
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	c9 01       	movw	r24, r18
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	82 0f       	add	r24, r18
    4320:	93 1f       	adc	r25, r19
    4322:	fc 01       	movw	r30, r24
    4324:	e8 5b       	subi	r30, 0xB8	; 184
    4326:	fe 4f       	sbci	r31, 0xFE	; 254
    4328:	8d 81       	ldd	r24, Y+5	; 0x05
    432a:	9e 81       	ldd	r25, Y+6	; 0x06
    432c:	91 83       	std	Z+1, r25	; 0x01
    432e:	80 83       	st	Z, r24

		ReternVal = OK;
    4330:	19 82       	std	Y+1, r1	; 0x01
	}

	return ReternVal;
    4332:	89 81       	ldd	r24, Y+1	; 0x01
}
    4334:	26 96       	adiw	r28, 0x06	; 6
    4336:	0f b6       	in	r0, 0x3f	; 63
    4338:	f8 94       	cli
    433a:	de bf       	out	0x3e, r29	; 62
    433c:	0f be       	out	0x3f, r0	; 63
    433e:	cd bf       	out	0x3d, r28	; 61
    4340:	cf 91       	pop	r28
    4342:	df 91       	pop	r29
    4344:	08 95       	ret

00004346 <SOS_Run>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_Run(void)
{
    4346:	df 93       	push	r29
    4348:	cf 93       	push	r28
    434a:	0f 92       	push	r0
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
	uint8 LoopCtr;
	while(1)
	{
		/*loop for searching about ready task to execute*/
		for(LoopCtr = 0; LoopCtr <ID_MAX ;LoopCtr++)
    4350:	19 82       	std	Y+1, r1	; 0x01
    4352:	42 c0       	rjmp	.+132    	; 0x43d8 <SOS_Run+0x92>
		{
			/*check if the task is ready to execute*/
			if(arr[LoopCtr].Mode == SOS_READY_MODE)
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	28 2f       	mov	r18, r24
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	c9 01       	movw	r24, r18
    435c:	88 0f       	add	r24, r24
    435e:	99 1f       	adc	r25, r25
    4360:	88 0f       	add	r24, r24
    4362:	99 1f       	adc	r25, r25
    4364:	82 0f       	add	r24, r18
    4366:	93 1f       	adc	r25, r19
    4368:	fc 01       	movw	r30, r24
    436a:	eb 5b       	subi	r30, 0xBB	; 187
    436c:	fe 4f       	sbci	r31, 0xFE	; 254
    436e:	80 81       	ld	r24, Z
    4370:	88 23       	and	r24, r24
    4372:	79 f5       	brne	.+94     	; 0x43d2 <SOS_Run+0x8c>
			{
				/*switch task state to Running State*/
				arr[LoopCtr].Mode = SOS_RUNING_MODE;
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	28 2f       	mov	r18, r24
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	c9 01       	movw	r24, r18
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	fc 01       	movw	r30, r24
    438a:	eb 5b       	subi	r30, 0xBB	; 187
    438c:	fe 4f       	sbci	r31, 0xFE	; 254
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	80 83       	st	Z, r24
				/*Run the Task*/
				arr[LoopCtr].Task_Ptr();
    4392:	89 81       	ldd	r24, Y+1	; 0x01
    4394:	28 2f       	mov	r18, r24
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	c9 01       	movw	r24, r18
    439a:	88 0f       	add	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	82 0f       	add	r24, r18
    43a4:	93 1f       	adc	r25, r19
    43a6:	fc 01       	movw	r30, r24
    43a8:	e8 5b       	subi	r30, 0xB8	; 184
    43aa:	fe 4f       	sbci	r31, 0xFE	; 254
    43ac:	01 90       	ld	r0, Z+
    43ae:	f0 81       	ld	r31, Z
    43b0:	e0 2d       	mov	r30, r0
    43b2:	09 95       	icall
				/*wait for another task*/
				arr[LoopCtr].Mode = SOS_WAITING_MODE;
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	28 2f       	mov	r18, r24
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	c9 01       	movw	r24, r18
    43bc:	88 0f       	add	r24, r24
    43be:	99 1f       	adc	r25, r25
    43c0:	88 0f       	add	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	82 0f       	add	r24, r18
    43c6:	93 1f       	adc	r25, r19
    43c8:	fc 01       	movw	r30, r24
    43ca:	eb 5b       	subi	r30, 0xBB	; 187
    43cc:	fe 4f       	sbci	r31, 0xFE	; 254
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	80 83       	st	Z, r24
{
	uint8 LoopCtr;
	while(1)
	{
		/*loop for searching about ready task to execute*/
		for(LoopCtr = 0; LoopCtr <ID_MAX ;LoopCtr++)
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	8f 5f       	subi	r24, 0xFF	; 255
    43d6:	89 83       	std	Y+1, r24	; 0x01
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	84 36       	cpi	r24, 0x64	; 100
    43dc:	08 f4       	brcc	.+2      	; 0x43e0 <SOS_Run+0x9a>
    43de:	ba cf       	rjmp	.-140    	; 0x4354 <SOS_Run+0xe>
    43e0:	b7 cf       	rjmp	.-146    	; 0x4350 <SOS_Run+0xa>

000043e2 <SOS_DeleteTask>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_DeleteTask(void (*DeletedTask_Ptr)(void))
{
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	00 d0       	rcall	.+0      	; 0x43e8 <SOS_DeleteTask+0x6>
    43e8:	0f 92       	push	r0
    43ea:	cd b7       	in	r28, 0x3d	; 61
    43ec:	de b7       	in	r29, 0x3e	; 62
    43ee:	9b 83       	std	Y+3, r25	; 0x03
    43f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loopcounter;
	/*loop to find the task that wanted to be deleted*/
	for(Loopcounter = 0; Loopcounter<ID_MAX ; Loopcounter++)
    43f2:	19 82       	std	Y+1, r1	; 0x01
    43f4:	45 c0       	rjmp	.+138    	; 0x4480 <SOS_DeleteTask+0x9e>
	{
		/*check if the task is the desired task to be deleted*/
		if(arr[Loopcounter].Task_Ptr == DeletedTask_Ptr)
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	28 2f       	mov	r18, r24
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	c9 01       	movw	r24, r18
    43fe:	88 0f       	add	r24, r24
    4400:	99 1f       	adc	r25, r25
    4402:	88 0f       	add	r24, r24
    4404:	99 1f       	adc	r25, r25
    4406:	82 0f       	add	r24, r18
    4408:	93 1f       	adc	r25, r19
    440a:	fc 01       	movw	r30, r24
    440c:	e8 5b       	subi	r30, 0xB8	; 184
    440e:	fe 4f       	sbci	r31, 0xFE	; 254
    4410:	20 81       	ld	r18, Z
    4412:	31 81       	ldd	r19, Z+1	; 0x01
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	9b 81       	ldd	r25, Y+3	; 0x03
    4418:	28 17       	cp	r18, r24
    441a:	39 07       	cpc	r19, r25
    441c:	71 f5       	brne	.+92     	; 0x447a <SOS_DeleteTask+0x98>
		{
			/*delete the task and get out of the loop*/
			arr[Loopcounter].Task_Ptr = NULL_PTR;
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	c9 01       	movw	r24, r18
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	88 0f       	add	r24, r24
    442c:	99 1f       	adc	r25, r25
    442e:	82 0f       	add	r24, r18
    4430:	93 1f       	adc	r25, r19
    4432:	fc 01       	movw	r30, r24
    4434:	e8 5b       	subi	r30, 0xB8	; 184
    4436:	fe 4f       	sbci	r31, 0xFE	; 254
    4438:	11 82       	std	Z+1, r1	; 0x01
    443a:	10 82       	st	Z, r1
			arr[Loopcounter].Mode= SOS_WAITING_MODE;
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	c9 01       	movw	r24, r18
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	88 0f       	add	r24, r24
    444a:	99 1f       	adc	r25, r25
    444c:	82 0f       	add	r24, r18
    444e:	93 1f       	adc	r25, r19
    4450:	fc 01       	movw	r30, r24
    4452:	eb 5b       	subi	r30, 0xBB	; 187
    4454:	fe 4f       	sbci	r31, 0xFE	; 254
    4456:	82 e0       	ldi	r24, 0x02	; 2
    4458:	80 83       	st	Z, r24
			arr[Loopcounter].Periodicity = 0u;
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	28 2f       	mov	r18, r24
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	c9 01       	movw	r24, r18
    4462:	88 0f       	add	r24, r24
    4464:	99 1f       	adc	r25, r25
    4466:	88 0f       	add	r24, r24
    4468:	99 1f       	adc	r25, r25
    446a:	82 0f       	add	r24, r18
    446c:	93 1f       	adc	r25, r19
    446e:	fc 01       	movw	r30, r24
    4470:	ea 5b       	subi	r30, 0xBA	; 186
    4472:	fe 4f       	sbci	r31, 0xFE	; 254
    4474:	11 82       	std	Z+1, r1	; 0x01
    4476:	10 82       	st	Z, r1
    4478:	07 c0       	rjmp	.+14     	; 0x4488 <SOS_DeleteTask+0xa6>
 *******************************************************************************/
void SOS_DeleteTask(void (*DeletedTask_Ptr)(void))
{
	uint8 Loopcounter;
	/*loop to find the task that wanted to be deleted*/
	for(Loopcounter = 0; Loopcounter<ID_MAX ; Loopcounter++)
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	8f 5f       	subi	r24, 0xFF	; 255
    447e:	89 83       	std	Y+1, r24	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	84 36       	cpi	r24, 0x64	; 100
    4484:	08 f4       	brcc	.+2      	; 0x4488 <SOS_DeleteTask+0xa6>
    4486:	b7 cf       	rjmp	.-146    	; 0x43f6 <SOS_DeleteTask+0x14>
		else
		{
			/*Do Nothing*/
		}
	}
}
    4488:	0f 90       	pop	r0
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	08 95       	ret

00004494 <SOS_DeInit>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_DeInit(void)
{
    4494:	df 93       	push	r29
    4496:	cf 93       	push	r28
    4498:	0f 92       	push	r0
    449a:	cd b7       	in	r28, 0x3d	; 61
    449c:	de b7       	in	r29, 0x3e	; 62
	TIMER_Deinit();
    449e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <TIMER_Deinit>
	uint8 LoopCounter = 0;
    44a2:	19 82       	std	Y+1, r1	; 0x01
	/*loop to ReInitialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    44a4:	19 82       	std	Y+1, r1	; 0x01
    44a6:	30 c0       	rjmp	.+96     	; 0x4508 <SOS_DeInit+0x74>
	{
		/*switch task state to Waiting State*/
		arr[LoopCounter].Mode = SOS_WAITING_MODE;
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	28 2f       	mov	r18, r24
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	c9 01       	movw	r24, r18
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	88 0f       	add	r24, r24
    44b6:	99 1f       	adc	r25, r25
    44b8:	82 0f       	add	r24, r18
    44ba:	93 1f       	adc	r25, r19
    44bc:	fc 01       	movw	r30, r24
    44be:	eb 5b       	subi	r30, 0xBB	; 187
    44c0:	fe 4f       	sbci	r31, 0xFE	; 254
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	80 83       	st	Z, r24
		/*ReInitialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
    44c6:	89 81       	ldd	r24, Y+1	; 0x01
    44c8:	28 2f       	mov	r18, r24
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	c9 01       	movw	r24, r18
    44ce:	88 0f       	add	r24, r24
    44d0:	99 1f       	adc	r25, r25
    44d2:	88 0f       	add	r24, r24
    44d4:	99 1f       	adc	r25, r25
    44d6:	82 0f       	add	r24, r18
    44d8:	93 1f       	adc	r25, r19
    44da:	fc 01       	movw	r30, r24
    44dc:	ea 5b       	subi	r30, 0xBA	; 186
    44de:	fe 4f       	sbci	r31, 0xFE	; 254
    44e0:	11 82       	std	Z+1, r1	; 0x01
    44e2:	10 82       	st	Z, r1
		/*ReInitialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
    44e4:	89 81       	ldd	r24, Y+1	; 0x01
    44e6:	28 2f       	mov	r18, r24
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	c9 01       	movw	r24, r18
    44ec:	88 0f       	add	r24, r24
    44ee:	99 1f       	adc	r25, r25
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	82 0f       	add	r24, r18
    44f6:	93 1f       	adc	r25, r19
    44f8:	fc 01       	movw	r30, r24
    44fa:	e8 5b       	subi	r30, 0xB8	; 184
    44fc:	fe 4f       	sbci	r31, 0xFE	; 254
    44fe:	11 82       	std	Z+1, r1	; 0x01
    4500:	10 82       	st	Z, r1
void SOS_DeInit(void)
{
	TIMER_Deinit();
	uint8 LoopCounter = 0;
	/*loop to ReInitialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	8f 5f       	subi	r24, 0xFF	; 255
    4506:	89 83       	std	Y+1, r24	; 0x01
    4508:	89 81       	ldd	r24, Y+1	; 0x01
    450a:	84 36       	cpi	r24, 0x64	; 100
    450c:	68 f2       	brcs	.-102    	; 0x44a8 <SOS_DeInit+0x14>
		/*ReInitialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
		/*ReInitialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
	}
}
    450e:	0f 90       	pop	r0
    4510:	cf 91       	pop	r28
    4512:	df 91       	pop	r29
    4514:	08 95       	ret

00004516 <__udivmodsi4>:
    4516:	a1 e2       	ldi	r26, 0x21	; 33
    4518:	1a 2e       	mov	r1, r26
    451a:	aa 1b       	sub	r26, r26
    451c:	bb 1b       	sub	r27, r27
    451e:	fd 01       	movw	r30, r26
    4520:	0d c0       	rjmp	.+26     	; 0x453c <__udivmodsi4_ep>

00004522 <__udivmodsi4_loop>:
    4522:	aa 1f       	adc	r26, r26
    4524:	bb 1f       	adc	r27, r27
    4526:	ee 1f       	adc	r30, r30
    4528:	ff 1f       	adc	r31, r31
    452a:	a2 17       	cp	r26, r18
    452c:	b3 07       	cpc	r27, r19
    452e:	e4 07       	cpc	r30, r20
    4530:	f5 07       	cpc	r31, r21
    4532:	20 f0       	brcs	.+8      	; 0x453c <__udivmodsi4_ep>
    4534:	a2 1b       	sub	r26, r18
    4536:	b3 0b       	sbc	r27, r19
    4538:	e4 0b       	sbc	r30, r20
    453a:	f5 0b       	sbc	r31, r21

0000453c <__udivmodsi4_ep>:
    453c:	66 1f       	adc	r22, r22
    453e:	77 1f       	adc	r23, r23
    4540:	88 1f       	adc	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	1a 94       	dec	r1
    4546:	69 f7       	brne	.-38     	; 0x4522 <__udivmodsi4_loop>
    4548:	60 95       	com	r22
    454a:	70 95       	com	r23
    454c:	80 95       	com	r24
    454e:	90 95       	com	r25
    4550:	9b 01       	movw	r18, r22
    4552:	ac 01       	movw	r20, r24
    4554:	bd 01       	movw	r22, r26
    4556:	cf 01       	movw	r24, r30
    4558:	08 95       	ret

0000455a <__prologue_saves__>:
    455a:	2f 92       	push	r2
    455c:	3f 92       	push	r3
    455e:	4f 92       	push	r4
    4560:	5f 92       	push	r5
    4562:	6f 92       	push	r6
    4564:	7f 92       	push	r7
    4566:	8f 92       	push	r8
    4568:	9f 92       	push	r9
    456a:	af 92       	push	r10
    456c:	bf 92       	push	r11
    456e:	cf 92       	push	r12
    4570:	df 92       	push	r13
    4572:	ef 92       	push	r14
    4574:	ff 92       	push	r15
    4576:	0f 93       	push	r16
    4578:	1f 93       	push	r17
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	cd b7       	in	r28, 0x3d	; 61
    4580:	de b7       	in	r29, 0x3e	; 62
    4582:	ca 1b       	sub	r28, r26
    4584:	db 0b       	sbc	r29, r27
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	de bf       	out	0x3e, r29	; 62
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	09 94       	ijmp

00004592 <__epilogue_restores__>:
    4592:	2a 88       	ldd	r2, Y+18	; 0x12
    4594:	39 88       	ldd	r3, Y+17	; 0x11
    4596:	48 88       	ldd	r4, Y+16	; 0x10
    4598:	5f 84       	ldd	r5, Y+15	; 0x0f
    459a:	6e 84       	ldd	r6, Y+14	; 0x0e
    459c:	7d 84       	ldd	r7, Y+13	; 0x0d
    459e:	8c 84       	ldd	r8, Y+12	; 0x0c
    45a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    45a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    45a4:	b9 84       	ldd	r11, Y+9	; 0x09
    45a6:	c8 84       	ldd	r12, Y+8	; 0x08
    45a8:	df 80       	ldd	r13, Y+7	; 0x07
    45aa:	ee 80       	ldd	r14, Y+6	; 0x06
    45ac:	fd 80       	ldd	r15, Y+5	; 0x05
    45ae:	0c 81       	ldd	r16, Y+4	; 0x04
    45b0:	1b 81       	ldd	r17, Y+3	; 0x03
    45b2:	aa 81       	ldd	r26, Y+2	; 0x02
    45b4:	b9 81       	ldd	r27, Y+1	; 0x01
    45b6:	ce 0f       	add	r28, r30
    45b8:	d1 1d       	adc	r29, r1
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	ed 01       	movw	r28, r26
    45c6:	08 95       	ret

000045c8 <_exit>:
    45c8:	f8 94       	cli

000045ca <__stop_program>:
    45ca:	ff cf       	rjmp	.-2      	; 0x45ca <__stop_program>
