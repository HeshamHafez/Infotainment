
Infotainment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003b7e  00003c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ff  00800076  00800076  00003c28  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fcc  00000000  00000000  00006790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000775c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000078bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ab91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bc94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bf56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 1b 	call	0x3634	; 0x3634 <main>
      8a:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_WritePin>:

#include "DIO.h"


void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_WritePin+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==HIGH)
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <DIO_WritePin+0x16>
     cb2:	6d c0       	rjmp	.+218    	; 0xd8e <DIO_WritePin+0xf0>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	a0 f4       	brcc	.+40     	; 0xce2 <DIO_WritePin+0x44>
		{
			SET_BIT(DIO_PORTA,PinNum);
     cba:	ab e3       	ldi	r26, 0x3B	; 59
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb e3       	ldi	r30, 0x3B	; 59
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_WritePin+0x3a>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_WritePin+0x36>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	c8 c0       	rjmp	.+400    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 30       	cpi	r24, 0x08	; 8
     ce6:	c8 f0       	brcs	.+50     	; 0xd1a <DIO_WritePin+0x7c>
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 31       	cpi	r24, 0x10	; 16
     cec:	b0 f4       	brcc	.+44     	; 0xd1a <DIO_WritePin+0x7c>
		{
			SET_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
     cee:	a8 e3       	ldi	r26, 0x38	; 56
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 e3       	ldi	r30, 0x38	; 56
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	88 2f       	mov	r24, r24
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	08 97       	sbiw	r24, 0x08	; 8
     d02:	9c 01       	movw	r18, r24
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_WritePin+0x72>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_WritePin+0x6e>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	ac c0       	rjmp	.+344    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	80 31       	cpi	r24, 0x10	; 16
     d1e:	c8 f0       	brcs	.+50     	; 0xd52 <DIO_WritePin+0xb4>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	88 31       	cpi	r24, 0x18	; 24
     d24:	b0 f4       	brcc	.+44     	; 0xd52 <DIO_WritePin+0xb4>
		{
			SET_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
     d26:	a5 e3       	ldi	r26, 0x35	; 53
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e3       	ldi	r30, 0x35	; 53
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	40 97       	sbiw	r24, 0x10	; 16
     d3a:	9c 01       	movw	r18, r24
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_WritePin+0xaa>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_WritePin+0xa6>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	90 c0       	rjmp	.+288    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 31       	cpi	r24, 0x18	; 24
     d56:	08 f4       	brcc	.+2      	; 0xd5a <DIO_WritePin+0xbc>
     d58:	8c c0       	rjmp	.+280    	; 0xe72 <DIO_WritePin+0x1d4>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	80 32       	cpi	r24, 0x20	; 32
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <DIO_WritePin+0xc4>
     d60:	88 c0       	rjmp	.+272    	; 0xe72 <DIO_WritePin+0x1d4>
		{
			SET_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
     d62:	a2 e3       	ldi	r26, 0x32	; 50
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e2 e3       	ldi	r30, 0x32	; 50
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	48 97       	sbiw	r24, 0x18	; 24
     d76:	9c 01       	movw	r18, r24
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_WritePin+0xe6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_WritePin+0xe2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	72 c0       	rjmp	.+228    	; 0xe72 <DIO_WritePin+0x1d4>
		}
	}
	else if(PinValue==DIO_PIN0)
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_WritePin+0xf8>
     d94:	6e c0       	rjmp	.+220    	; 0xe72 <DIO_WritePin+0x1d4>
	{

		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	88 30       	cpi	r24, 0x08	; 8
     d9a:	a8 f4       	brcc	.+42     	; 0xdc6 <DIO_WritePin+0x128>
		{
			CLEAR_BIT(DIO_PORTA,PinNum);
     d9c:	ab e3       	ldi	r26, 0x3B	; 59
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e3       	ldi	r30, 0x3B	; 59
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_WritePin+0x11c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_WritePin+0x118>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	56 c0       	rjmp	.+172    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	d0 f0       	brcs	.+52     	; 0xe00 <DIO_WritePin+0x162>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	80 31       	cpi	r24, 0x10	; 16
     dd0:	b8 f4       	brcc	.+46     	; 0xe00 <DIO_WritePin+0x162>
		{
			CLEAR_BIT(DIO_PORTB,(PinNum-DIO_PIN8));
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	08 97       	sbiw	r24, 0x08	; 8
     de6:	9c 01       	movw	r18, r24
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_WritePin+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_WritePin+0x152>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	39 c0       	rjmp	.+114    	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	80 31       	cpi	r24, 0x10	; 16
     e04:	d0 f0       	brcs	.+52     	; 0xe3a <DIO_WritePin+0x19c>
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 31       	cpi	r24, 0x18	; 24
     e0a:	b8 f4       	brcc	.+46     	; 0xe3a <DIO_WritePin+0x19c>
		{
			CLEAR_BIT(DIO_PORTC,(PinNum-DIO_PIN16));
     e0c:	a5 e3       	ldi	r26, 0x35	; 53
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e5 e3       	ldi	r30, 0x35	; 53
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	40 97       	sbiw	r24, 0x10	; 16
     e20:	9c 01       	movw	r18, r24
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_WritePin+0x190>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_WritePin+0x18c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	1c c0       	rjmp	.+56     	; 0xe72 <DIO_WritePin+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 31       	cpi	r24, 0x18	; 24
     e3e:	c8 f0       	brcs	.+50     	; 0xe72 <DIO_WritePin+0x1d4>
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	b0 f4       	brcc	.+44     	; 0xe72 <DIO_WritePin+0x1d4>
		{
			CLEAR_BIT(DIO_PORTD,(PinNum-DIO_PIN24));
     e46:	a2 e3       	ldi	r26, 0x32	; 50
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e2 e3       	ldi	r30, 0x32	; 50
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	48 97       	sbiw	r24, 0x18	; 24
     e5a:	9c 01       	movw	r18, r24
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_WritePin+0x1ca>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_WritePin+0x1c6>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24

		}
	}

}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_ReadPin+0x6>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	98 f4       	brcc	.+38     	; 0xeb4 <DIO_ReadPin+0x38>
	{
		return GET_BIT(DIO_PINA,PinNum);
     e8e:	e9 e3       	ldi	r30, 0x39	; 57
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_ReadPin+0x2a>
     ea2:	55 95       	asr	r21
     ea4:	47 95       	ror	r20
     ea6:	8a 95       	dec	r24
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_ReadPin+0x26>
     eaa:	ca 01       	movw	r24, r20
     eac:	58 2f       	mov	r21, r24
     eae:	51 70       	andi	r21, 0x01	; 1
     eb0:	5a 83       	std	Y+2, r21	; 0x02
     eb2:	50 c0       	rjmp	.+160    	; 0xf54 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	88 30       	cpi	r24, 0x08	; 8
     eb8:	b8 f0       	brcs	.+46     	; 0xee8 <DIO_ReadPin+0x6c>
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	80 31       	cpi	r24, 0x10	; 16
     ebe:	a0 f4       	brcc	.+40     	; 0xee8 <DIO_ReadPin+0x6c>
	{
		return GET_BIT(DIO_PINB,(PinNum-DIO_PIN8));
     ec0:	e6 e3       	ldi	r30, 0x36	; 54
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	08 97       	sbiw	r24, 0x08	; 8
     ed2:	a9 01       	movw	r20, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_ReadPin+0x5e>
     ed6:	55 95       	asr	r21
     ed8:	47 95       	ror	r20
     eda:	8a 95       	dec	r24
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_ReadPin+0x5a>
     ede:	ca 01       	movw	r24, r20
     ee0:	58 2f       	mov	r21, r24
     ee2:	51 70       	andi	r21, 0x01	; 1
     ee4:	5a 83       	std	Y+2, r21	; 0x02
     ee6:	36 c0       	rjmp	.+108    	; 0xf54 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	80 31       	cpi	r24, 0x10	; 16
     eec:	b8 f0       	brcs	.+46     	; 0xf1c <DIO_ReadPin+0xa0>
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	88 31       	cpi	r24, 0x18	; 24
     ef2:	a0 f4       	brcc	.+40     	; 0xf1c <DIO_ReadPin+0xa0>
	{
		return GET_BIT(DIO_PINC,(PinNum-DIO_PIN16));
     ef4:	e3 e3       	ldi	r30, 0x33	; 51
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	40 97       	sbiw	r24, 0x10	; 16
     f06:	a9 01       	movw	r20, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_ReadPin+0x92>
     f0a:	55 95       	asr	r21
     f0c:	47 95       	ror	r20
     f0e:	8a 95       	dec	r24
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_ReadPin+0x8e>
     f12:	ca 01       	movw	r24, r20
     f14:	58 2f       	mov	r21, r24
     f16:	51 70       	andi	r21, 0x01	; 1
     f18:	5a 83       	std	Y+2, r21	; 0x02
     f1a:	1c c0       	rjmp	.+56     	; 0xf54 <DIO_ReadPin+0xd8>
	}
	else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	88 31       	cpi	r24, 0x18	; 24
     f20:	b8 f0       	brcs	.+46     	; 0xf50 <DIO_ReadPin+0xd4>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 32       	cpi	r24, 0x20	; 32
     f26:	a0 f4       	brcc	.+40     	; 0xf50 <DIO_ReadPin+0xd4>
	{
		return GET_BIT(DIO_PIND,(PinNum-DIO_PIN24));
     f28:	e0 e3       	ldi	r30, 0x30	; 48
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	48 97       	sbiw	r24, 0x18	; 24
     f3a:	a9 01       	movw	r20, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_ReadPin+0xc6>
     f3e:	55 95       	asr	r21
     f40:	47 95       	ror	r20
     f42:	8a 95       	dec	r24
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_ReadPin+0xc2>
     f46:	ca 01       	movw	r24, r20
     f48:	58 2f       	mov	r21, r24
     f4a:	51 70       	andi	r21, 0x01	; 1
     f4c:	5a 83       	std	Y+2, r21	; 0x02
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_ReadPin+0xd8>
	}
	return DIO_PIN8;
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DIO_SetPinDirection+0x6>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==INPUT)
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 23       	and	r24, r24
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_SetPinDirection+0x16>
     f74:	71 c0       	rjmp	.+226    	; 0x1058 <DIO_SetPinDirection+0xf8>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	a8 f4       	brcc	.+42     	; 0xfa6 <DIO_SetPinDirection+0x46>
		{
			CLEAR_BIT(DIO_DDRA,PinNum);
     f7c:	aa e3       	ldi	r26, 0x3A	; 58
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ea e3       	ldi	r30, 0x3A	; 58
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_SetPinDirection+0x3a>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_SetPinDirection+0x36>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	c7 c0       	rjmp	.+398    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	d0 f0       	brcs	.+52     	; 0xfe0 <DIO_SetPinDirection+0x80>
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	80 31       	cpi	r24, 0x10	; 16
     fb0:	b8 f4       	brcc	.+46     	; 0xfe0 <DIO_SetPinDirection+0x80>
		{
			CLEAR_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
     fb2:	a7 e3       	ldi	r26, 0x37	; 55
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e3       	ldi	r30, 0x37	; 55
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	08 97       	sbiw	r24, 0x08	; 8
     fc6:	9c 01       	movw	r18, r24
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_SetPinDirection+0x74>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_SetPinDirection+0x70>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	aa c0       	rjmp	.+340    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	d0 f0       	brcs	.+52     	; 0x101a <DIO_SetPinDirection+0xba>
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	88 31       	cpi	r24, 0x18	; 24
     fea:	b8 f4       	brcc	.+46     	; 0x101a <DIO_SetPinDirection+0xba>
		{
			CLEAR_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
     fec:	a4 e3       	ldi	r26, 0x34	; 52
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e4 e3       	ldi	r30, 0x34	; 52
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	40 97       	sbiw	r24, 0x10	; 16
    1000:	9c 01       	movw	r18, r24
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_SetPinDirection+0xae>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_SetPinDirection+0xaa>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	8d c0       	rjmp	.+282    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	88 31       	cpi	r24, 0x18	; 24
    101e:	08 f4       	brcc	.+2      	; 0x1022 <DIO_SetPinDirection+0xc2>
    1020:	89 c0       	rjmp	.+274    	; 0x1134 <DIO_SetPinDirection+0x1d4>
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	80 32       	cpi	r24, 0x20	; 32
    1026:	08 f0       	brcs	.+2      	; 0x102a <DIO_SetPinDirection+0xca>
    1028:	85 c0       	rjmp	.+266    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		{
			CLEAR_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    102a:	a1 e3       	ldi	r26, 0x31	; 49
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e1 e3       	ldi	r30, 0x31	; 49
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	48 97       	sbiw	r24, 0x18	; 24
    103e:	9c 01       	movw	r18, r24
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_SetPinDirection+0xec>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_SetPinDirection+0xe8>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	6e c0       	rjmp	.+220    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
	}
	else if(PinDirection==OUTPUT)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	09 f0       	breq	.+2      	; 0x1060 <DIO_SetPinDirection+0x100>
    105e:	6a c0       	rjmp	.+212    	; 0x1134 <DIO_SetPinDirection+0x1d4>
	{
		if((PinNum>=DIO_PIN0)&&(PinNum<=DIO_PIN7))
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	a0 f4       	brcc	.+40     	; 0x108e <DIO_SetPinDirection+0x12e>
		{
			SET_BIT(DIO_DDRA,PinNum);
    1066:	aa e3       	ldi	r26, 0x3A	; 58
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ea e3       	ldi	r30, 0x3A	; 58
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_SetPinDirection+0x124>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_SetPinDirection+0x120>
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	53 c0       	rjmp	.+166    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN8)&&(PinNum<=DIO_PIN15))
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	88 30       	cpi	r24, 0x08	; 8
    1092:	c8 f0       	brcs	.+50     	; 0x10c6 <DIO_SetPinDirection+0x166>
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	80 31       	cpi	r24, 0x10	; 16
    1098:	b0 f4       	brcc	.+44     	; 0x10c6 <DIO_SetPinDirection+0x166>
		{
			SET_BIT(DIO_DDRB,(PinNum-DIO_PIN8));
    109a:	a7 e3       	ldi	r26, 0x37	; 55
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	08 97       	sbiw	r24, 0x08	; 8
    10ae:	9c 01       	movw	r18, r24
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_SetPinDirection+0x15c>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_SetPinDirection+0x158>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	37 c0       	rjmp	.+110    	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN16)&&(PinNum<=DIO_PIN23))
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	80 31       	cpi	r24, 0x10	; 16
    10ca:	c8 f0       	brcs	.+50     	; 0x10fe <DIO_SetPinDirection+0x19e>
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 31       	cpi	r24, 0x18	; 24
    10d0:	b0 f4       	brcc	.+44     	; 0x10fe <DIO_SetPinDirection+0x19e>
		{
			SET_BIT(DIO_DDRC,(PinNum-DIO_PIN16));
    10d2:	a4 e3       	ldi	r26, 0x34	; 52
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	40 97       	sbiw	r24, 0x10	; 16
    10e6:	9c 01       	movw	r18, r24
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_SetPinDirection+0x194>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_SetPinDirection+0x190>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <DIO_SetPinDirection+0x1d4>
		}
		else if((PinNum>=DIO_PIN24)&&(PinNum<=DIO_PIN31))
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	88 31       	cpi	r24, 0x18	; 24
    1102:	c0 f0       	brcs	.+48     	; 0x1134 <DIO_SetPinDirection+0x1d4>
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	80 32       	cpi	r24, 0x20	; 32
    1108:	a8 f4       	brcc	.+42     	; 0x1134 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DIO_DDRD,(PinNum-DIO_PIN24));
    110a:	a1 e3       	ldi	r26, 0x31	; 49
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e1 e3       	ldi	r30, 0x31	; 49
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	48 97       	sbiw	r24, 0x18	; 24
    111e:	9c 01       	movw	r18, r24
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_SetPinDirection+0x1cc>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_SetPinDirection+0x1c8>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
		}
	}


}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TIMER_init>:
 *
 * Return:			NULL
 *******************************************************************************/

void TIMER_init(void)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	/**************************** CTC Mode Init ***************************************/
	TIMER_TCCR0 &= (~((1<<WGM00)|(1<<WGM01)));			/*Clear WGM00 & WGM01 Bits in TCCR0 Registers*/
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	87 7b       	andi	r24, 0xB7	; 183
    1152:	8c 93       	st	X, r24
	TIMER_TCCR0 |= (1<<WGM01);							/*Set WGM01 Bit*/
    1154:	a3 e5       	ldi	r26, 0x53	; 83
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e3 e5       	ldi	r30, 0x53	; 83
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 60       	ori	r24, 0x08	; 8
    1160:	8c 93       	st	X, r24
	/**************************** OCR0 Value ***************************************/
	TIMER_OCR0   = OCR0_VALUE;
    1162:	ec e5       	ldi	r30, 0x5C	; 92
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8d e7       	ldi	r24, 0x7D	; 125
    1168:	80 83       	st	Z, r24
	/**************************** Pre-Scaler Bit Init ***************************************/
	TIMER_TCCR0 &= (~((1<<CS00)|(1<<CS01)|(1<<CS02)));	/*Clear CS00 & CS01 & CS02 Bits in TCCR0 Registers*/
    116a:	a3 e5       	ldi	r26, 0x53	; 83
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e3 e5       	ldi	r30, 0x53	; 83
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 7f       	andi	r24, 0xF8	; 248
    1176:	8c 93       	st	X, r24
	TIMER_TCCR0 |= (1<<CS01);							/*Set CS01 Bit ----> pre-scaler = 256*/
    1178:	a3 e5       	ldi	r26, 0x53	; 83
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e3 e5       	ldi	r30, 0x53	; 83
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	8c 93       	st	X, r24
	TIMER_TCCR0 |= (1<<CS00);							/*Set CS00 Bit ----> pre-scaler = 256*/
    1186:	a3 e5       	ldi	r26, 0x53	; 83
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e3 e5       	ldi	r30, 0x53	; 83
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	8c 93       	st	X, r24
	TIMER_TIMSK |= (1u<<OCIE);
    1194:	a9 e5       	ldi	r26, 0x59	; 89
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e9 e5       	ldi	r30, 0x59	; 89
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	82 60       	ori	r24, 0x02	; 2
    11a0:	8c 93       	st	X, r24

}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <TIMER_Deinit>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void TIMER_Deinit(void)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	/**************************** Pre-Scaler Bit DeInit ***************************************/
	TIMER_TCCR0 &= (~((1<<CS00)|(1<<CS01)|(1<<CS02)));	/*Clear CS00 & CS01 & CS02 Bits in TCCR0 Registers*/
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	8c 93       	st	X, r24
	/**************************** OCR0 Value **************************************************/
	TIMER_OCR0=LOW;
    11be:	ec e5       	ldi	r30, 0x5C	; 92
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	10 82       	st	Z, r1
}
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <KeyPad_Init>:
static uint8 KeyPad_4x4_switch(uint8 row, uint8 col);
#endif


void KeyPad_Init(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(DIO_PIN18,INPUT);
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN19,INPUT);
    11da:	83 e1       	ldi	r24, 0x13	; 19
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN20,INPUT);
    11e2:	84 e1       	ldi	r24, 0x14	; 20
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN21,OUTPUT);
    11ea:	85 e1       	ldi	r24, 0x15	; 21
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN22,OUTPUT);
    11f2:	86 e1       	ldi	r24, 0x16	; 22
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN23,OUTPUT);
    11fa:	87 e1       	ldi	r24, 0x17	; 23
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_WritePin(DIO_PIN18,HIGH);
    1202:	82 e1       	ldi	r24, 0x12	; 18
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN19,HIGH);
    120a:	83 e1       	ldi	r24, 0x13	; 19
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN20,HIGH);
    1212:	84 e1       	ldi	r24, 0x14	; 20
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN21,LOW);
    121a:	85 e1       	ldi	r24, 0x15	; 21
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN22,LOW);
    1222:	86 e1       	ldi	r24, 0x16	; 22
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	DIO_WritePin(DIO_PIN23,LOW);
    122a:	87 e1       	ldi	r24, 0x17	; 23
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
}
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <KeyPad_getPressedKey+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <KeyPad_getPressedKey+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
static uint8 once=0;
if(once==1)
    1244:	80 91 78 00 	lds	r24, 0x0078
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	39 f4       	brne	.+14     	; 0x125a <KeyPad_getPressedKey+0x22>
{
	once++;
    124c:	80 91 78 00 	lds	r24, 0x0078
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	80 93 78 00 	sts	0x0078, r24
	return 0;
    1256:	1b 82       	std	Y+3, r1	; 0x03
    1258:	54 c0       	rjmp	.+168    	; 0x1302 <KeyPad_getPressedKey+0xca>
}
	uint8 row,col;
	for(col=0;col<N_COL;col++)
    125a:	19 82       	std	Y+1, r1	; 0x01
    125c:	4d c0       	rjmp	.+154    	; 0x12f8 <KeyPad_getPressedKey+0xc0>
	{
		KEYPAD_PORT_DIR = (0b00100000<<col);
    125e:	e4 e3       	ldi	r30, 0x34	; 52
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <KeyPad_getPressedKey+0x3a>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <KeyPad_getPressedKey+0x36>
    1276:	80 83       	st	Z, r24
		KEYPAD_PORT_OUT = (~(0b00100000<<col));
    1278:	e5 e3       	ldi	r30, 0x35	; 53
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	80 e2       	ldi	r24, 0x20	; 32
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <KeyPad_getPressedKey+0x56>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <KeyPad_getPressedKey+0x52>
    1292:	80 95       	com	r24
    1294:	80 83       	st	Z, r24

		for(row=START_ROW;row<END_ROW;row++)
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	28 c0       	rjmp	.+80     	; 0x12ec <KeyPad_getPressedKey+0xb4>
		{
			if(GET_BIT(KEYPAD_PORT_IN,row) == 0)
    129c:	e3 e3       	ldi	r30, 0x33	; 51
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a9 01       	movw	r20, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <KeyPad_getPressedKey+0x7c>
    12b0:	55 95       	asr	r21
    12b2:	47 95       	ror	r20
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <KeyPad_getPressedKey+0x78>
    12b8:	ca 01       	movw	r24, r20
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	90 70       	andi	r25, 0x00	; 0
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	91 f4       	brne	.+36     	; 0x12e6 <KeyPad_getPressedKey+0xae>
			{
				g_row = row;
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 93 79 00 	sts	0x0079, r24
				SOS_CreateTask(PRIORITY_2,5,ButtonTask);
    12c8:	23 e1       	ldi	r18, 0x13	; 19
    12ca:	3a e0       	ldi	r19, 0x0A	; 10
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	65 e0       	ldi	r22, 0x05	; 5
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	0e 94 20 1c 	call	0x3840	; 0x3840 <SOS_CreateTask>
#if(N_COL ==3)
#if(N_ROW == 3)
				return KeyPad_3x3_switch(row-START_ROW,col);
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	82 50       	subi	r24, 0x02	; 2
    12dc:	69 81       	ldd	r22, Y+1	; 0x01
    12de:	0e 94 8b 09 	call	0x1316	; 0x1316 <KeyPad_3x3_switch>
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	0e c0       	rjmp	.+28     	; 0x1302 <KeyPad_getPressedKey+0xca>
	for(col=0;col<N_COL;col++)
	{
		KEYPAD_PORT_DIR = (0b00100000<<col);
		KEYPAD_PORT_OUT = (~(0b00100000<<col));

		for(row=START_ROW;row<END_ROW;row++)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	85 30       	cpi	r24, 0x05	; 5
    12f0:	a8 f2       	brcs	.-86     	; 0x129c <KeyPad_getPressedKey+0x64>
{
	once++;
	return 0;
}
	uint8 row,col;
	for(col=0;col<N_COL;col++)
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <KeyPad_getPressedKey+0xc8>
    12fe:	af cf       	rjmp	.-162    	; 0x125e <KeyPad_getPressedKey+0x26>
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <KeyPad_getPressedKey+0xce>
				return KeyPad_4x4_switch(row-START_ROW,col);
#endif
			}
		}
	}
}
    1302:	5b 81       	ldd	r21, Y+3	; 0x03
    1304:	5c 83       	std	Y+4, r21	; 0x04
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <KeyPad_3x3_switch>:
	}
	return ReturnVal;
}
#elif (N_ROW == 3)
static uint8 KeyPad_3x3_switch(uint8 row, uint8 col)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	2b 97       	sbiw	r28, 0x0b	; 11
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 ReturnVal = 0;
    132e:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(DIO_PIN12,1);
    1330:	8c e0       	ldi	r24, 0x0C	; 12
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_WritePin(DIO_PIN12,1);
    1338:	8c e0       	ldi	r24, 0x0C	; 12
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>

	switch(row)
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3b 87       	std	Y+11, r19	; 0x0b
    1348:	2a 87       	std	Y+10, r18	; 0x0a
    134a:	8a 85       	ldd	r24, Y+10	; 0x0a
    134c:	9b 85       	ldd	r25, Y+11	; 0x0b
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	41 f1       	breq	.+80     	; 0x13a4 <KeyPad_3x3_switch+0x8e>
    1354:	2a 85       	ldd	r18, Y+10	; 0x0a
    1356:	3b 85       	ldd	r19, Y+11	; 0x0b
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <KeyPad_3x3_switch+0x4a>
    135e:	3e c0       	rjmp	.+124    	; 0x13dc <KeyPad_3x3_switch+0xc6>
    1360:	8a 85       	ldd	r24, Y+10	; 0x0a
    1362:	9b 85       	ldd	r25, Y+11	; 0x0b
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	09 f0       	breq	.+2      	; 0x136a <KeyPad_3x3_switch+0x54>
    1368:	54 c0       	rjmp	.+168    	; 0x1412 <KeyPad_3x3_switch+0xfc>
	{
	case 0:
		switch(col)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	39 87       	std	Y+9, r19	; 0x09
    1372:	28 87       	std	Y+8, r18	; 0x08
    1374:	88 85       	ldd	r24, Y+8	; 0x08
    1376:	99 85       	ldd	r25, Y+9	; 0x09
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	91 05       	cpc	r25, r1
    137c:	69 f0       	breq	.+26     	; 0x1398 <KeyPad_3x3_switch+0x82>
    137e:	28 85       	ldd	r18, Y+8	; 0x08
    1380:	39 85       	ldd	r19, Y+9	; 0x09
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	59 f0       	breq	.+22     	; 0x139e <KeyPad_3x3_switch+0x88>
    1388:	88 85       	ldd	r24, Y+8	; 0x08
    138a:	99 85       	ldd	r25, Y+9	; 0x09
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	09 f0       	breq	.+2      	; 0x1392 <KeyPad_3x3_switch+0x7c>
    1390:	40 c0       	rjmp	.+128    	; 0x1412 <KeyPad_3x3_switch+0xfc>
		{
		case 0: ReturnVal = R1C1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	3d c0       	rjmp	.+122    	; 0x1412 <KeyPad_3x3_switch+0xfc>
		break;
		case 1: ReturnVal = R1C2;
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	3a c0       	rjmp	.+116    	; 0x1412 <KeyPad_3x3_switch+0xfc>
		break;
		case 2: ReturnVal = R1C3;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	37 c0       	rjmp	.+110    	; 0x1412 <KeyPad_3x3_switch+0xfc>
		break;
		}
		break;
		case 1:
			switch(col)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3f 83       	std	Y+7, r19	; 0x07
    13ac:	2e 83       	std	Y+6, r18	; 0x06
    13ae:	8e 81       	ldd	r24, Y+6	; 0x06
    13b0:	9f 81       	ldd	r25, Y+7	; 0x07
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <KeyPad_3x3_switch+0xba>
    13b8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ba:	3f 81       	ldd	r19, Y+7	; 0x07
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	51 f0       	breq	.+20     	; 0x13d6 <KeyPad_3x3_switch+0xc0>
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	9f 81       	ldd	r25, Y+7	; 0x07
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	21 f5       	brne	.+72     	; 0x1412 <KeyPad_3x3_switch+0xfc>
			{
			case 0: ReturnVal = R2C1;
    13ca:	84 e0       	ldi	r24, 0x04	; 4
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	21 c0       	rjmp	.+66     	; 0x1412 <KeyPad_3x3_switch+0xfc>
			break;
			case 1: ReturnVal = R2C2;
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <KeyPad_3x3_switch+0xfc>
			break;
			case 2: ReturnVal = R2C3;
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	1b c0       	rjmp	.+54     	; 0x1412 <KeyPad_3x3_switch+0xfc>
			break;
			}
			break;
			case 2:
				switch(col)
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3d 83       	std	Y+5, r19	; 0x05
    13e4:	2c 83       	std	Y+4, r18	; 0x04
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	61 f0       	breq	.+24     	; 0x1408 <KeyPad_3x3_switch+0xf2>
    13f0:	2c 81       	ldd	r18, Y+4	; 0x04
    13f2:	3d 81       	ldd	r19, Y+5	; 0x05
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	51 f0       	breq	.+20     	; 0x140e <KeyPad_3x3_switch+0xf8>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	41 f4       	brne	.+16     	; 0x1412 <KeyPad_3x3_switch+0xfc>
				{
				case 0: ReturnVal = R3C1;
    1402:	87 e0       	ldi	r24, 0x07	; 7
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <KeyPad_3x3_switch+0xfc>
				break;
				case 1: ReturnVal = R3C2;
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <KeyPad_3x3_switch+0xfc>
				break;
				case 2: ReturnVal = R3C3;
    140e:	89 e0       	ldi	r24, 0x09	; 9
    1410:	89 83       	std	Y+1, r24	; 0x01
				break;
				}
				break;
	}
	return ReturnVal;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
}
    1414:	2b 96       	adiw	r28, 0x0b	; 11
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <ButtonTask>:
	return ReturnVal;
}
#endif

void ButtonTask(void)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <ButtonTask+0x6>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	static uint8 Button_State = PREPRESSED;
	switch(Button_State)
    1430:	80 91 75 00 	lds	r24, 0x0075
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3a 83       	std	Y+2, r19	; 0x02
    143a:	29 83       	std	Y+1, r18	; 0x01
    143c:	49 81       	ldd	r20, Y+1	; 0x01
    143e:	5a 81       	ldd	r21, Y+2	; 0x02
    1440:	42 30       	cpi	r20, 0x02	; 2
    1442:	51 05       	cpc	r21, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <ButtonTask+0x22>
    1446:	94 c0       	rjmp	.+296    	; 0x1570 <ButtonTask+0x14a>
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	34 f4       	brge	.+12     	; 0x145e <ButtonTask+0x38>
    1452:	29 81       	ldd	r18, Y+1	; 0x01
    1454:	3a 81       	ldd	r19, Y+2	; 0x02
    1456:	21 30       	cpi	r18, 0x01	; 1
    1458:	31 05       	cpc	r19, r1
    145a:	81 f1       	breq	.+96     	; 0x14bc <ButtonTask+0x96>
    145c:	93 c0       	rjmp	.+294    	; 0x1584 <ButtonTask+0x15e>
    145e:	49 81       	ldd	r20, Y+1	; 0x01
    1460:	5a 81       	ldd	r21, Y+2	; 0x02
    1462:	43 30       	cpi	r20, 0x03	; 3
    1464:	51 05       	cpc	r21, r1
    1466:	39 f0       	breq	.+14     	; 0x1476 <ButtonTask+0x50>
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	91 05       	cpc	r25, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <ButtonTask+0x4e>
    1472:	5d c0       	rjmp	.+186    	; 0x152e <ButtonTask+0x108>
    1474:	87 c0       	rjmp	.+270    	; 0x1584 <ButtonTask+0x15e>
	{
	case PREPRESSED:
		if(GET_BIT(KEYPAD_PORT_IN,g_row) == 0)
    1476:	e3 e3       	ldi	r30, 0x33	; 51
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	80 91 79 00 	lds	r24, 0x0079
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <ButtonTask+0x6a>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <ButtonTask+0x66>
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <ButtonTask+0x7a>
    149e:	72 c0       	rjmp	.+228    	; 0x1584 <ButtonTask+0x15e>
		{
			Press_count++;
    14a0:	80 91 6e 00 	lds	r24, 0x006E
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	80 93 6e 00 	sts	0x006E, r24
			if(Press_count == 10)
    14aa:	80 91 6e 00 	lds	r24, 0x006E
    14ae:	8a 30       	cpi	r24, 0x0A	; 10
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <ButtonTask+0x8e>
    14b2:	68 c0       	rjmp	.+208    	; 0x1584 <ButtonTask+0x15e>
			{
				Button_State = PRESSED;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	80 93 75 00 	sts	0x0075, r24
    14ba:	64 c0       	rjmp	.+200    	; 0x1584 <ButtonTask+0x15e>
				/*Do Nothing*/
			}
		}
		break;
	case PRESSED:
		if(GET_BIT(KEYPAD_PORT_IN,g_row) == 0)
    14bc:	e3 e3       	ldi	r30, 0x33	; 51
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	80 91 79 00 	lds	r24, 0x0079
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a9 01       	movw	r20, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <ButtonTask+0xb0>
    14d2:	55 95       	asr	r21
    14d4:	47 95       	ror	r20
    14d6:	8a 95       	dec	r24
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <ButtonTask+0xac>
    14da:	ca 01       	movw	r24, r20
    14dc:	81 70       	andi	r24, 0x01	; 1
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	09 f1       	breq	.+66     	; 0x1526 <ButtonTask+0x100>
		{
			/*Do Nothing*/
		}
		else
		{
			if((g_return==YES)||(g_return==NO))
    14e4:	80 91 7a 00 	lds	r24, 0x007A
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <ButtonTask+0xce>
    14ec:	80 91 7a 00 	lds	r24, 0x007A
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	b1 f4       	brne	.+44     	; 0x1520 <ButtonTask+0xfa>
			{
				if(g_return==Answers[ProgramSteps])
    14f4:	80 91 76 00 	lds	r24, 0x0076
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	fc 01       	movw	r30, r24
    14fe:	e0 59       	subi	r30, 0x90	; 144
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	90 81       	ld	r25, Z
    1504:	80 91 7a 00 	lds	r24, 0x007A
    1508:	98 17       	cp	r25, r24
    150a:	29 f4       	brne	.+10     	; 0x1516 <ButtonTask+0xf0>
				{
					Score++;
    150c:	80 91 77 00 	lds	r24, 0x0077
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	80 93 77 00 	sts	0x0077, r24
				}
				ProgramSteps++;
    1516:	80 91 76 00 	lds	r24, 0x0076
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	80 93 76 00 	sts	0x0076, r24
			}
			Button_State = PRERELEASED;
    1520:	84 e0       	ldi	r24, 0x04	; 4
    1522:	80 93 75 00 	sts	0x0075, r24
		}
		Press_count = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 6e 00 	sts	0x006E, r24
    152c:	2b c0       	rjmp	.+86     	; 0x1584 <ButtonTask+0x15e>
		break;
	case PRERELEASED:
		if(GET_BIT(KEYPAD_PORT_IN,g_row) == 1)
    152e:	e3 e3       	ldi	r30, 0x33	; 51
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	80 91 79 00 	lds	r24, 0x0079
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <ButtonTask+0x122>
    1544:	55 95       	asr	r21
    1546:	47 95       	ror	r20
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <ButtonTask+0x11e>
    154c:	ca 01       	movw	r24, r20
    154e:	81 70       	andi	r24, 0x01	; 1
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	88 23       	and	r24, r24
    1554:	b9 f0       	breq	.+46     	; 0x1584 <ButtonTask+0x15e>
		{
			Release_count--;
    1556:	80 91 6f 00 	lds	r24, 0x006F
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	80 93 6f 00 	sts	0x006F, r24
			if(Release_count == 1)
    1560:	80 91 6f 00 	lds	r24, 0x006F
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	71 f4       	brne	.+28     	; 0x1584 <ButtonTask+0x15e>
			{
				Button_State = RELEASED;
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	80 93 75 00 	sts	0x0075, r24
    156e:	0a c0       	rjmp	.+20     	; 0x1584 <ButtonTask+0x15e>
				/*Do Nothing*/
			}
		}
		break;
	case RELEASED:
		Release_count = 10;
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	80 93 6f 00 	sts	0x006F, r24
		Button_State = PREPRESSED;
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	80 93 75 00 	sts	0x0075, r24
		SOS_DeleteTask(ButtonTask);
    157c:	83 e1       	ldi	r24, 0x13	; 19
    157e:	9a e0       	ldi	r25, 0x0A	; 10
    1580:	0e 94 ca 1c 	call	0x3994	; 0x3994 <SOS_DeleteTask>
		break;
	default:
		break;
	}
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <Key_PressedTask>:

void Key_PressedTask(void)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	g_return = KeyPad_getPressedKey();
    1596:	0e 94 1c 09 	call	0x1238	; 0x1238 <KeyPad_getPressedKey>
    159a:	80 93 7a 00 	sts	0x007A, r24
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <LCD_init>:
#include "lcd.h"
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    15ac:	aa e3       	ldi	r26, 0x3A	; 58
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ea e3       	ldi	r30, 0x3A	; 58
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8e 60       	ori	r24, 0x0E	; 14
    15b8:	8c 93       	st	X, r24

#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    15ba:	aa e3       	ldi	r26, 0x3A	; 58
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ea e3       	ldi	r30, 0x3A	; 58
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 6f       	ori	r24, 0xF0	; 240
    15c6:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    15ce:	88 e2       	ldi	r24, 0x28	; 40
    15d0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    15d4:	8c e0       	ldi	r24, 0x0C	; 12
    15d6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
}
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	c9 5a       	subi	r28, 0xA9	; 169
    15f4:	d0 40       	sbci	r29, 0x00	; 0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	fe 01       	movw	r30, r28
    1602:	e7 55       	subi	r30, 0x57	; 87
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1608:	ab e3       	ldi	r26, 0x3B	; 59
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e3       	ldi	r30, 0x3B	; 59
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8d 7f       	andi	r24, 0xFD	; 253
    1614:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1616:	ab e3       	ldi	r26, 0x3B	; 59
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	eb e3       	ldi	r30, 0x3B	; 59
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8b 7f       	andi	r24, 0xFB	; 251
    1622:	8c 93       	st	X, r24
    1624:	fe 01       	movw	r30, r28
    1626:	eb 55       	subi	r30, 0x5B	; 91
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a6 e1       	ldi	r26, 0x16	; 22
    1630:	b4 e4       	ldi	r27, 0x44	; 68
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    163a:	8e 01       	movw	r16, r28
    163c:	0f 55       	subi	r16, 0x5F	; 95
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	eb 55       	subi	r30, 0x5B	; 91
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	2b ea       	ldi	r18, 0xAB	; 171
    1650:	3a ea       	ldi	r19, 0xAA	; 170
    1652:	4a e2       	ldi	r20, 0x2A	; 42
    1654:	50 e4       	ldi	r21, 0x40	; 64
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1668:	fe 01       	movw	r30, r28
    166a:	ef 55       	subi	r30, 0x5F	; 95
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	34 f4       	brge	.+12     	; 0x1692 <LCD_sendCommand+0xac>
		__ticks = 1;
    1686:	fe 01       	movw	r30, r28
    1688:	e0 56       	subi	r30, 0x60	; 96
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 83       	st	Z, r24
    1690:	e0 c0       	rjmp	.+448    	; 0x1852 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
    1692:	fe 01       	movw	r30, r28
    1694:	ef 55       	subi	r30, 0x5F	; 95
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	53 e4       	ldi	r21, 0x43	; 67
    16a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	0c f0       	brlt	.+2      	; 0x16b2 <LCD_sendCommand+0xcc>
    16b0:	c0 c0       	rjmp	.+384    	; 0x1832 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
    16b2:	fe 01       	movw	r30, r28
    16b4:	eb 55       	subi	r30, 0x5B	; 91
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a e7       	ldi	r20, 0x7A	; 122
    16c6:	54 e4       	ldi	r21, 0x44	; 68
    16c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	fe 01       	movw	r30, r28
    16d2:	e4 56       	subi	r30, 0x64	; 100
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16de:	8e 01       	movw	r16, r28
    16e0:	08 56       	subi	r16, 0x68	; 104
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	fe 01       	movw	r30, r28
    16e6:	e4 56       	subi	r30, 0x64	; 100
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    170c:	fe 01       	movw	r30, r28
    170e:	e8 56       	subi	r30, 0x68	; 104
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	44 f4       	brge	.+16     	; 0x173a <LCD_sendCommand+0x154>
		__ticks = 1;
    172a:	fe 01       	movw	r30, r28
    172c:	ea 56       	subi	r30, 0x6A	; 106
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
    1738:	64 c0       	rjmp	.+200    	; 0x1802 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    173a:	fe 01       	movw	r30, r28
    173c:	e8 56       	subi	r30, 0x68	; 104
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	0c f0       	brlt	.+2      	; 0x175a <LCD_sendCommand+0x174>
    1758:	43 c0       	rjmp	.+134    	; 0x17e0 <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	fe 01       	movw	r30, r28
    175c:	e4 56       	subi	r30, 0x64	; 100
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8e 01       	movw	r16, r28
    177a:	0a 56       	subi	r16, 0x6A	; 106
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	f8 01       	movw	r30, r16
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
    1790:	1f c0       	rjmp	.+62     	; 0x17d0 <LCD_sendCommand+0x1ea>
    1792:	fe 01       	movw	r30, r28
    1794:	ec 56       	subi	r30, 0x6C	; 108
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	88 ec       	ldi	r24, 0xC8	; 200
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17a0:	fe 01       	movw	r30, r28
    17a2:	ec 56       	subi	r30, 0x6C	; 108
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_sendCommand+0x1c4>
    17ae:	fe 01       	movw	r30, r28
    17b0:	ec 56       	subi	r30, 0x6C	; 108
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b8:	de 01       	movw	r26, r28
    17ba:	aa 56       	subi	r26, 0x6A	; 106
    17bc:	bf 4f       	sbci	r27, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	ea 56       	subi	r30, 0x6A	; 106
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	9c 93       	st	X, r25
    17ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	fe 01       	movw	r30, r28
    17d2:	ea 56       	subi	r30, 0x6A	; 106
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	d1 f6       	brne	.-76     	; 0x1792 <LCD_sendCommand+0x1ac>
    17de:	4b c0       	rjmp	.+150    	; 0x1876 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	8e 01       	movw	r16, r28
    17e2:	0a 56       	subi	r16, 0x6A	; 106
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	fe 01       	movw	r30, r28
    17e8:	e8 56       	subi	r30, 0x68	; 104
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	de 01       	movw	r26, r28
    1804:	ae 56       	subi	r26, 0x6E	; 110
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	ea 56       	subi	r30, 0x6A	; 106
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	9c 93       	st	X, r25
    1816:	8e 93       	st	-X, r24
    1818:	fe 01       	movw	r30, r28
    181a:	ee 56       	subi	r30, 0x6E	; 110
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_sendCommand+0x23c>
    1826:	fe 01       	movw	r30, r28
    1828:	ee 56       	subi	r30, 0x6E	; 110
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	22 c0       	rjmp	.+68     	; 0x1876 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1832:	8e 01       	movw	r16, r28
    1834:	00 56       	subi	r16, 0x60	; 96
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	ef 55       	subi	r30, 0x5F	; 95
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	80 83       	st	Z, r24
    1852:	de 01       	movw	r26, r28
    1854:	af 56       	subi	r26, 0x6F	; 111
    1856:	bf 4f       	sbci	r27, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e0 56       	subi	r30, 0x60	; 96
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1862:	fe 01       	movw	r30, r28
    1864:	ef 56       	subi	r30, 0x6F	; 111
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	8a 95       	dec	r24
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_sendCommand+0x284>
    186e:	fe 01       	movw	r30, r28
    1870:	ef 56       	subi	r30, 0x6F	; 111
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1876:	ab e3       	ldi	r26, 0x3B	; 59
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	88 60       	ori	r24, 0x08	; 8
    1882:	8c 93       	st	X, r24
    1884:	fe 01       	movw	r30, r28
    1886:	e3 57       	subi	r30, 0x73	; 115
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a6 e1       	ldi	r26, 0x16	; 22
    1890:	b4 e4       	ldi	r27, 0x44	; 68
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    189a:	8e 01       	movw	r16, r28
    189c:	07 57       	subi	r16, 0x77	; 119
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	e3 57       	subi	r30, 0x73	; 115
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	2b ea       	ldi	r18, 0xAB	; 171
    18b0:	3a ea       	ldi	r19, 0xAA	; 170
    18b2:	4a e2       	ldi	r20, 0x2A	; 42
    18b4:	50 e4       	ldi	r21, 0x40	; 64
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c8:	fe 01       	movw	r30, r28
    18ca:	e7 57       	subi	r30, 0x77	; 119
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	34 f4       	brge	.+12     	; 0x18f2 <LCD_sendCommand+0x30c>
		__ticks = 1;
    18e6:	fe 01       	movw	r30, r28
    18e8:	e8 57       	subi	r30, 0x78	; 120
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	80 83       	st	Z, r24
    18f0:	e0 c0       	rjmp	.+448    	; 0x1ab2 <LCD_sendCommand+0x4cc>
	else if (__tmp > 255)
    18f2:	fe 01       	movw	r30, r28
    18f4:	e7 57       	subi	r30, 0x77	; 119
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	0c f0       	brlt	.+2      	; 0x1912 <LCD_sendCommand+0x32c>
    1910:	c0 c0       	rjmp	.+384    	; 0x1a92 <LCD_sendCommand+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    1912:	fe 01       	movw	r30, r28
    1914:	e3 57       	subi	r30, 0x73	; 115
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a e7       	ldi	r20, 0x7A	; 122
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	fe 01       	movw	r30, r28
    1932:	ec 57       	subi	r30, 0x7C	; 124
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 83       	st	Z, r24
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	a2 83       	std	Z+2, r26	; 0x02
    193c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	8e 01       	movw	r16, r28
    1940:	00 58       	subi	r16, 0x80	; 128
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	fe 01       	movw	r30, r28
    1946:	ec 57       	subi	r30, 0x7C	; 124
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	f8 01       	movw	r30, r16
    1964:	80 83       	st	Z, r24
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	a2 83       	std	Z+2, r26	; 0x02
    196a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    196c:	fe 01       	movw	r30, r28
    196e:	e0 58       	subi	r30, 0x80	; 128
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	44 f4       	brge	.+16     	; 0x199a <LCD_sendCommand+0x3b4>
		__ticks = 1;
    198a:	fe 01       	movw	r30, r28
    198c:	e2 58       	subi	r30, 0x82	; 130
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
    1998:	64 c0       	rjmp	.+200    	; 0x1a62 <LCD_sendCommand+0x47c>
	else if (__tmp > 65535)
    199a:	fe 01       	movw	r30, r28
    199c:	e0 58       	subi	r30, 0x80	; 128
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b4:	18 16       	cp	r1, r24
    19b6:	0c f0       	brlt	.+2      	; 0x19ba <LCD_sendCommand+0x3d4>
    19b8:	43 c0       	rjmp	.+134    	; 0x1a40 <LCD_sendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	fe 01       	movw	r30, r28
    19bc:	ec 57       	subi	r30, 0x7C	; 124
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8e 01       	movw	r16, r28
    19da:	02 58       	subi	r16, 0x82	; 130
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	f8 01       	movw	r30, r16
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	1f c0       	rjmp	.+62     	; 0x1a30 <LCD_sendCommand+0x44a>
    19f2:	fe 01       	movw	r30, r28
    19f4:	e4 58       	subi	r30, 0x84	; 132
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a00:	fe 01       	movw	r30, r28
    1a02:	e4 58       	subi	r30, 0x84	; 132
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_sendCommand+0x424>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e4 58       	subi	r30, 0x84	; 132
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	de 01       	movw	r26, r28
    1a1a:	a2 58       	subi	r26, 0x82	; 130
    1a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e2 58       	subi	r30, 0x82	; 130
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	9c 93       	st	X, r25
    1a2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	fe 01       	movw	r30, r28
    1a32:	e2 58       	subi	r30, 0x82	; 130
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	d1 f6       	brne	.-76     	; 0x19f2 <LCD_sendCommand+0x40c>
    1a3e:	4b c0       	rjmp	.+150    	; 0x1ad6 <LCD_sendCommand+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	8e 01       	movw	r16, r28
    1a42:	02 58       	subi	r16, 0x82	; 130
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	fe 01       	movw	r30, r28
    1a48:	e0 58       	subi	r30, 0x80	; 128
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	60 81       	ld	r22, Z
    1a4e:	71 81       	ldd	r23, Z+1	; 0x01
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	de 01       	movw	r26, r28
    1a64:	a6 58       	subi	r26, 0x86	; 134
    1a66:	bf 4f       	sbci	r27, 0xFF	; 255
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e2 58       	subi	r30, 0x82	; 130
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	11 96       	adiw	r26, 0x01	; 1
    1a74:	9c 93       	st	X, r25
    1a76:	8e 93       	st	-X, r24
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e6 58       	subi	r30, 0x86	; 134
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_sendCommand+0x49c>
    1a86:	fe 01       	movw	r30, r28
    1a88:	e6 58       	subi	r30, 0x86	; 134
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
    1a90:	22 c0       	rjmp	.+68     	; 0x1ad6 <LCD_sendCommand+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a92:	8e 01       	movw	r16, r28
    1a94:	08 57       	subi	r16, 0x78	; 120
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e7 57       	subi	r30, 0x77	; 119
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	f8 01       	movw	r30, r16
    1ab0:	80 83       	st	Z, r24
    1ab2:	de 01       	movw	r26, r28
    1ab4:	a7 58       	subi	r26, 0x87	; 135
    1ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e8 57       	subi	r30, 0x78	; 120
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 58       	subi	r30, 0x87	; 135
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	8a 95       	dec	r24
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_sendCommand+0x4e4>
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e7 58       	subi	r30, 0x87	; 135
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1ad6:	ab e3       	ldi	r26, 0x3B	; 59
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	eb e3       	ldi	r30, 0x3B	; 59
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	9f 70       	andi	r25, 0x0F	; 15
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e7 55       	subi	r30, 0x57	; 87
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	80 7f       	andi	r24, 0xF0	; 240
    1aee:	89 2b       	or	r24, r25
    1af0:	8c 93       	st	X, r24
    1af2:	fe 01       	movw	r30, r28
    1af4:	eb 58       	subi	r30, 0x8B	; 139
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a6 e1       	ldi	r26, 0x16	; 22
    1afe:	b4 e4       	ldi	r27, 0x44	; 68
    1b00:	80 83       	st	Z, r24
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	a2 83       	std	Z+2, r26	; 0x02
    1b06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b08:	8e 01       	movw	r16, r28
    1b0a:	0f 58       	subi	r16, 0x8F	; 143
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	eb 58       	subi	r30, 0x8B	; 139
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	2b ea       	ldi	r18, 0xAB	; 171
    1b1e:	3a ea       	ldi	r19, 0xAA	; 170
    1b20:	4a e2       	ldi	r20, 0x2A	; 42
    1b22:	50 e4       	ldi	r21, 0x40	; 64
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	80 83       	st	Z, r24
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	a2 83       	std	Z+2, r26	; 0x02
    1b34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b36:	fe 01       	movw	r30, r28
    1b38:	ef 58       	subi	r30, 0x8F	; 143
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	34 f4       	brge	.+12     	; 0x1b60 <LCD_sendCommand+0x57a>
		__ticks = 1;
    1b54:	fe 01       	movw	r30, r28
    1b56:	e0 59       	subi	r30, 0x90	; 144
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	80 83       	st	Z, r24
    1b5e:	e0 c0       	rjmp	.+448    	; 0x1d20 <LCD_sendCommand+0x73a>
	else if (__tmp > 255)
    1b60:	fe 01       	movw	r30, r28
    1b62:	ef 58       	subi	r30, 0x8F	; 143
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	53 e4       	ldi	r21, 0x43	; 67
    1b76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	0c f0       	brlt	.+2      	; 0x1b80 <LCD_sendCommand+0x59a>
    1b7e:	c0 c0       	rjmp	.+384    	; 0x1d00 <LCD_sendCommand+0x71a>
	{
		_delay_ms(__us / 1000.0);
    1b80:	fe 01       	movw	r30, r28
    1b82:	eb 58       	subi	r30, 0x8B	; 139
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a e7       	ldi	r20, 0x7A	; 122
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e4 59       	subi	r30, 0x94	; 148
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 83       	st	Z, r24
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	a2 83       	std	Z+2, r26	; 0x02
    1baa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	8e 01       	movw	r16, r28
    1bae:	08 59       	subi	r16, 0x98	; 152
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e4 59       	subi	r30, 0x94	; 148
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	80 83       	st	Z, r24
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	a2 83       	std	Z+2, r26	; 0x02
    1bd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e8 59       	subi	r30, 0x98	; 152
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	44 f4       	brge	.+16     	; 0x1c08 <LCD_sendCommand+0x622>
		__ticks = 1;
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ea 59       	subi	r30, 0x9A	; 154
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
    1c06:	64 c0       	rjmp	.+200    	; 0x1cd0 <LCD_sendCommand+0x6ea>
	else if (__tmp > 65535)
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e8 59       	subi	r30, 0x98	; 152
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	0c f0       	brlt	.+2      	; 0x1c28 <LCD_sendCommand+0x642>
    1c26:	43 c0       	rjmp	.+134    	; 0x1cae <LCD_sendCommand+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e4 59       	subi	r30, 0x94	; 148
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	8e 01       	movw	r16, r28
    1c48:	0a 59       	subi	r16, 0x9A	; 154
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	f8 01       	movw	r30, r16
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
    1c5e:	1f c0       	rjmp	.+62     	; 0x1c9e <LCD_sendCommand+0x6b8>
    1c60:	fe 01       	movw	r30, r28
    1c62:	ec 59       	subi	r30, 0x9C	; 156
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	88 ec       	ldi	r24, 0xC8	; 200
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ec 59       	subi	r30, 0x9C	; 156
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_sendCommand+0x692>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ec 59       	subi	r30, 0x9C	; 156
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	de 01       	movw	r26, r28
    1c88:	aa 59       	subi	r26, 0x9A	; 154
    1c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ea 59       	subi	r30, 0x9A	; 154
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	11 96       	adiw	r26, 0x01	; 1
    1c9a:	9c 93       	st	X, r25
    1c9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ea 59       	subi	r30, 0x9A	; 154
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	d1 f6       	brne	.-76     	; 0x1c60 <LCD_sendCommand+0x67a>
    1cac:	4b c0       	rjmp	.+150    	; 0x1d44 <LCD_sendCommand+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	8e 01       	movw	r16, r28
    1cb0:	0a 59       	subi	r16, 0x9A	; 154
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e8 59       	subi	r30, 0x98	; 152
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	f8 01       	movw	r30, r16
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
    1cd0:	de 01       	movw	r26, r28
    1cd2:	ae 59       	subi	r26, 0x9E	; 158
    1cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ea 59       	subi	r30, 0x9A	; 154
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	11 96       	adiw	r26, 0x01	; 1
    1ce2:	9c 93       	st	X, r25
    1ce4:	8e 93       	st	-X, r24
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ee 59       	subi	r30, 0x9E	; 158
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_sendCommand+0x70a>
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ee 59       	subi	r30, 0x9E	; 158
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	22 c0       	rjmp	.+68     	; 0x1d44 <LCD_sendCommand+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d00:	8e 01       	movw	r16, r28
    1d02:	00 59       	subi	r16, 0x90	; 144
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	ef 58       	subi	r30, 0x8F	; 143
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	80 83       	st	Z, r24
    1d20:	de 01       	movw	r26, r28
    1d22:	af 59       	subi	r26, 0x9F	; 159
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e0 59       	subi	r30, 0x90	; 144
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d30:	fe 01       	movw	r30, r28
    1d32:	ef 59       	subi	r30, 0x9F	; 159
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 81       	ld	r24, Z
    1d38:	8a 95       	dec	r24
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_sendCommand+0x752>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ef 59       	subi	r30, 0x9F	; 159
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 83       	st	Z, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d44:	ab e3       	ldi	r26, 0x3B	; 59
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	eb e3       	ldi	r30, 0x3B	; 59
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	87 7f       	andi	r24, 0xF7	; 247
    1d50:	8c 93       	st	X, r24
    1d52:	fe 01       	movw	r30, r28
    1d54:	e3 5a       	subi	r30, 0xA3	; 163
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a6 e1       	ldi	r26, 0x16	; 22
    1d5e:	b4 e4       	ldi	r27, 0x44	; 68
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d68:	8e 01       	movw	r16, r28
    1d6a:	07 5a       	subi	r16, 0xA7	; 167
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e3 5a       	subi	r30, 0xA3	; 163
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	2b ea       	ldi	r18, 0xAB	; 171
    1d7e:	3a ea       	ldi	r19, 0xAA	; 170
    1d80:	4a e2       	ldi	r20, 0x2A	; 42
    1d82:	50 e4       	ldi	r21, 0x40	; 64
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 83       	st	Z, r24
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	a2 83       	std	Z+2, r26	; 0x02
    1d94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d96:	fe 01       	movw	r30, r28
    1d98:	e7 5a       	subi	r30, 0xA7	; 167
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	34 f4       	brge	.+12     	; 0x1dc0 <LCD_sendCommand+0x7da>
		__ticks = 1;
    1db4:	fe 01       	movw	r30, r28
    1db6:	e8 5a       	subi	r30, 0xA8	; 168
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	80 83       	st	Z, r24
    1dbe:	e0 c0       	rjmp	.+448    	; 0x1f80 <LCD_sendCommand+0x99a>
	else if (__tmp > 255)
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e7 5a       	subi	r30, 0xA7	; 167
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	53 e4       	ldi	r21, 0x43	; 67
    1dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	0c f0       	brlt	.+2      	; 0x1de0 <LCD_sendCommand+0x7fa>
    1dde:	c0 c0       	rjmp	.+384    	; 0x1f60 <LCD_sendCommand+0x97a>
	{
		_delay_ms(__us / 1000.0);
    1de0:	fe 01       	movw	r30, r28
    1de2:	e3 5a       	subi	r30, 0xA3	; 163
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a e7       	ldi	r20, 0x7A	; 122
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ec 5a       	subi	r30, 0xAC	; 172
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 83       	st	Z, r24
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	a2 83       	std	Z+2, r26	; 0x02
    1e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	00 5b       	subi	r16, 0xB0	; 176
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	fe 01       	movw	r30, r28
    1e14:	ec 5a       	subi	r30, 0xAC	; 172
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a ef       	ldi	r20, 0xFA	; 250
    1e26:	54 e4       	ldi	r21, 0x44	; 68
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	f8 01       	movw	r30, r16
    1e32:	80 83       	st	Z, r24
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	a2 83       	std	Z+2, r26	; 0x02
    1e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e0 5b       	subi	r30, 0xB0	; 176
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	44 f4       	brge	.+16     	; 0x1e68 <LCD_sendCommand+0x882>
		__ticks = 1;
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e2 5b       	subi	r30, 0xB2	; 178
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	64 c0       	rjmp	.+200    	; 0x1f30 <LCD_sendCommand+0x94a>
	else if (__tmp > 65535)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e0 5b       	subi	r30, 0xB0	; 176
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <LCD_sendCommand+0x8a2>
    1e86:	43 c0       	rjmp	.+134    	; 0x1f0e <LCD_sendCommand+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ec 5a       	subi	r30, 0xAC	; 172
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8e 01       	movw	r16, r28
    1ea8:	02 5b       	subi	r16, 0xB2	; 178
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	f8 01       	movw	r30, r16
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	1f c0       	rjmp	.+62     	; 0x1efe <LCD_sendCommand+0x918>
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e4 5b       	subi	r30, 0xB4	; 180
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	88 ec       	ldi	r24, 0xC8	; 200
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e4 5b       	subi	r30, 0xB4	; 180
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_sendCommand+0x8f2>
    1edc:	fe 01       	movw	r30, r28
    1ede:	e4 5b       	subi	r30, 0xB4	; 180
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	91 83       	std	Z+1, r25	; 0x01
    1ee4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee6:	de 01       	movw	r26, r28
    1ee8:	a2 5b       	subi	r26, 0xB2	; 178
    1eea:	bf 4f       	sbci	r27, 0xFF	; 255
    1eec:	fe 01       	movw	r30, r28
    1eee:	e2 5b       	subi	r30, 0xB2	; 178
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	11 96       	adiw	r26, 0x01	; 1
    1efa:	9c 93       	st	X, r25
    1efc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	fe 01       	movw	r30, r28
    1f00:	e2 5b       	subi	r30, 0xB2	; 178
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	d1 f6       	brne	.-76     	; 0x1ec0 <LCD_sendCommand+0x8da>
    1f0c:	4b c0       	rjmp	.+150    	; 0x1fa4 <LCD_sendCommand+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	8e 01       	movw	r16, r28
    1f10:	02 5b       	subi	r16, 0xB2	; 178
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	e0 5b       	subi	r30, 0xB0	; 176
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	de 01       	movw	r26, r28
    1f32:	a6 5b       	subi	r26, 0xB6	; 182
    1f34:	bf 4f       	sbci	r27, 0xFF	; 255
    1f36:	fe 01       	movw	r30, r28
    1f38:	e2 5b       	subi	r30, 0xB2	; 178
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	11 96       	adiw	r26, 0x01	; 1
    1f42:	9c 93       	st	X, r25
    1f44:	8e 93       	st	-X, r24
    1f46:	fe 01       	movw	r30, r28
    1f48:	e6 5b       	subi	r30, 0xB6	; 182
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_sendCommand+0x96a>
    1f54:	fe 01       	movw	r30, r28
    1f56:	e6 5b       	subi	r30, 0xB6	; 182
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	22 c0       	rjmp	.+68     	; 0x1fa4 <LCD_sendCommand+0x9be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f60:	8e 01       	movw	r16, r28
    1f62:	08 5a       	subi	r16, 0xA8	; 168
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	fe 01       	movw	r30, r28
    1f68:	e7 5a       	subi	r30, 0xA7	; 167
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	80 83       	st	Z, r24
    1f80:	de 01       	movw	r26, r28
    1f82:	a7 5b       	subi	r26, 0xB7	; 183
    1f84:	bf 4f       	sbci	r27, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	e8 5a       	subi	r30, 0xA8	; 168
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f90:	fe 01       	movw	r30, r28
    1f92:	e7 5b       	subi	r30, 0xB7	; 183
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	8a 95       	dec	r24
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_sendCommand+0x9b2>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e7 5b       	subi	r30, 0xB7	; 183
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1fa4:	ab e3       	ldi	r26, 0x3B	; 59
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	eb e3       	ldi	r30, 0x3B	; 59
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	88 60       	ori	r24, 0x08	; 8
    1fb0:	8c 93       	st	X, r24
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	eb 5b       	subi	r30, 0xBB	; 187
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a6 e1       	ldi	r26, 0x16	; 22
    1fbe:	b4 e4       	ldi	r27, 0x44	; 68
    1fc0:	80 83       	st	Z, r24
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	a2 83       	std	Z+2, r26	; 0x02
    1fc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fc8:	8e 01       	movw	r16, r28
    1fca:	0f 5b       	subi	r16, 0xBF	; 191
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	fe 01       	movw	r30, r28
    1fd0:	eb 5b       	subi	r30, 0xBB	; 187
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	2b ea       	ldi	r18, 0xAB	; 171
    1fde:	3a ea       	ldi	r19, 0xAA	; 170
    1fe0:	4a e2       	ldi	r20, 0x2A	; 42
    1fe2:	50 e4       	ldi	r21, 0x40	; 64
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	a2 83       	std	Z+2, r26	; 0x02
    1ff4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ef 5b       	subi	r30, 0xBF	; 191
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	34 f4       	brge	.+12     	; 0x2020 <LCD_sendCommand+0xa3a>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	fe 01       	movw	r30, r28
    2018:	e0 5c       	subi	r30, 0xC0	; 192
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 83       	st	Z, r24
    201e:	9d c0       	rjmp	.+314    	; 0x215a <LCD_sendCommand+0xb74>
	else if (__tmp > 255)
    2020:	fe 01       	movw	r30, r28
    2022:	ef 5b       	subi	r30, 0xBF	; 191
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	53 e4       	ldi	r21, 0x43	; 67
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	0c f0       	brlt	.+2      	; 0x2040 <LCD_sendCommand+0xa5a>
    203e:	7e c0       	rjmp	.+252    	; 0x213c <LCD_sendCommand+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2040:	fe 01       	movw	r30, r28
    2042:	eb 5b       	subi	r30, 0xBB	; 187
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a e7       	ldi	r20, 0x7A	; 122
    2054:	54 e4       	ldi	r21, 0x44	; 68
    2056:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8c af       	std	Y+60, r24	; 0x3c
    2060:	9d af       	std	Y+61, r25	; 0x3d
    2062:	ae af       	std	Y+62, r26	; 0x3e
    2064:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	6c ad       	ldd	r22, Y+60	; 0x3c
    2068:	7d ad       	ldd	r23, Y+61	; 0x3d
    206a:	8e ad       	ldd	r24, Y+62	; 0x3e
    206c:	9f ad       	ldd	r25, Y+63	; 0x3f
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a ef       	ldi	r20, 0xFA	; 250
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	88 af       	std	Y+56, r24	; 0x38
    2080:	99 af       	std	Y+57, r25	; 0x39
    2082:	aa af       	std	Y+58, r26	; 0x3a
    2084:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2086:	68 ad       	ldd	r22, Y+56	; 0x38
    2088:	79 ad       	ldd	r23, Y+57	; 0x39
    208a:	8a ad       	ldd	r24, Y+58	; 0x3a
    208c:	9b ad       	ldd	r25, Y+59	; 0x3b
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	2c f4       	brge	.+10     	; 0x20a8 <LCD_sendCommand+0xac2>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9f ab       	std	Y+55, r25	; 0x37
    20a4:	8e ab       	std	Y+54, r24	; 0x36
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <LCD_sendCommand+0xb40>
	else if (__tmp > 65535)
    20a8:	68 ad       	ldd	r22, Y+56	; 0x38
    20aa:	79 ad       	ldd	r23, Y+57	; 0x39
    20ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    20ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	4c f5       	brge	.+82     	; 0x2112 <LCD_sendCommand+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    20c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    20c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9f ab       	std	Y+55, r25	; 0x37
    20e6:	8e ab       	std	Y+54, r24	; 0x36
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <LCD_sendCommand+0xb22>
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9d ab       	std	Y+53, r25	; 0x35
    20f0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20f2:	8c a9       	ldd	r24, Y+52	; 0x34
    20f4:	9d a9       	ldd	r25, Y+53	; 0x35
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <LCD_sendCommand+0xb10>
    20fa:	9d ab       	std	Y+53, r25	; 0x35
    20fc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8e a9       	ldd	r24, Y+54	; 0x36
    2100:	9f a9       	ldd	r25, Y+55	; 0x37
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9f ab       	std	Y+55, r25	; 0x37
    2106:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8e a9       	ldd	r24, Y+54	; 0x36
    210a:	9f a9       	ldd	r25, Y+55	; 0x37
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <LCD_sendCommand+0xb04>
    2110:	2d c0       	rjmp	.+90     	; 0x216c <LCD_sendCommand+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	68 ad       	ldd	r22, Y+56	; 0x38
    2114:	79 ad       	ldd	r23, Y+57	; 0x39
    2116:	8a ad       	ldd	r24, Y+58	; 0x3a
    2118:	9b ad       	ldd	r25, Y+59	; 0x3b
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9f ab       	std	Y+55, r25	; 0x37
    2124:	8e ab       	std	Y+54, r24	; 0x36
    2126:	8e a9       	ldd	r24, Y+54	; 0x36
    2128:	9f a9       	ldd	r25, Y+55	; 0x37
    212a:	9b ab       	std	Y+51, r25	; 0x33
    212c:	8a ab       	std	Y+50, r24	; 0x32
    212e:	8a a9       	ldd	r24, Y+50	; 0x32
    2130:	9b a9       	ldd	r25, Y+51	; 0x33
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_sendCommand+0xb4c>
    2136:	9b ab       	std	Y+51, r25	; 0x33
    2138:	8a ab       	std	Y+50, r24	; 0x32
    213a:	18 c0       	rjmp	.+48     	; 0x216c <LCD_sendCommand+0xb86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    213c:	fe 01       	movw	r30, r28
    213e:	ef 5b       	subi	r30, 0xBF	; 191
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	fe 01       	movw	r30, r28
    2154:	e0 5c       	subi	r30, 0xC0	; 192
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 83       	st	Z, r24
    215a:	fe 01       	movw	r30, r28
    215c:	e0 5c       	subi	r30, 0xC0	; 192
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2164:	89 a9       	ldd	r24, Y+49	; 0x31
    2166:	8a 95       	dec	r24
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_sendCommand+0xb80>
    216a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    216c:	ab e3       	ldi	r26, 0x3B	; 59
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	eb e3       	ldi	r30, 0x3B	; 59
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	28 2f       	mov	r18, r24
    2178:	2f 70       	andi	r18, 0x0F	; 15
    217a:	fe 01       	movw	r30, r28
    217c:	e7 55       	subi	r30, 0x57	; 87
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	82 95       	swap	r24
    2188:	92 95       	swap	r25
    218a:	90 7f       	andi	r25, 0xF0	; 240
    218c:	98 27       	eor	r25, r24
    218e:	80 7f       	andi	r24, 0xF0	; 240
    2190:	98 27       	eor	r25, r24
    2192:	82 2b       	or	r24, r18
    2194:	8c 93       	st	X, r24
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a6 e1       	ldi	r26, 0x16	; 22
    219c:	b4 e4       	ldi	r27, 0x44	; 68
    219e:	8d a7       	std	Y+45, r24	; 0x2d
    21a0:	9e a7       	std	Y+46, r25	; 0x2e
    21a2:	af a7       	std	Y+47, r26	; 0x2f
    21a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    21a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	98 a9       	ldd	r25, Y+48	; 0x30
    21ae:	2b ea       	ldi	r18, 0xAB	; 171
    21b0:	3a ea       	ldi	r19, 0xAA	; 170
    21b2:	4a e2       	ldi	r20, 0x2A	; 42
    21b4:	50 e4       	ldi	r21, 0x40	; 64
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	89 a7       	std	Y+41, r24	; 0x29
    21c0:	9a a7       	std	Y+42, r25	; 0x2a
    21c2:	ab a7       	std	Y+43, r26	; 0x2b
    21c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    21c6:	69 a5       	ldd	r22, Y+41	; 0x29
    21c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    21cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	1c f4       	brge	.+6      	; 0x21e4 <LCD_sendCommand+0xbfe>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	88 a7       	std	Y+40, r24	; 0x28
    21e2:	91 c0       	rjmp	.+290    	; 0x2306 <LCD_sendCommand+0xd20>
	else if (__tmp > 255)
    21e4:	69 a5       	ldd	r22, Y+41	; 0x29
    21e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    21e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4f e7       	ldi	r20, 0x7F	; 127
    21f2:	53 e4       	ldi	r21, 0x43	; 67
    21f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	0c f0       	brlt	.+2      	; 0x21fe <LCD_sendCommand+0xc18>
    21fc:	7b c0       	rjmp	.+246    	; 0x22f4 <LCD_sendCommand+0xd0e>
	{
		_delay_ms(__us / 1000.0);
    21fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2200:	7e a5       	ldd	r23, Y+46	; 0x2e
    2202:	8f a5       	ldd	r24, Y+47	; 0x2f
    2204:	98 a9       	ldd	r25, Y+48	; 0x30
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a e7       	ldi	r20, 0x7A	; 122
    220c:	54 e4       	ldi	r21, 0x44	; 68
    220e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8c a3       	std	Y+36, r24	; 0x24
    2218:	9d a3       	std	Y+37, r25	; 0x25
    221a:	ae a3       	std	Y+38, r26	; 0x26
    221c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6c a1       	ldd	r22, Y+36	; 0x24
    2220:	7d a1       	ldd	r23, Y+37	; 0x25
    2222:	8e a1       	ldd	r24, Y+38	; 0x26
    2224:	9f a1       	ldd	r25, Y+39	; 0x27
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a ef       	ldi	r20, 0xFA	; 250
    222c:	54 e4       	ldi	r21, 0x44	; 68
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	88 a3       	std	Y+32, r24	; 0x20
    2238:	99 a3       	std	Y+33, r25	; 0x21
    223a:	aa a3       	std	Y+34, r26	; 0x22
    223c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    223e:	68 a1       	ldd	r22, Y+32	; 0x20
    2240:	79 a1       	ldd	r23, Y+33	; 0x21
    2242:	8a a1       	ldd	r24, Y+34	; 0x22
    2244:	9b a1       	ldd	r25, Y+35	; 0x23
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <LCD_sendCommand+0xc7a>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9f 8f       	std	Y+31, r25	; 0x1f
    225c:	8e 8f       	std	Y+30, r24	; 0x1e
    225e:	3f c0       	rjmp	.+126    	; 0x22de <LCD_sendCommand+0xcf8>
	else if (__tmp > 65535)
    2260:	68 a1       	ldd	r22, Y+32	; 0x20
    2262:	79 a1       	ldd	r23, Y+33	; 0x21
    2264:	8a a1       	ldd	r24, Y+34	; 0x22
    2266:	9b a1       	ldd	r25, Y+35	; 0x23
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <LCD_sendCommand+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6c a1       	ldd	r22, Y+36	; 0x24
    227a:	7d a1       	ldd	r23, Y+37	; 0x25
    227c:	8e a1       	ldd	r24, Y+38	; 0x26
    227e:	9f a1       	ldd	r25, Y+39	; 0x27
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9f 8f       	std	Y+31, r25	; 0x1f
    229e:	8e 8f       	std	Y+30, r24	; 0x1e
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <LCD_sendCommand+0xcda>
    22a2:	88 ec       	ldi	r24, 0xC8	; 200
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9d 8f       	std	Y+29, r25	; 0x1d
    22a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_sendCommand+0xcc8>
    22b2:	9d 8f       	std	Y+29, r25	; 0x1d
    22b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9f 8f       	std	Y+31, r25	; 0x1f
    22be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <LCD_sendCommand+0xcbc>
    22c8:	24 c0       	rjmp	.+72     	; 0x2312 <LCD_sendCommand+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	68 a1       	ldd	r22, Y+32	; 0x20
    22cc:	79 a1       	ldd	r23, Y+33	; 0x21
    22ce:	8a a1       	ldd	r24, Y+34	; 0x22
    22d0:	9b a1       	ldd	r25, Y+35	; 0x23
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9f 8f       	std	Y+31, r25	; 0x1f
    22dc:	8e 8f       	std	Y+30, r24	; 0x1e
    22de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22e2:	9b 8f       	std	Y+27, r25	; 0x1b
    22e4:	8a 8f       	std	Y+26, r24	; 0x1a
    22e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_sendCommand+0xd04>
    22ee:	9b 8f       	std	Y+27, r25	; 0x1b
    22f0:	8a 8f       	std	Y+26, r24	; 0x1a
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <LCD_sendCommand+0xd2c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22f4:	69 a5       	ldd	r22, Y+41	; 0x29
    22f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    22f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	88 a7       	std	Y+40, r24	; 0x28
    2306:	88 a5       	ldd	r24, Y+40	; 0x28
    2308:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    230a:	89 8d       	ldd	r24, Y+25	; 0x19
    230c:	8a 95       	dec	r24
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_sendCommand+0xd26>
    2310:	89 8f       	std	Y+25, r24	; 0x19
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2312:	ab e3       	ldi	r26, 0x3B	; 59
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	eb e3       	ldi	r30, 0x3B	; 59
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	87 7f       	andi	r24, 0xF7	; 247
    231e:	8c 93       	st	X, r24
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a6 e1       	ldi	r26, 0x16	; 22
    2326:	b4 e4       	ldi	r27, 0x44	; 68
    2328:	8d 8b       	std	Y+21, r24	; 0x15
    232a:	9e 8b       	std	Y+22, r25	; 0x16
    232c:	af 8b       	std	Y+23, r26	; 0x17
    232e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	2b ea       	ldi	r18, 0xAB	; 171
    233a:	3a ea       	ldi	r19, 0xAA	; 170
    233c:	4a e2       	ldi	r20, 0x2A	; 42
    233e:	50 e4       	ldi	r21, 0x40	; 64
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	89 8b       	std	Y+17, r24	; 0x11
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	ab 8b       	std	Y+19, r26	; 0x13
    234e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2350:	69 89       	ldd	r22, Y+17	; 0x11
    2352:	7a 89       	ldd	r23, Y+18	; 0x12
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	1c f4       	brge	.+6      	; 0x236e <LCD_sendCommand+0xd88>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	88 8b       	std	Y+16, r24	; 0x10
    236c:	91 c0       	rjmp	.+290    	; 0x2490 <LCD_sendCommand+0xeaa>
	else if (__tmp > 255)
    236e:	69 89       	ldd	r22, Y+17	; 0x11
    2370:	7a 89       	ldd	r23, Y+18	; 0x12
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	53 e4       	ldi	r21, 0x43	; 67
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	0c f0       	brlt	.+2      	; 0x2388 <LCD_sendCommand+0xda2>
    2386:	7b c0       	rjmp	.+246    	; 0x247e <LCD_sendCommand+0xe98>
	{
		_delay_ms(__us / 1000.0);
    2388:	6d 89       	ldd	r22, Y+21	; 0x15
    238a:	7e 89       	ldd	r23, Y+22	; 0x16
    238c:	8f 89       	ldd	r24, Y+23	; 0x17
    238e:	98 8d       	ldd	r25, Y+24	; 0x18
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a e7       	ldi	r20, 0x7A	; 122
    2396:	54 e4       	ldi	r21, 0x44	; 68
    2398:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	8c 87       	std	Y+12, r24	; 0x0c
    23a2:	9d 87       	std	Y+13, r25	; 0x0d
    23a4:	ae 87       	std	Y+14, r26	; 0x0e
    23a6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    23aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    23ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4a ef       	ldi	r20, 0xFA	; 250
    23b6:	54 e4       	ldi	r21, 0x44	; 68
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	88 87       	std	Y+8, r24	; 0x08
    23c2:	99 87       	std	Y+9, r25	; 0x09
    23c4:	aa 87       	std	Y+10, r26	; 0x0a
    23c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23c8:	68 85       	ldd	r22, Y+8	; 0x08
    23ca:	79 85       	ldd	r23, Y+9	; 0x09
    23cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e8       	ldi	r20, 0x80	; 128
    23d6:	5f e3       	ldi	r21, 0x3F	; 63
    23d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23dc:	88 23       	and	r24, r24
    23de:	2c f4       	brge	.+10     	; 0x23ea <LCD_sendCommand+0xe04>
		__ticks = 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9f 83       	std	Y+7, r25	; 0x07
    23e6:	8e 83       	std	Y+6, r24	; 0x06
    23e8:	3f c0       	rjmp	.+126    	; 0x2468 <LCD_sendCommand+0xe82>
	else if (__tmp > 65535)
    23ea:	68 85       	ldd	r22, Y+8	; 0x08
    23ec:	79 85       	ldd	r23, Y+9	; 0x09
    23ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	4c f5       	brge	.+82     	; 0x2454 <LCD_sendCommand+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	6c 85       	ldd	r22, Y+12	; 0x0c
    2404:	7d 85       	ldd	r23, Y+13	; 0x0d
    2406:	8e 85       	ldd	r24, Y+14	; 0x0e
    2408:	9f 85       	ldd	r25, Y+15	; 0x0f
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 e4       	ldi	r21, 0x41	; 65
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9f 83       	std	Y+7, r25	; 0x07
    2428:	8e 83       	std	Y+6, r24	; 0x06
    242a:	0f c0       	rjmp	.+30     	; 0x244a <LCD_sendCommand+0xe64>
    242c:	88 ec       	ldi	r24, 0xC8	; 200
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9d 83       	std	Y+5, r25	; 0x05
    2432:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	9d 81       	ldd	r25, Y+5	; 0x05
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_sendCommand+0xe52>
    243c:	9d 83       	std	Y+5, r25	; 0x05
    243e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	8e 81       	ldd	r24, Y+6	; 0x06
    2442:	9f 81       	ldd	r25, Y+7	; 0x07
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	9f 83       	std	Y+7, r25	; 0x07
    2448:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	8e 81       	ldd	r24, Y+6	; 0x06
    244c:	9f 81       	ldd	r25, Y+7	; 0x07
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	69 f7       	brne	.-38     	; 0x242c <LCD_sendCommand+0xe46>
    2452:	24 c0       	rjmp	.+72     	; 0x249c <LCD_sendCommand+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	68 85       	ldd	r22, Y+8	; 0x08
    2456:	79 85       	ldd	r23, Y+9	; 0x09
    2458:	8a 85       	ldd	r24, Y+10	; 0x0a
    245a:	9b 85       	ldd	r25, Y+11	; 0x0b
    245c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9f 83       	std	Y+7, r25	; 0x07
    2466:	8e 83       	std	Y+6, r24	; 0x06
    2468:	8e 81       	ldd	r24, Y+6	; 0x06
    246a:	9f 81       	ldd	r25, Y+7	; 0x07
    246c:	9b 83       	std	Y+3, r25	; 0x03
    246e:	8a 83       	std	Y+2, r24	; 0x02
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <LCD_sendCommand+0xe8e>
    2478:	9b 83       	std	Y+3, r25	; 0x03
    247a:	8a 83       	std	Y+2, r24	; 0x02
    247c:	0f c0       	rjmp	.+30     	; 0x249c <LCD_sendCommand+0xeb6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    247e:	69 89       	ldd	r22, Y+17	; 0x11
    2480:	7a 89       	ldd	r23, Y+18	; 0x12
    2482:	8b 89       	ldd	r24, Y+19	; 0x13
    2484:	9c 89       	ldd	r25, Y+20	; 0x14
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	88 8b       	std	Y+16, r24	; 0x10
    2490:	88 89       	ldd	r24, Y+16	; 0x10
    2492:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	8a 95       	dec	r24
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_sendCommand+0xeb0>
    249a:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_us(600); /* delay for processing Th = 13ns */
#endif
}
    249c:	c7 55       	subi	r28, 0x57	; 87
    249e:	df 4f       	sbci	r29, 0xFF	; 255
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	08 95       	ret

000024b4 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	c9 5a       	subi	r28, 0xA9	; 169
    24c2:	d0 40       	sbci	r29, 0x00	; 0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 55       	subi	r30, 0x57	; 87
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    24d6:	ab e3       	ldi	r26, 0x3B	; 59
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	eb e3       	ldi	r30, 0x3B	; 59
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	82 60       	ori	r24, 0x02	; 2
    24e2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    24e4:	ab e3       	ldi	r26, 0x3B	; 59
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	eb e3       	ldi	r30, 0x3B	; 59
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8b 7f       	andi	r24, 0xFB	; 251
    24f0:	8c 93       	st	X, r24
    24f2:	fe 01       	movw	r30, r28
    24f4:	eb 55       	subi	r30, 0x5B	; 91
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a6 e1       	ldi	r26, 0x16	; 22
    24fe:	b4 e4       	ldi	r27, 0x44	; 68
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2508:	8e 01       	movw	r16, r28
    250a:	0f 55       	subi	r16, 0x5F	; 95
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	fe 01       	movw	r30, r28
    2510:	eb 55       	subi	r30, 0x5B	; 91
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	2b ea       	ldi	r18, 0xAB	; 171
    251e:	3a ea       	ldi	r19, 0xAA	; 170
    2520:	4a e2       	ldi	r20, 0x2A	; 42
    2522:	50 e4       	ldi	r21, 0x40	; 64
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	80 83       	st	Z, r24
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	a2 83       	std	Z+2, r26	; 0x02
    2534:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2536:	fe 01       	movw	r30, r28
    2538:	ef 55       	subi	r30, 0x5F	; 95
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	34 f4       	brge	.+12     	; 0x2560 <LCD_displayCharacter+0xac>
		__ticks = 1;
    2554:	fe 01       	movw	r30, r28
    2556:	e0 56       	subi	r30, 0x60	; 96
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	80 83       	st	Z, r24
    255e:	e0 c0       	rjmp	.+448    	; 0x2720 <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    2560:	fe 01       	movw	r30, r28
    2562:	ef 55       	subi	r30, 0x5F	; 95
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	53 e4       	ldi	r21, 0x43	; 67
    2576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	0c f0       	brlt	.+2      	; 0x2580 <LCD_displayCharacter+0xcc>
    257e:	c0 c0       	rjmp	.+384    	; 0x2700 <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    2580:	fe 01       	movw	r30, r28
    2582:	eb 55       	subi	r30, 0x5B	; 91
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	4a e7       	ldi	r20, 0x7A	; 122
    2594:	54 e4       	ldi	r21, 0x44	; 68
    2596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	fe 01       	movw	r30, r28
    25a0:	e4 56       	subi	r30, 0x64	; 100
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 83       	st	Z, r24
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	a2 83       	std	Z+2, r26	; 0x02
    25aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	8e 01       	movw	r16, r28
    25ae:	08 56       	subi	r16, 0x68	; 104
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	e4 56       	subi	r30, 0x64	; 100
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a ef       	ldi	r20, 0xFA	; 250
    25c6:	54 e4       	ldi	r21, 0x44	; 68
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	f8 01       	movw	r30, r16
    25d2:	80 83       	st	Z, r24
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	a2 83       	std	Z+2, r26	; 0x02
    25d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25da:	fe 01       	movw	r30, r28
    25dc:	e8 56       	subi	r30, 0x68	; 104
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f4:	88 23       	and	r24, r24
    25f6:	44 f4       	brge	.+16     	; 0x2608 <LCD_displayCharacter+0x154>
		__ticks = 1;
    25f8:	fe 01       	movw	r30, r28
    25fa:	ea 56       	subi	r30, 0x6A	; 106
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	64 c0       	rjmp	.+200    	; 0x26d0 <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    2608:	fe 01       	movw	r30, r28
    260a:	e8 56       	subi	r30, 0x68	; 104
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <LCD_displayCharacter+0x174>
    2626:	43 c0       	rjmp	.+134    	; 0x26ae <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	fe 01       	movw	r30, r28
    262a:	e4 56       	subi	r30, 0x64	; 100
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8e 01       	movw	r16, r28
    2648:	0a 56       	subi	r16, 0x6A	; 106
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
    264c:	bc 01       	movw	r22, r24
    264e:	cd 01       	movw	r24, r26
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	f8 01       	movw	r30, r16
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
    265e:	1f c0       	rjmp	.+62     	; 0x269e <LCD_displayCharacter+0x1ea>
    2660:	fe 01       	movw	r30, r28
    2662:	ec 56       	subi	r30, 0x6C	; 108
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    266e:	fe 01       	movw	r30, r28
    2670:	ec 56       	subi	r30, 0x6C	; 108
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_displayCharacter+0x1c4>
    267c:	fe 01       	movw	r30, r28
    267e:	ec 56       	subi	r30, 0x6C	; 108
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	de 01       	movw	r26, r28
    2688:	aa 56       	subi	r26, 0x6A	; 106
    268a:	bf 4f       	sbci	r27, 0xFF	; 255
    268c:	fe 01       	movw	r30, r28
    268e:	ea 56       	subi	r30, 0x6A	; 106
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	11 96       	adiw	r26, 0x01	; 1
    269a:	9c 93       	st	X, r25
    269c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	fe 01       	movw	r30, r28
    26a0:	ea 56       	subi	r30, 0x6A	; 106
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	d1 f6       	brne	.-76     	; 0x2660 <LCD_displayCharacter+0x1ac>
    26ac:	4b c0       	rjmp	.+150    	; 0x2744 <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	8e 01       	movw	r16, r28
    26b0:	0a 56       	subi	r16, 0x6A	; 106
    26b2:	1f 4f       	sbci	r17, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e8 56       	subi	r30, 0x68	; 104
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	f8 01       	movw	r30, r16
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
    26d0:	de 01       	movw	r26, r28
    26d2:	ae 56       	subi	r26, 0x6E	; 110
    26d4:	bf 4f       	sbci	r27, 0xFF	; 255
    26d6:	fe 01       	movw	r30, r28
    26d8:	ea 56       	subi	r30, 0x6A	; 106
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	11 96       	adiw	r26, 0x01	; 1
    26e2:	9c 93       	st	X, r25
    26e4:	8e 93       	st	-X, r24
    26e6:	fe 01       	movw	r30, r28
    26e8:	ee 56       	subi	r30, 0x6E	; 110
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_displayCharacter+0x23c>
    26f4:	fe 01       	movw	r30, r28
    26f6:	ee 56       	subi	r30, 0x6E	; 110
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	22 c0       	rjmp	.+68     	; 0x2744 <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2700:	8e 01       	movw	r16, r28
    2702:	00 56       	subi	r16, 0x60	; 96
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	ef 55       	subi	r30, 0x5F	; 95
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	80 83       	st	Z, r24
    2720:	de 01       	movw	r26, r28
    2722:	af 56       	subi	r26, 0x6F	; 111
    2724:	bf 4f       	sbci	r27, 0xFF	; 255
    2726:	fe 01       	movw	r30, r28
    2728:	e0 56       	subi	r30, 0x60	; 96
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2730:	fe 01       	movw	r30, r28
    2732:	ef 56       	subi	r30, 0x6F	; 111
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	8a 95       	dec	r24
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_displayCharacter+0x284>
    273c:	fe 01       	movw	r30, r28
    273e:	ef 56       	subi	r30, 0x6F	; 111
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2744:	ab e3       	ldi	r26, 0x3B	; 59
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	eb e3       	ldi	r30, 0x3B	; 59
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	88 60       	ori	r24, 0x08	; 8
    2750:	8c 93       	st	X, r24
    2752:	fe 01       	movw	r30, r28
    2754:	e3 57       	subi	r30, 0x73	; 115
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	a6 e1       	ldi	r26, 0x16	; 22
    275e:	b4 e4       	ldi	r27, 0x44	; 68
    2760:	80 83       	st	Z, r24
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	a2 83       	std	Z+2, r26	; 0x02
    2766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2768:	8e 01       	movw	r16, r28
    276a:	07 57       	subi	r16, 0x77	; 119
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	e3 57       	subi	r30, 0x73	; 115
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	2b ea       	ldi	r18, 0xAB	; 171
    277e:	3a ea       	ldi	r19, 0xAA	; 170
    2780:	4a e2       	ldi	r20, 0x2A	; 42
    2782:	50 e4       	ldi	r21, 0x40	; 64
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	f8 01       	movw	r30, r16
    278e:	80 83       	st	Z, r24
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	a2 83       	std	Z+2, r26	; 0x02
    2794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2796:	fe 01       	movw	r30, r28
    2798:	e7 57       	subi	r30, 0x77	; 119
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	34 f4       	brge	.+12     	; 0x27c0 <LCD_displayCharacter+0x30c>
		__ticks = 1;
    27b4:	fe 01       	movw	r30, r28
    27b6:	e8 57       	subi	r30, 0x78	; 120
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	80 83       	st	Z, r24
    27be:	e0 c0       	rjmp	.+448    	; 0x2980 <LCD_displayCharacter+0x4cc>
	else if (__tmp > 255)
    27c0:	fe 01       	movw	r30, r28
    27c2:	e7 57       	subi	r30, 0x77	; 119
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	53 e4       	ldi	r21, 0x43	; 67
    27d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27da:	18 16       	cp	r1, r24
    27dc:	0c f0       	brlt	.+2      	; 0x27e0 <LCD_displayCharacter+0x32c>
    27de:	c0 c0       	rjmp	.+384    	; 0x2960 <LCD_displayCharacter+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    27e0:	fe 01       	movw	r30, r28
    27e2:	e3 57       	subi	r30, 0x73	; 115
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	4a e7       	ldi	r20, 0x7A	; 122
    27f4:	54 e4       	ldi	r21, 0x44	; 68
    27f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	fe 01       	movw	r30, r28
    2800:	ec 57       	subi	r30, 0x7C	; 124
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 83       	st	Z, r24
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	a2 83       	std	Z+2, r26	; 0x02
    280a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	8e 01       	movw	r16, r28
    280e:	00 58       	subi	r16, 0x80	; 128
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	fe 01       	movw	r30, r28
    2814:	ec 57       	subi	r30, 0x7C	; 124
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a ef       	ldi	r20, 0xFA	; 250
    2826:	54 e4       	ldi	r21, 0x44	; 68
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	80 83       	st	Z, r24
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	a2 83       	std	Z+2, r26	; 0x02
    2838:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    283a:	fe 01       	movw	r30, r28
    283c:	e0 58       	subi	r30, 0x80	; 128
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	44 f4       	brge	.+16     	; 0x2868 <LCD_displayCharacter+0x3b4>
		__ticks = 1;
    2858:	fe 01       	movw	r30, r28
    285a:	e2 58       	subi	r30, 0x82	; 130
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	64 c0       	rjmp	.+200    	; 0x2930 <LCD_displayCharacter+0x47c>
	else if (__tmp > 65535)
    2868:	fe 01       	movw	r30, r28
    286a:	e0 58       	subi	r30, 0x80	; 128
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	0c f0       	brlt	.+2      	; 0x2888 <LCD_displayCharacter+0x3d4>
    2886:	43 c0       	rjmp	.+134    	; 0x290e <LCD_displayCharacter+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	fe 01       	movw	r30, r28
    288a:	ec 57       	subi	r30, 0x7C	; 124
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8e 01       	movw	r16, r28
    28a8:	02 58       	subi	r16, 0x82	; 130
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	f8 01       	movw	r30, r16
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	1f c0       	rjmp	.+62     	; 0x28fe <LCD_displayCharacter+0x44a>
    28c0:	fe 01       	movw	r30, r28
    28c2:	e4 58       	subi	r30, 0x84	; 132
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28ce:	fe 01       	movw	r30, r28
    28d0:	e4 58       	subi	r30, 0x84	; 132
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_displayCharacter+0x424>
    28dc:	fe 01       	movw	r30, r28
    28de:	e4 58       	subi	r30, 0x84	; 132
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	de 01       	movw	r26, r28
    28e8:	a2 58       	subi	r26, 0x82	; 130
    28ea:	bf 4f       	sbci	r27, 0xFF	; 255
    28ec:	fe 01       	movw	r30, r28
    28ee:	e2 58       	subi	r30, 0x82	; 130
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	11 96       	adiw	r26, 0x01	; 1
    28fa:	9c 93       	st	X, r25
    28fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	fe 01       	movw	r30, r28
    2900:	e2 58       	subi	r30, 0x82	; 130
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	d1 f6       	brne	.-76     	; 0x28c0 <LCD_displayCharacter+0x40c>
    290c:	4b c0       	rjmp	.+150    	; 0x29a4 <LCD_displayCharacter+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	8e 01       	movw	r16, r28
    2910:	02 58       	subi	r16, 0x82	; 130
    2912:	1f 4f       	sbci	r17, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	e0 58       	subi	r30, 0x80	; 128
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	f8 01       	movw	r30, r16
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	de 01       	movw	r26, r28
    2932:	a6 58       	subi	r26, 0x86	; 134
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e2 58       	subi	r30, 0x82	; 130
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	11 96       	adiw	r26, 0x01	; 1
    2942:	9c 93       	st	X, r25
    2944:	8e 93       	st	-X, r24
    2946:	fe 01       	movw	r30, r28
    2948:	e6 58       	subi	r30, 0x86	; 134
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 81       	ld	r24, Z
    294e:	91 81       	ldd	r25, Z+1	; 0x01
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <LCD_displayCharacter+0x49c>
    2954:	fe 01       	movw	r30, r28
    2956:	e6 58       	subi	r30, 0x86	; 134
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
    295e:	22 c0       	rjmp	.+68     	; 0x29a4 <LCD_displayCharacter+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2960:	8e 01       	movw	r16, r28
    2962:	08 57       	subi	r16, 0x78	; 120
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	e7 57       	subi	r30, 0x77	; 119
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	80 83       	st	Z, r24
    2980:	de 01       	movw	r26, r28
    2982:	a7 58       	subi	r26, 0x87	; 135
    2984:	bf 4f       	sbci	r27, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	e8 57       	subi	r30, 0x78	; 120
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2990:	fe 01       	movw	r30, r28
    2992:	e7 58       	subi	r30, 0x87	; 135
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	8a 95       	dec	r24
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_displayCharacter+0x4e4>
    299c:	fe 01       	movw	r30, r28
    299e:	e7 58       	subi	r30, 0x87	; 135
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    29a4:	ab e3       	ldi	r26, 0x3B	; 59
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	eb e3       	ldi	r30, 0x3B	; 59
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	98 2f       	mov	r25, r24
    29b0:	9f 70       	andi	r25, 0x0F	; 15
    29b2:	fe 01       	movw	r30, r28
    29b4:	e7 55       	subi	r30, 0x57	; 87
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	80 7f       	andi	r24, 0xF0	; 240
    29bc:	89 2b       	or	r24, r25
    29be:	8c 93       	st	X, r24
    29c0:	fe 01       	movw	r30, r28
    29c2:	eb 58       	subi	r30, 0x8B	; 139
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a6 e1       	ldi	r26, 0x16	; 22
    29cc:	b4 e4       	ldi	r27, 0x44	; 68
    29ce:	80 83       	st	Z, r24
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	a2 83       	std	Z+2, r26	; 0x02
    29d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29d6:	8e 01       	movw	r16, r28
    29d8:	0f 58       	subi	r16, 0x8F	; 143
    29da:	1f 4f       	sbci	r17, 0xFF	; 255
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 58       	subi	r30, 0x8B	; 139
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	2b ea       	ldi	r18, 0xAB	; 171
    29ec:	3a ea       	ldi	r19, 0xAA	; 170
    29ee:	4a e2       	ldi	r20, 0x2A	; 42
    29f0:	50 e4       	ldi	r21, 0x40	; 64
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	f8 01       	movw	r30, r16
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	a2 83       	std	Z+2, r26	; 0x02
    2a02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a04:	fe 01       	movw	r30, r28
    2a06:	ef 58       	subi	r30, 0x8F	; 143
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e8       	ldi	r20, 0x80	; 128
    2a18:	5f e3       	ldi	r21, 0x3F	; 63
    2a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1e:	88 23       	and	r24, r24
    2a20:	34 f4       	brge	.+12     	; 0x2a2e <LCD_displayCharacter+0x57a>
		__ticks = 1;
    2a22:	fe 01       	movw	r30, r28
    2a24:	e0 59       	subi	r30, 0x90	; 144
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	80 83       	st	Z, r24
    2a2c:	e0 c0       	rjmp	.+448    	; 0x2bee <LCD_displayCharacter+0x73a>
	else if (__tmp > 255)
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 58       	subi	r30, 0x8F	; 143
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	60 81       	ld	r22, Z
    2a36:	71 81       	ldd	r23, Z+1	; 0x01
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	93 81       	ldd	r25, Z+3	; 0x03
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4f e7       	ldi	r20, 0x7F	; 127
    2a42:	53 e4       	ldi	r21, 0x43	; 67
    2a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a48:	18 16       	cp	r1, r24
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <LCD_displayCharacter+0x59a>
    2a4c:	c0 c0       	rjmp	.+384    	; 0x2bce <LCD_displayCharacter+0x71a>
	{
		_delay_ms(__us / 1000.0);
    2a4e:	fe 01       	movw	r30, r28
    2a50:	eb 58       	subi	r30, 0x8B	; 139
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a e7       	ldi	r20, 0x7A	; 122
    2a62:	54 e4       	ldi	r21, 0x44	; 68
    2a64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e4 59       	subi	r30, 0x94	; 148
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 83       	st	Z, r24
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	a2 83       	std	Z+2, r26	; 0x02
    2a78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	8e 01       	movw	r16, r28
    2a7c:	08 59       	subi	r16, 0x98	; 152
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e4 59       	subi	r30, 0x94	; 148
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a ef       	ldi	r20, 0xFA	; 250
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	80 83       	st	Z, r24
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	a2 83       	std	Z+2, r26	; 0x02
    2aa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e8 59       	subi	r30, 0x98	; 152
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	44 f4       	brge	.+16     	; 0x2ad6 <LCD_displayCharacter+0x622>
		__ticks = 1;
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ea 59       	subi	r30, 0x9A	; 154
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
    2ad4:	64 c0       	rjmp	.+200    	; 0x2b9e <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e8 59       	subi	r30, 0x98	; 152
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	0c f0       	brlt	.+2      	; 0x2af6 <LCD_displayCharacter+0x642>
    2af4:	43 c0       	rjmp	.+134    	; 0x2b7c <LCD_displayCharacter+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	fe 01       	movw	r30, r28
    2af8:	e4 59       	subi	r30, 0x94	; 148
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8e 01       	movw	r16, r28
    2b16:	0a 59       	subi	r16, 0x9A	; 154
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	1f c0       	rjmp	.+62     	; 0x2b6c <LCD_displayCharacter+0x6b8>
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ec 59       	subi	r30, 0x9C	; 156
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ec 59       	subi	r30, 0x9C	; 156
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <LCD_displayCharacter+0x692>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ec 59       	subi	r30, 0x9C	; 156
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	de 01       	movw	r26, r28
    2b56:	aa 59       	subi	r26, 0x9A	; 154
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	ea 59       	subi	r30, 0x9A	; 154
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	11 96       	adiw	r26, 0x01	; 1
    2b68:	9c 93       	st	X, r25
    2b6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	ea 59       	subi	r30, 0x9A	; 154
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	d1 f6       	brne	.-76     	; 0x2b2e <LCD_displayCharacter+0x67a>
    2b7a:	4b c0       	rjmp	.+150    	; 0x2c12 <LCD_displayCharacter+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	0a 59       	subi	r16, 0x9A	; 154
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	fe 01       	movw	r30, r28
    2b84:	e8 59       	subi	r30, 0x98	; 152
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	f8 01       	movw	r30, r16
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	de 01       	movw	r26, r28
    2ba0:	ae 59       	subi	r26, 0x9E	; 158
    2ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	ea 59       	subi	r30, 0x9A	; 154
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	11 96       	adiw	r26, 0x01	; 1
    2bb0:	9c 93       	st	X, r25
    2bb2:	8e 93       	st	-X, r24
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ee 59       	subi	r30, 0x9E	; 158
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_displayCharacter+0x70a>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ee 59       	subi	r30, 0x9E	; 158
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	22 c0       	rjmp	.+68     	; 0x2c12 <LCD_displayCharacter+0x75e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bce:	8e 01       	movw	r16, r28
    2bd0:	00 59       	subi	r16, 0x90	; 144
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ef 58       	subi	r30, 0x8F	; 143
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	f8 01       	movw	r30, r16
    2bec:	80 83       	st	Z, r24
    2bee:	de 01       	movw	r26, r28
    2bf0:	af 59       	subi	r26, 0x9F	; 159
    2bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e0 59       	subi	r30, 0x90	; 144
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ef 59       	subi	r30, 0x9F	; 159
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	8a 95       	dec	r24
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <LCD_displayCharacter+0x752>
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ef 59       	subi	r30, 0x9F	; 159
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 83       	st	Z, r24
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2c12:	ab e3       	ldi	r26, 0x3B	; 59
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	eb e3       	ldi	r30, 0x3B	; 59
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	87 7f       	andi	r24, 0xF7	; 247
    2c1e:	8c 93       	st	X, r24
    2c20:	fe 01       	movw	r30, r28
    2c22:	e3 5a       	subi	r30, 0xA3	; 163
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a6 e1       	ldi	r26, 0x16	; 22
    2c2c:	b4 e4       	ldi	r27, 0x44	; 68
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c36:	8e 01       	movw	r16, r28
    2c38:	07 5a       	subi	r16, 0xA7	; 167
    2c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e3 5a       	subi	r30, 0xA3	; 163
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	2b ea       	ldi	r18, 0xAB	; 171
    2c4c:	3a ea       	ldi	r19, 0xAA	; 170
    2c4e:	4a e2       	ldi	r20, 0x2A	; 42
    2c50:	50 e4       	ldi	r21, 0x40	; 64
    2c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	80 83       	st	Z, r24
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	a2 83       	std	Z+2, r26	; 0x02
    2c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c64:	fe 01       	movw	r30, r28
    2c66:	e7 5a       	subi	r30, 0xA7	; 167
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	34 f4       	brge	.+12     	; 0x2c8e <LCD_displayCharacter+0x7da>
		__ticks = 1;
    2c82:	fe 01       	movw	r30, r28
    2c84:	e8 5a       	subi	r30, 0xA8	; 168
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	80 83       	st	Z, r24
    2c8c:	e0 c0       	rjmp	.+448    	; 0x2e4e <LCD_displayCharacter+0x99a>
	else if (__tmp > 255)
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e7 5a       	subi	r30, 0xA7	; 167
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	53 e4       	ldi	r21, 0x43	; 67
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	0c f0       	brlt	.+2      	; 0x2cae <LCD_displayCharacter+0x7fa>
    2cac:	c0 c0       	rjmp	.+384    	; 0x2e2e <LCD_displayCharacter+0x97a>
	{
		_delay_ms(__us / 1000.0);
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e3 5a       	subi	r30, 0xA3	; 163
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	4a e7       	ldi	r20, 0x7A	; 122
    2cc2:	54 e4       	ldi	r21, 0x44	; 68
    2cc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ec 5a       	subi	r30, 0xAC	; 172
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	8e 01       	movw	r16, r28
    2cdc:	00 5b       	subi	r16, 0xB0	; 176
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ec 5a       	subi	r30, 0xAC	; 172
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	4a ef       	ldi	r20, 0xFA	; 250
    2cf4:	54 e4       	ldi	r21, 0x44	; 68
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	f8 01       	movw	r30, r16
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	a2 83       	std	Z+2, r26	; 0x02
    2d06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e0 5b       	subi	r30, 0xB0	; 176
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	44 f4       	brge	.+16     	; 0x2d36 <LCD_displayCharacter+0x882>
		__ticks = 1;
    2d26:	fe 01       	movw	r30, r28
    2d28:	e2 5b       	subi	r30, 0xB2	; 178
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	64 c0       	rjmp	.+200    	; 0x2dfe <LCD_displayCharacter+0x94a>
	else if (__tmp > 65535)
    2d36:	fe 01       	movw	r30, r28
    2d38:	e0 5b       	subi	r30, 0xB0	; 176
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	0c f0       	brlt	.+2      	; 0x2d56 <LCD_displayCharacter+0x8a2>
    2d54:	43 c0       	rjmp	.+134    	; 0x2ddc <LCD_displayCharacter+0x928>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	fe 01       	movw	r30, r28
    2d58:	ec 5a       	subi	r30, 0xAC	; 172
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e2       	ldi	r20, 0x20	; 32
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	8e 01       	movw	r16, r28
    2d76:	02 5b       	subi	r16, 0xB2	; 178
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	f8 01       	movw	r30, r16
    2d88:	91 83       	std	Z+1, r25	; 0x01
    2d8a:	80 83       	st	Z, r24
    2d8c:	1f c0       	rjmp	.+62     	; 0x2dcc <LCD_displayCharacter+0x918>
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e4 5b       	subi	r30, 0xB4	; 180
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	88 ec       	ldi	r24, 0xC8	; 200
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e4 5b       	subi	r30, 0xB4	; 180
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LCD_displayCharacter+0x8f2>
    2daa:	fe 01       	movw	r30, r28
    2dac:	e4 5b       	subi	r30, 0xB4	; 180
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	de 01       	movw	r26, r28
    2db6:	a2 5b       	subi	r26, 0xB2	; 178
    2db8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e2 5b       	subi	r30, 0xB2	; 178
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	11 96       	adiw	r26, 0x01	; 1
    2dc8:	9c 93       	st	X, r25
    2dca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e2 5b       	subi	r30, 0xB2	; 178
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	d1 f6       	brne	.-76     	; 0x2d8e <LCD_displayCharacter+0x8da>
    2dda:	4b c0       	rjmp	.+150    	; 0x2e72 <LCD_displayCharacter+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ddc:	8e 01       	movw	r16, r28
    2dde:	02 5b       	subi	r16, 0xB2	; 178
    2de0:	1f 4f       	sbci	r17, 0xFF	; 255
    2de2:	fe 01       	movw	r30, r28
    2de4:	e0 5b       	subi	r30, 0xB0	; 176
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	60 81       	ld	r22, Z
    2dea:	71 81       	ldd	r23, Z+1	; 0x01
    2dec:	82 81       	ldd	r24, Z+2	; 0x02
    2dee:	93 81       	ldd	r25, Z+3	; 0x03
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	f8 01       	movw	r30, r16
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	de 01       	movw	r26, r28
    2e00:	a6 5b       	subi	r26, 0xB6	; 182
    2e02:	bf 4f       	sbci	r27, 0xFF	; 255
    2e04:	fe 01       	movw	r30, r28
    2e06:	e2 5b       	subi	r30, 0xB2	; 178
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	11 96       	adiw	r26, 0x01	; 1
    2e10:	9c 93       	st	X, r25
    2e12:	8e 93       	st	-X, r24
    2e14:	fe 01       	movw	r30, r28
    2e16:	e6 5b       	subi	r30, 0xB6	; 182
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <LCD_displayCharacter+0x96a>
    2e22:	fe 01       	movw	r30, r28
    2e24:	e6 5b       	subi	r30, 0xB6	; 182
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	80 83       	st	Z, r24
    2e2c:	22 c0       	rjmp	.+68     	; 0x2e72 <LCD_displayCharacter+0x9be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e2e:	8e 01       	movw	r16, r28
    2e30:	08 5a       	subi	r16, 0xA8	; 168
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	e7 5a       	subi	r30, 0xA7	; 167
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	80 83       	st	Z, r24
    2e4e:	de 01       	movw	r26, r28
    2e50:	a7 5b       	subi	r26, 0xB7	; 183
    2e52:	bf 4f       	sbci	r27, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	e8 5a       	subi	r30, 0xA8	; 168
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e7 5b       	subi	r30, 0xB7	; 183
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	80 81       	ld	r24, Z
    2e66:	8a 95       	dec	r24
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <LCD_displayCharacter+0x9b2>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e7 5b       	subi	r30, 0xB7	; 183
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 83       	st	Z, r24
	_delay_us(600); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2e72:	ab e3       	ldi	r26, 0x3B	; 59
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	eb e3       	ldi	r30, 0x3B	; 59
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 60       	ori	r24, 0x08	; 8
    2e7e:	8c 93       	st	X, r24
    2e80:	fe 01       	movw	r30, r28
    2e82:	eb 5b       	subi	r30, 0xBB	; 187
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	a6 e1       	ldi	r26, 0x16	; 22
    2e8c:	b4 e4       	ldi	r27, 0x44	; 68
    2e8e:	80 83       	st	Z, r24
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	a2 83       	std	Z+2, r26	; 0x02
    2e94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e96:	8e 01       	movw	r16, r28
    2e98:	0f 5b       	subi	r16, 0xBF	; 191
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	eb 5b       	subi	r30, 0xBB	; 187
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	2b ea       	ldi	r18, 0xAB	; 171
    2eac:	3a ea       	ldi	r19, 0xAA	; 170
    2eae:	4a e2       	ldi	r20, 0x2A	; 42
    2eb0:	50 e4       	ldi	r21, 0x40	; 64
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	f8 01       	movw	r30, r16
    2ebc:	80 83       	st	Z, r24
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	a2 83       	std	Z+2, r26	; 0x02
    2ec2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ef 5b       	subi	r30, 0xBF	; 191
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e8       	ldi	r20, 0x80	; 128
    2ed8:	5f e3       	ldi	r21, 0x3F	; 63
    2eda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ede:	88 23       	and	r24, r24
    2ee0:	34 f4       	brge	.+12     	; 0x2eee <LCD_displayCharacter+0xa3a>
		__ticks = 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e0 5c       	subi	r30, 0xC0	; 192
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 83       	st	Z, r24
    2eec:	9d c0       	rjmp	.+314    	; 0x3028 <LCD_displayCharacter+0xb74>
	else if (__tmp > 255)
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ef 5b       	subi	r30, 0xBF	; 191
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4f e7       	ldi	r20, 0x7F	; 127
    2f02:	53 e4       	ldi	r21, 0x43	; 67
    2f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f08:	18 16       	cp	r1, r24
    2f0a:	0c f0       	brlt	.+2      	; 0x2f0e <LCD_displayCharacter+0xa5a>
    2f0c:	7e c0       	rjmp	.+252    	; 0x300a <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2f0e:	fe 01       	movw	r30, r28
    2f10:	eb 5b       	subi	r30, 0xBB	; 187
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a e7       	ldi	r20, 0x7A	; 122
    2f22:	54 e4       	ldi	r21, 0x44	; 68
    2f24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	8c af       	std	Y+60, r24	; 0x3c
    2f2e:	9d af       	std	Y+61, r25	; 0x3d
    2f30:	ae af       	std	Y+62, r26	; 0x3e
    2f32:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f36:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f38:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a ef       	ldi	r20, 0xFA	; 250
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	88 af       	std	Y+56, r24	; 0x38
    2f4e:	99 af       	std	Y+57, r25	; 0x39
    2f50:	aa af       	std	Y+58, r26	; 0x3a
    2f52:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2f54:	68 ad       	ldd	r22, Y+56	; 0x38
    2f56:	79 ad       	ldd	r23, Y+57	; 0x39
    2f58:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9f ab       	std	Y+55, r25	; 0x37
    2f72:	8e ab       	std	Y+54, r24	; 0x36
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    2f76:	68 ad       	ldd	r22, Y+56	; 0x38
    2f78:	79 ad       	ldd	r23, Y+57	; 0x39
    2f7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f90:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f92:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9f ab       	std	Y+55, r25	; 0x37
    2fb4:	8e ab       	std	Y+54, r24	; 0x36
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <LCD_displayCharacter+0xb22>
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9d ab       	std	Y+53, r25	; 0x35
    2fbe:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fc0:	8c a9       	ldd	r24, Y+52	; 0x34
    2fc2:	9d a9       	ldd	r25, Y+53	; 0x35
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LCD_displayCharacter+0xb10>
    2fc8:	9d ab       	std	Y+53, r25	; 0x35
    2fca:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8e a9       	ldd	r24, Y+54	; 0x36
    2fce:	9f a9       	ldd	r25, Y+55	; 0x37
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9f ab       	std	Y+55, r25	; 0x37
    2fd4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8e a9       	ldd	r24, Y+54	; 0x36
    2fd8:	9f a9       	ldd	r25, Y+55	; 0x37
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <LCD_displayCharacter+0xb04>
    2fde:	2d c0       	rjmp	.+90     	; 0x303a <LCD_displayCharacter+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	68 ad       	ldd	r22, Y+56	; 0x38
    2fe2:	79 ad       	ldd	r23, Y+57	; 0x39
    2fe4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fe6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9f ab       	std	Y+55, r25	; 0x37
    2ff2:	8e ab       	std	Y+54, r24	; 0x36
    2ff4:	8e a9       	ldd	r24, Y+54	; 0x36
    2ff6:	9f a9       	ldd	r25, Y+55	; 0x37
    2ff8:	9b ab       	std	Y+51, r25	; 0x33
    2ffa:	8a ab       	std	Y+50, r24	; 0x32
    2ffc:	8a a9       	ldd	r24, Y+50	; 0x32
    2ffe:	9b a9       	ldd	r25, Y+51	; 0x33
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <LCD_displayCharacter+0xb4c>
    3004:	9b ab       	std	Y+51, r25	; 0x33
    3006:	8a ab       	std	Y+50, r24	; 0x32
    3008:	18 c0       	rjmp	.+48     	; 0x303a <LCD_displayCharacter+0xb86>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    300a:	fe 01       	movw	r30, r28
    300c:	ef 5b       	subi	r30, 0xBF	; 191
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	fe 01       	movw	r30, r28
    3022:	e0 5c       	subi	r30, 0xC0	; 192
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 83       	st	Z, r24
    3028:	fe 01       	movw	r30, r28
    302a:	e0 5c       	subi	r30, 0xC0	; 192
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3032:	89 a9       	ldd	r24, Y+49	; 0x31
    3034:	8a 95       	dec	r24
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_displayCharacter+0xb80>
    3038:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(600); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    303a:	ab e3       	ldi	r26, 0x3B	; 59
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	eb e3       	ldi	r30, 0x3B	; 59
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	28 2f       	mov	r18, r24
    3046:	2f 70       	andi	r18, 0x0F	; 15
    3048:	fe 01       	movw	r30, r28
    304a:	e7 55       	subi	r30, 0x57	; 87
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	82 95       	swap	r24
    3056:	92 95       	swap	r25
    3058:	90 7f       	andi	r25, 0xF0	; 240
    305a:	98 27       	eor	r25, r24
    305c:	80 7f       	andi	r24, 0xF0	; 240
    305e:	98 27       	eor	r25, r24
    3060:	82 2b       	or	r24, r18
    3062:	8c 93       	st	X, r24
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	a6 e1       	ldi	r26, 0x16	; 22
    306a:	b4 e4       	ldi	r27, 0x44	; 68
    306c:	8d a7       	std	Y+45, r24	; 0x2d
    306e:	9e a7       	std	Y+46, r25	; 0x2e
    3070:	af a7       	std	Y+47, r26	; 0x2f
    3072:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3074:	6d a5       	ldd	r22, Y+45	; 0x2d
    3076:	7e a5       	ldd	r23, Y+46	; 0x2e
    3078:	8f a5       	ldd	r24, Y+47	; 0x2f
    307a:	98 a9       	ldd	r25, Y+48	; 0x30
    307c:	2b ea       	ldi	r18, 0xAB	; 171
    307e:	3a ea       	ldi	r19, 0xAA	; 170
    3080:	4a e2       	ldi	r20, 0x2A	; 42
    3082:	50 e4       	ldi	r21, 0x40	; 64
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	89 a7       	std	Y+41, r24	; 0x29
    308e:	9a a7       	std	Y+42, r25	; 0x2a
    3090:	ab a7       	std	Y+43, r26	; 0x2b
    3092:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3094:	69 a5       	ldd	r22, Y+41	; 0x29
    3096:	7a a5       	ldd	r23, Y+42	; 0x2a
    3098:	8b a5       	ldd	r24, Y+43	; 0x2b
    309a:	9c a5       	ldd	r25, Y+44	; 0x2c
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	1c f4       	brge	.+6      	; 0x30b2 <LCD_displayCharacter+0xbfe>
		__ticks = 1;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	88 a7       	std	Y+40, r24	; 0x28
    30b0:	91 c0       	rjmp	.+290    	; 0x31d4 <LCD_displayCharacter+0xd20>
	else if (__tmp > 255)
    30b2:	69 a5       	ldd	r22, Y+41	; 0x29
    30b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    30b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	53 e4       	ldi	r21, 0x43	; 67
    30c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	0c f0       	brlt	.+2      	; 0x30cc <LCD_displayCharacter+0xc18>
    30ca:	7b c0       	rjmp	.+246    	; 0x31c2 <LCD_displayCharacter+0xd0e>
	{
		_delay_ms(__us / 1000.0);
    30cc:	6d a5       	ldd	r22, Y+45	; 0x2d
    30ce:	7e a5       	ldd	r23, Y+46	; 0x2e
    30d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d2:	98 a9       	ldd	r25, Y+48	; 0x30
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	4a e7       	ldi	r20, 0x7A	; 122
    30da:	54 e4       	ldi	r21, 0x44	; 68
    30dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	8c a3       	std	Y+36, r24	; 0x24
    30e6:	9d a3       	std	Y+37, r25	; 0x25
    30e8:	ae a3       	std	Y+38, r26	; 0x26
    30ea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ec:	6c a1       	ldd	r22, Y+36	; 0x24
    30ee:	7d a1       	ldd	r23, Y+37	; 0x25
    30f0:	8e a1       	ldd	r24, Y+38	; 0x26
    30f2:	9f a1       	ldd	r25, Y+39	; 0x27
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	4a ef       	ldi	r20, 0xFA	; 250
    30fa:	54 e4       	ldi	r21, 0x44	; 68
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	88 a3       	std	Y+32, r24	; 0x20
    3106:	99 a3       	std	Y+33, r25	; 0x21
    3108:	aa a3       	std	Y+34, r26	; 0x22
    310a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    310c:	68 a1       	ldd	r22, Y+32	; 0x20
    310e:	79 a1       	ldd	r23, Y+33	; 0x21
    3110:	8a a1       	ldd	r24, Y+34	; 0x22
    3112:	9b a1       	ldd	r25, Y+35	; 0x23
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	2c f4       	brge	.+10     	; 0x312e <LCD_displayCharacter+0xc7a>
		__ticks = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9f 8f       	std	Y+31, r25	; 0x1f
    312a:	8e 8f       	std	Y+30, r24	; 0x1e
    312c:	3f c0       	rjmp	.+126    	; 0x31ac <LCD_displayCharacter+0xcf8>
	else if (__tmp > 65535)
    312e:	68 a1       	ldd	r22, Y+32	; 0x20
    3130:	79 a1       	ldd	r23, Y+33	; 0x21
    3132:	8a a1       	ldd	r24, Y+34	; 0x22
    3134:	9b a1       	ldd	r25, Y+35	; 0x23
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	4c f5       	brge	.+82     	; 0x3198 <LCD_displayCharacter+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3146:	6c a1       	ldd	r22, Y+36	; 0x24
    3148:	7d a1       	ldd	r23, Y+37	; 0x25
    314a:	8e a1       	ldd	r24, Y+38	; 0x26
    314c:	9f a1       	ldd	r25, Y+39	; 0x27
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e2       	ldi	r20, 0x20	; 32
    3154:	51 e4       	ldi	r21, 0x41	; 65
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9f 8f       	std	Y+31, r25	; 0x1f
    316c:	8e 8f       	std	Y+30, r24	; 0x1e
    316e:	0f c0       	rjmp	.+30     	; 0x318e <LCD_displayCharacter+0xcda>
    3170:	88 ec       	ldi	r24, 0xC8	; 200
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9d 8f       	std	Y+29, r25	; 0x1d
    3176:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3178:	8c 8d       	ldd	r24, Y+28	; 0x1c
    317a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LCD_displayCharacter+0xcc8>
    3180:	9d 8f       	std	Y+29, r25	; 0x1d
    3182:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3184:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3186:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	9f 8f       	std	Y+31, r25	; 0x1f
    318c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3190:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	69 f7       	brne	.-38     	; 0x3170 <LCD_displayCharacter+0xcbc>
    3196:	24 c0       	rjmp	.+72     	; 0x31e0 <LCD_displayCharacter+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3198:	68 a1       	ldd	r22, Y+32	; 0x20
    319a:	79 a1       	ldd	r23, Y+33	; 0x21
    319c:	8a a1       	ldd	r24, Y+34	; 0x22
    319e:	9b a1       	ldd	r25, Y+35	; 0x23
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9f 8f       	std	Y+31, r25	; 0x1f
    31aa:	8e 8f       	std	Y+30, r24	; 0x1e
    31ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31b0:	9b 8f       	std	Y+27, r25	; 0x1b
    31b2:	8a 8f       	std	Y+26, r24	; 0x1a
    31b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_displayCharacter+0xd04>
    31bc:	9b 8f       	std	Y+27, r25	; 0x1b
    31be:	8a 8f       	std	Y+26, r24	; 0x1a
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <LCD_displayCharacter+0xd2c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31c2:	69 a5       	ldd	r22, Y+41	; 0x29
    31c4:	7a a5       	ldd	r23, Y+42	; 0x2a
    31c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	88 a7       	std	Y+40, r24	; 0x28
    31d4:	88 a5       	ldd	r24, Y+40	; 0x28
    31d6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31d8:	89 8d       	ldd	r24, Y+25	; 0x19
    31da:	8a 95       	dec	r24
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_displayCharacter+0xd26>
    31de:	89 8f       	std	Y+25, r24	; 0x19
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    31e0:	ab e3       	ldi	r26, 0x3B	; 59
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	eb e3       	ldi	r30, 0x3B	; 59
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	87 7f       	andi	r24, 0xF7	; 247
    31ec:	8c 93       	st	X, r24
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a6 e1       	ldi	r26, 0x16	; 22
    31f4:	b4 e4       	ldi	r27, 0x44	; 68
    31f6:	8d 8b       	std	Y+21, r24	; 0x15
    31f8:	9e 8b       	std	Y+22, r25	; 0x16
    31fa:	af 8b       	std	Y+23, r26	; 0x17
    31fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3200:	7e 89       	ldd	r23, Y+22	; 0x16
    3202:	8f 89       	ldd	r24, Y+23	; 0x17
    3204:	98 8d       	ldd	r25, Y+24	; 0x18
    3206:	2b ea       	ldi	r18, 0xAB	; 171
    3208:	3a ea       	ldi	r19, 0xAA	; 170
    320a:	4a e2       	ldi	r20, 0x2A	; 42
    320c:	50 e4       	ldi	r21, 0x40	; 64
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	89 8b       	std	Y+17, r24	; 0x11
    3218:	9a 8b       	std	Y+18, r25	; 0x12
    321a:	ab 8b       	std	Y+19, r26	; 0x13
    321c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    321e:	69 89       	ldd	r22, Y+17	; 0x11
    3220:	7a 89       	ldd	r23, Y+18	; 0x12
    3222:	8b 89       	ldd	r24, Y+19	; 0x13
    3224:	9c 89       	ldd	r25, Y+20	; 0x14
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e8       	ldi	r20, 0x80	; 128
    322c:	5f e3       	ldi	r21, 0x3F	; 63
    322e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3232:	88 23       	and	r24, r24
    3234:	1c f4       	brge	.+6      	; 0x323c <LCD_displayCharacter+0xd88>
		__ticks = 1;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	88 8b       	std	Y+16, r24	; 0x10
    323a:	91 c0       	rjmp	.+290    	; 0x335e <LCD_displayCharacter+0xeaa>
	else if (__tmp > 255)
    323c:	69 89       	ldd	r22, Y+17	; 0x11
    323e:	7a 89       	ldd	r23, Y+18	; 0x12
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	4f e7       	ldi	r20, 0x7F	; 127
    324a:	53 e4       	ldi	r21, 0x43	; 67
    324c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3250:	18 16       	cp	r1, r24
    3252:	0c f0       	brlt	.+2      	; 0x3256 <LCD_displayCharacter+0xda2>
    3254:	7b c0       	rjmp	.+246    	; 0x334c <LCD_displayCharacter+0xe98>
	{
		_delay_ms(__us / 1000.0);
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	4a e7       	ldi	r20, 0x7A	; 122
    3264:	54 e4       	ldi	r21, 0x44	; 68
    3266:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	8c 87       	std	Y+12, r24	; 0x0c
    3270:	9d 87       	std	Y+13, r25	; 0x0d
    3272:	ae 87       	std	Y+14, r26	; 0x0e
    3274:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3276:	6c 85       	ldd	r22, Y+12	; 0x0c
    3278:	7d 85       	ldd	r23, Y+13	; 0x0d
    327a:	8e 85       	ldd	r24, Y+14	; 0x0e
    327c:	9f 85       	ldd	r25, Y+15	; 0x0f
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a ef       	ldi	r20, 0xFA	; 250
    3284:	54 e4       	ldi	r21, 0x44	; 68
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	88 87       	std	Y+8, r24	; 0x08
    3290:	99 87       	std	Y+9, r25	; 0x09
    3292:	aa 87       	std	Y+10, r26	; 0x0a
    3294:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3296:	68 85       	ldd	r22, Y+8	; 0x08
    3298:	79 85       	ldd	r23, Y+9	; 0x09
    329a:	8a 85       	ldd	r24, Y+10	; 0x0a
    329c:	9b 85       	ldd	r25, Y+11	; 0x0b
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	2c f4       	brge	.+10     	; 0x32b8 <LCD_displayCharacter+0xe04>
		__ticks = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9f 83       	std	Y+7, r25	; 0x07
    32b4:	8e 83       	std	Y+6, r24	; 0x06
    32b6:	3f c0       	rjmp	.+126    	; 0x3336 <LCD_displayCharacter+0xe82>
	else if (__tmp > 65535)
    32b8:	68 85       	ldd	r22, Y+8	; 0x08
    32ba:	79 85       	ldd	r23, Y+9	; 0x09
    32bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    32be:	9b 85       	ldd	r25, Y+11	; 0x0b
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	3f ef       	ldi	r19, 0xFF	; 255
    32c4:	4f e7       	ldi	r20, 0x7F	; 127
    32c6:	57 e4       	ldi	r21, 0x47	; 71
    32c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	4c f5       	brge	.+82     	; 0x3322 <LCD_displayCharacter+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    32d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    32d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e2       	ldi	r20, 0x20	; 32
    32de:	51 e4       	ldi	r21, 0x41	; 65
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9f 83       	std	Y+7, r25	; 0x07
    32f6:	8e 83       	std	Y+6, r24	; 0x06
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <LCD_displayCharacter+0xe64>
    32fa:	88 ec       	ldi	r24, 0xC8	; 200
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9d 83       	std	Y+5, r25	; 0x05
    3300:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	9d 81       	ldd	r25, Y+5	; 0x05
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <LCD_displayCharacter+0xe52>
    330a:	9d 83       	std	Y+5, r25	; 0x05
    330c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330e:	8e 81       	ldd	r24, Y+6	; 0x06
    3310:	9f 81       	ldd	r25, Y+7	; 0x07
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	9f 83       	std	Y+7, r25	; 0x07
    3316:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3318:	8e 81       	ldd	r24, Y+6	; 0x06
    331a:	9f 81       	ldd	r25, Y+7	; 0x07
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	69 f7       	brne	.-38     	; 0x32fa <LCD_displayCharacter+0xe46>
    3320:	24 c0       	rjmp	.+72     	; 0x336a <LCD_displayCharacter+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3322:	68 85       	ldd	r22, Y+8	; 0x08
    3324:	79 85       	ldd	r23, Y+9	; 0x09
    3326:	8a 85       	ldd	r24, Y+10	; 0x0a
    3328:	9b 85       	ldd	r25, Y+11	; 0x0b
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9f 83       	std	Y+7, r25	; 0x07
    3334:	8e 83       	std	Y+6, r24	; 0x06
    3336:	8e 81       	ldd	r24, Y+6	; 0x06
    3338:	9f 81       	ldd	r25, Y+7	; 0x07
    333a:	9b 83       	std	Y+3, r25	; 0x03
    333c:	8a 83       	std	Y+2, r24	; 0x02
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	9b 81       	ldd	r25, Y+3	; 0x03
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <LCD_displayCharacter+0xe8e>
    3346:	9b 83       	std	Y+3, r25	; 0x03
    3348:	8a 83       	std	Y+2, r24	; 0x02
    334a:	0f c0       	rjmp	.+30     	; 0x336a <LCD_displayCharacter+0xeb6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    334c:	69 89       	ldd	r22, Y+17	; 0x11
    334e:	7a 89       	ldd	r23, Y+18	; 0x12
    3350:	8b 89       	ldd	r24, Y+19	; 0x13
    3352:	9c 89       	ldd	r25, Y+20	; 0x14
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	88 8b       	std	Y+16, r24	; 0x10
    335e:	88 89       	ldd	r24, Y+16	; 0x10
    3360:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	8a 95       	dec	r24
    3366:	f1 f7       	brne	.-4      	; 0x3364 <LCD_displayCharacter+0xeb0>
    3368:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_us(600); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_us(600); /* delay for processing Th = 13ns */
#endif
}
    336a:	c7 55       	subi	r28, 0x57	; 87
    336c:	df 4f       	sbci	r29, 0xFF	; 255
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	1f 91       	pop	r17
    337e:	0f 91       	pop	r16
    3380:	08 95       	ret

00003382 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	00 d0       	rcall	.+0      	; 0x3388 <LCD_displayString+0x6>
    3388:	0f 92       	push	r0
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	9b 83       	std	Y+3, r25	; 0x03
    3390:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3392:	19 82       	std	Y+1, r1	; 0x01
    3394:	0e c0       	rjmp	.+28     	; 0x33b2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	9b 81       	ldd	r25, Y+3	; 0x03
    33a0:	fc 01       	movw	r30, r24
    33a2:	e2 0f       	add	r30, r18
    33a4:	f3 1f       	adc	r31, r19
    33a6:	80 81       	ld	r24, Z
    33a8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
		i++;
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	8f 5f       	subi	r24, 0xFF	; 255
    33b0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	fc 01       	movw	r30, r24
    33be:	e2 0f       	add	r30, r18
    33c0:	f3 1f       	adc	r31, r19
    33c2:	80 81       	ld	r24, Z
    33c4:	88 23       	and	r24, r24
    33c6:	39 f7       	brne	.-50     	; 0x3396 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	00 d0       	rcall	.+0      	; 0x33da <LCD_goToRowColumn+0x6>
    33da:	00 d0       	rcall	.+0      	; 0x33dc <LCD_goToRowColumn+0x8>
    33dc:	0f 92       	push	r0
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	8a 83       	std	Y+2, r24	; 0x02
    33e4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	3d 83       	std	Y+5, r19	; 0x05
    33ee:	2c 83       	std	Y+4, r18	; 0x04
    33f0:	8c 81       	ldd	r24, Y+4	; 0x04
    33f2:	9d 81       	ldd	r25, Y+5	; 0x05
    33f4:	81 30       	cpi	r24, 0x01	; 1
    33f6:	91 05       	cpc	r25, r1
    33f8:	c1 f0       	breq	.+48     	; 0x342a <LCD_goToRowColumn+0x56>
    33fa:	2c 81       	ldd	r18, Y+4	; 0x04
    33fc:	3d 81       	ldd	r19, Y+5	; 0x05
    33fe:	22 30       	cpi	r18, 0x02	; 2
    3400:	31 05       	cpc	r19, r1
    3402:	2c f4       	brge	.+10     	; 0x340e <LCD_goToRowColumn+0x3a>
    3404:	8c 81       	ldd	r24, Y+4	; 0x04
    3406:	9d 81       	ldd	r25, Y+5	; 0x05
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	61 f0       	breq	.+24     	; 0x3424 <LCD_goToRowColumn+0x50>
    340c:	19 c0       	rjmp	.+50     	; 0x3440 <LCD_goToRowColumn+0x6c>
    340e:	2c 81       	ldd	r18, Y+4	; 0x04
    3410:	3d 81       	ldd	r19, Y+5	; 0x05
    3412:	22 30       	cpi	r18, 0x02	; 2
    3414:	31 05       	cpc	r19, r1
    3416:	69 f0       	breq	.+26     	; 0x3432 <LCD_goToRowColumn+0x5e>
    3418:	8c 81       	ldd	r24, Y+4	; 0x04
    341a:	9d 81       	ldd	r25, Y+5	; 0x05
    341c:	83 30       	cpi	r24, 0x03	; 3
    341e:	91 05       	cpc	r25, r1
    3420:	61 f0       	breq	.+24     	; 0x343a <LCD_goToRowColumn+0x66>
    3422:	0e c0       	rjmp	.+28     	; 0x3440 <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address=col;
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	0b c0       	rjmp	.+22     	; 0x3440 <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address=col+0x40;
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	80 5c       	subi	r24, 0xC0	; 192
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	07 c0       	rjmp	.+14     	; 0x3440 <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address=col+0x10;
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	80 5f       	subi	r24, 0xF0	; 240
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	03 c0       	rjmp	.+6      	; 0x3440 <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address=col+0x50;
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	80 5b       	subi	r24, 0xB0	; 176
    343e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	80 68       	ori	r24, 0x80	; 128
    3444:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
}
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <LCD_displayStringRowColumn+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <LCD_displayStringRowColumn+0x8>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	6a 83       	std	Y+2, r22	; 0x02
    3468:	5c 83       	std	Y+4, r21	; 0x04
    346a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	6a 81       	ldd	r22, Y+2	; 0x02
    3470:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	9c 81       	ldd	r25, Y+4	; 0x04
    3478:	0e 94 c1 19 	call	0x3382	; 0x3382 <LCD_displayString>
}
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_sendCommand>
}
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	08 95       	ret

0000349e <LCD_Task>:


void LCD_Task(void)
{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	c2 55       	subi	r28, 0x52	; 82
    34a8:	d0 40       	sbci	r29, 0x00	; 0
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
	uint8 Question[][16] ={"12","45","78","25","74"};
    34b4:	80 e5       	ldi	r24, 0x50	; 80
    34b6:	fe 01       	movw	r30, r28
    34b8:	33 96       	adiw	r30, 0x03	; 3
    34ba:	df 01       	movw	r26, r30
    34bc:	98 2f       	mov	r25, r24
    34be:	1d 92       	st	X+, r1
    34c0:	9a 95       	dec	r25
    34c2:	e9 f7       	brne	.-6      	; 0x34be <LCD_Task+0x20>
    34c4:	81 e3       	ldi	r24, 0x31	; 49
    34c6:	92 e3       	ldi	r25, 0x32	; 50
    34c8:	a0 e0       	ldi	r26, 0x00	; 0
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	8b 83       	std	Y+3, r24	; 0x03
    34ce:	9c 83       	std	Y+4, r25	; 0x04
    34d0:	ad 83       	std	Y+5, r26	; 0x05
    34d2:	be 83       	std	Y+6, r27	; 0x06
    34d4:	8c e0       	ldi	r24, 0x0C	; 12
    34d6:	fe 01       	movw	r30, r28
    34d8:	37 96       	adiw	r30, 0x07	; 7
    34da:	df 01       	movw	r26, r30
    34dc:	98 2f       	mov	r25, r24
    34de:	1d 92       	st	X+, r1
    34e0:	9a 95       	dec	r25
    34e2:	e9 f7       	brne	.-6      	; 0x34de <LCD_Task+0x40>
    34e4:	84 e3       	ldi	r24, 0x34	; 52
    34e6:	95 e3       	ldi	r25, 0x35	; 53
    34e8:	a0 e0       	ldi	r26, 0x00	; 0
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	8b 8b       	std	Y+19, r24	; 0x13
    34ee:	9c 8b       	std	Y+20, r25	; 0x14
    34f0:	ad 8b       	std	Y+21, r26	; 0x15
    34f2:	be 8b       	std	Y+22, r27	; 0x16
    34f4:	8c e0       	ldi	r24, 0x0C	; 12
    34f6:	fe 01       	movw	r30, r28
    34f8:	77 96       	adiw	r30, 0x17	; 23
    34fa:	df 01       	movw	r26, r30
    34fc:	98 2f       	mov	r25, r24
    34fe:	1d 92       	st	X+, r1
    3500:	9a 95       	dec	r25
    3502:	e9 f7       	brne	.-6      	; 0x34fe <LCD_Task+0x60>
    3504:	87 e3       	ldi	r24, 0x37	; 55
    3506:	98 e3       	ldi	r25, 0x38	; 56
    3508:	a0 e0       	ldi	r26, 0x00	; 0
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	8b a3       	std	Y+35, r24	; 0x23
    350e:	9c a3       	std	Y+36, r25	; 0x24
    3510:	ad a3       	std	Y+37, r26	; 0x25
    3512:	be a3       	std	Y+38, r27	; 0x26
    3514:	8c e0       	ldi	r24, 0x0C	; 12
    3516:	fe 01       	movw	r30, r28
    3518:	b7 96       	adiw	r30, 0x27	; 39
    351a:	df 01       	movw	r26, r30
    351c:	98 2f       	mov	r25, r24
    351e:	1d 92       	st	X+, r1
    3520:	9a 95       	dec	r25
    3522:	e9 f7       	brne	.-6      	; 0x351e <LCD_Task+0x80>
    3524:	82 e3       	ldi	r24, 0x32	; 50
    3526:	95 e3       	ldi	r25, 0x35	; 53
    3528:	a0 e0       	ldi	r26, 0x00	; 0
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	8b ab       	std	Y+51, r24	; 0x33
    352e:	9c ab       	std	Y+52, r25	; 0x34
    3530:	ad ab       	std	Y+53, r26	; 0x35
    3532:	be ab       	std	Y+54, r27	; 0x36
    3534:	8c e0       	ldi	r24, 0x0C	; 12
    3536:	fe 01       	movw	r30, r28
    3538:	f7 96       	adiw	r30, 0x37	; 55
    353a:	df 01       	movw	r26, r30
    353c:	98 2f       	mov	r25, r24
    353e:	1d 92       	st	X+, r1
    3540:	9a 95       	dec	r25
    3542:	e9 f7       	brne	.-6      	; 0x353e <LCD_Task+0xa0>
    3544:	fe 01       	movw	r30, r28
    3546:	ed 5b       	subi	r30, 0xBD	; 189
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	87 e3       	ldi	r24, 0x37	; 55
    354c:	94 e3       	ldi	r25, 0x34	; 52
    354e:	a0 e0       	ldi	r26, 0x00	; 0
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	80 83       	st	Z, r24
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	a2 83       	std	Z+2, r26	; 0x02
    3558:	b3 83       	std	Z+3, r27	; 0x03
    355a:	8c e0       	ldi	r24, 0x0C	; 12
    355c:	34 96       	adiw	r30, 0x04	; 4
    355e:	df 01       	movw	r26, r30
    3560:	98 2f       	mov	r25, r24
    3562:	1d 92       	st	X+, r1
    3564:	9a 95       	dec	r25
    3566:	e9 f7       	brne	.-6      	; 0x3562 <LCD_Task+0xc4>
	static uint8 once=0;
	if(once==0)
    3568:	80 91 7c 00 	lds	r24, 0x007C
    356c:	88 23       	and	r24, r24
    356e:	69 f4       	brne	.+26     	; 0x358a <LCD_Task+0xec>
	{
		LCD_displayStringRowColumn(1,10,"Start");
    3570:	20 e6       	ldi	r18, 0x60	; 96
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	6a e0       	ldi	r22, 0x0A	; 10
    3578:	a9 01       	movw	r20, r18
    357a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCD_displayStringRowColumn>
		once++;
    357e:	80 91 7c 00 	lds	r24, 0x007C
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	80 93 7c 00 	sts	0x007C, r24
    3588:	4b c0       	rjmp	.+150    	; 0x3620 <LCD_Task+0x182>
	}
	else
	{
		if(once==1)
    358a:	80 91 7c 00 	lds	r24, 0x007C
    358e:	81 30       	cpi	r24, 0x01	; 1
    3590:	c9 f4       	brne	.+50     	; 0x35c4 <LCD_Task+0x126>
		{
			LCD_clearScreen();
    3592:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_clearScreen>
			LCD_displayString(Question[ProgramSteps]);
    3596:	9e 01       	movw	r18, r28
    3598:	2d 5f       	subi	r18, 0xFD	; 253
    359a:	3f 4f       	sbci	r19, 0xFF	; 255
    359c:	80 91 76 00 	lds	r24, 0x0076
    35a0:	88 2f       	mov	r24, r24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	82 95       	swap	r24
    35a6:	92 95       	swap	r25
    35a8:	90 7f       	andi	r25, 0xF0	; 240
    35aa:	98 27       	eor	r25, r24
    35ac:	80 7f       	andi	r24, 0xF0	; 240
    35ae:	98 27       	eor	r25, r24
    35b0:	82 0f       	add	r24, r18
    35b2:	93 1f       	adc	r25, r19
    35b4:	0e 94 c1 19 	call	0x3382	; 0x3382 <LCD_displayString>
			once++;
    35b8:	80 91 7c 00 	lds	r24, 0x007C
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	80 93 7c 00 	sts	0x007C, r24
    35c2:	2e c0       	rjmp	.+92     	; 0x3620 <LCD_Task+0x182>
		}
		else
		{
			static uint8 OldProgramSteps=0;

			uint8 *temp =Question[ProgramSteps];
    35c4:	9e 01       	movw	r18, r28
    35c6:	2d 5f       	subi	r18, 0xFD	; 253
    35c8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ca:	80 91 76 00 	lds	r24, 0x0076
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	82 95       	swap	r24
    35d4:	92 95       	swap	r25
    35d6:	90 7f       	andi	r25, 0xF0	; 240
    35d8:	98 27       	eor	r25, r24
    35da:	80 7f       	andi	r24, 0xF0	; 240
    35dc:	98 27       	eor	r25, r24
    35de:	82 0f       	add	r24, r18
    35e0:	93 1f       	adc	r25, r19
    35e2:	9a 83       	std	Y+2, r25	; 0x02
    35e4:	89 83       	std	Y+1, r24	; 0x01
			if(OldProgramSteps!=ProgramSteps)
    35e6:	90 91 7b 00 	lds	r25, 0x007B
    35ea:	80 91 76 00 	lds	r24, 0x0076
    35ee:	98 17       	cp	r25, r24
    35f0:	31 f0       	breq	.+12     	; 0x35fe <LCD_Task+0x160>
			{

				LCD_clearScreen();
    35f2:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_clearScreen>
				LCD_displayString(temp);
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	0e 94 c1 19 	call	0x3382	; 0x3382 <LCD_displayString>
			}
			if(ProgramSteps == 5)
    35fe:	80 91 76 00 	lds	r24, 0x0076
    3602:	85 30       	cpi	r24, 0x05	; 5
    3604:	49 f4       	brne	.+18     	; 0x3618 <LCD_Task+0x17a>
			{
				LCD_clearScreen();
    3606:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_clearScreen>
				LCD_displayCharacter(Score+48);
    360a:	80 91 77 00 	lds	r24, 0x0077
    360e:	80 5d       	subi	r24, 0xD0	; 208
    3610:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_displayCharacter>
				ProgramSteps=0;
    3614:	10 92 76 00 	sts	0x0076, r1
			}
			OldProgramSteps=ProgramSteps;
    3618:	80 91 76 00 	lds	r24, 0x0076
    361c:	80 93 7b 00 	sts	0x007B, r24
		}
	}
}
    3620:	ce 5a       	subi	r28, 0xAE	; 174
    3622:	df 4f       	sbci	r29, 0xFF	; 255
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <main>:
#include "keypad.h"



int main(void)
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62

	SOS_Init();
    363c:	0e 94 df 1b 	call	0x37be	; 0x37be <SOS_Init>
	KeyPad_Init();
    3640:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KeyPad_Init>
	LCD_init(); /* initialize LCD */
    3644:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_init>
	DIO_SetPinDirection(DIO_PIN12,1);
    3648:	8c e0       	ldi	r24, 0x0C	; 12
    364a:	61 e0       	ldi	r22, 0x01	; 1
    364c:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PIN13,1);
    3650:	8d e0       	ldi	r24, 0x0D	; 13
    3652:	61 e0       	ldi	r22, 0x01	; 1
    3654:	0e 94 b0 07 	call	0xf60	; 0xf60 <DIO_SetPinDirection>
	SOS_CreateTask(PRIORITY_1,200,Key_PressedTask);
    3658:	27 ec       	ldi	r18, 0xC7	; 199
    365a:	3a e0       	ldi	r19, 0x0A	; 10
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	68 ec       	ldi	r22, 0xC8	; 200
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	a9 01       	movw	r20, r18
    3664:	0e 94 20 1c 	call	0x3840	; 0x3840 <SOS_CreateTask>
	SOS_CreateTask(PRIORITY_0,200,LCD_Task);
    3668:	2f e4       	ldi	r18, 0x4F	; 79
    366a:	3a e1       	ldi	r19, 0x1A	; 26
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	68 ec       	ldi	r22, 0xC8	; 200
    3670:	70 e0       	ldi	r23, 0x00	; 0
    3672:	a9 01       	movw	r20, r18
    3674:	0e 94 20 1c 	call	0x3840	; 0x3840 <SOS_CreateTask>
	DIO_WritePin(DIO_PIN12,1);
    3678:	8c e0       	ldi	r24, 0x0C	; 12
    367a:	61 e0       	ldi	r22, 0x01	; 1
    367c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_WritePin>
	SET_BIT(SREG,I);
    3680:	af e5       	ldi	r26, 0x5F	; 95
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	ef e5       	ldi	r30, 0x5F	; 95
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	80 68       	ori	r24, 0x80	; 128
    368c:	8c 93       	st	X, r24
	SOS_Run();
    368e:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <SOS_Run>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	90 e0       	ldi	r25, 0x00	; 0
//		//		if(key == 1)
//		//		DIO_WritePin(DIO_PIN12,1);
//
//	}

}
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	11 24       	eor	r1, r1
    36a6:	ef 92       	push	r14
    36a8:	ff 92       	push	r15
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	2f 93       	push	r18
    36b0:	3f 93       	push	r19
    36b2:	4f 93       	push	r20
    36b4:	5f 93       	push	r21
    36b6:	6f 93       	push	r22
    36b8:	7f 93       	push	r23
    36ba:	8f 93       	push	r24
    36bc:	9f 93       	push	r25
    36be:	af 93       	push	r26
    36c0:	bf 93       	push	r27
    36c2:	ef 93       	push	r30
    36c4:	ff 93       	push	r31
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	0f 92       	push	r0
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
	g_Tick_Count++;
    36d0:	80 91 7d 00 	lds	r24, 0x007D
    36d4:	90 91 7e 00 	lds	r25, 0x007E
    36d8:	a0 91 7f 00 	lds	r26, 0x007F
    36dc:	b0 91 80 00 	lds	r27, 0x0080
    36e0:	01 96       	adiw	r24, 0x01	; 1
    36e2:	a1 1d       	adc	r26, r1
    36e4:	b1 1d       	adc	r27, r1
    36e6:	80 93 7d 00 	sts	0x007D, r24
    36ea:	90 93 7e 00 	sts	0x007E, r25
    36ee:	a0 93 7f 00 	sts	0x007F, r26
    36f2:	b0 93 80 00 	sts	0x0080, r27
	uint8 loopcounter;
	/*loop to find a task ready to be executed*/
	for(loopcounter = 0 ; loopcounter<ID_MAX ; loopcounter++)
    36f6:	19 82       	std	Y+1, r1	; 0x01
    36f8:	46 c0       	rjmp	.+140    	; 0x3786 <__vector_10+0xea>
	{
		/*check if there is a created task or not*/
		if(arr[loopcounter].Task_Ptr != NULL_PTR)
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	28 2f       	mov	r18, r24
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	c9 01       	movw	r24, r18
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	82 0f       	add	r24, r18
    370c:	93 1f       	adc	r25, r19
    370e:	fc 01       	movw	r30, r24
    3710:	ec 57       	subi	r30, 0x7C	; 124
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	91 f1       	breq	.+100    	; 0x3780 <__vector_10+0xe4>
		{
			/*check if the task is ready to be executed by check task Periodicity*/
			if((g_Tick_Count % (arr[loopcounter].Periodicity))==0u)
    371c:	e0 90 7d 00 	lds	r14, 0x007D
    3720:	f0 90 7e 00 	lds	r15, 0x007E
    3724:	00 91 7f 00 	lds	r16, 0x007F
    3728:	10 91 80 00 	lds	r17, 0x0080
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	c9 01       	movw	r24, r18
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	82 0f       	add	r24, r18
    373e:	93 1f       	adc	r25, r19
    3740:	fc 01       	movw	r30, r24
    3742:	ee 57       	subi	r30, 0x7E	; 126
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	9c 01       	movw	r18, r24
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	c8 01       	movw	r24, r16
    3752:	b7 01       	movw	r22, r14
    3754:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <__udivmodsi4>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	a1 05       	cpc	r26, r1
    3760:	b1 05       	cpc	r27, r1
    3762:	71 f4       	brne	.+28     	; 0x3780 <__vector_10+0xe4>
			{
				/*switch task state to Ready State*/
				arr[loopcounter].Mode = SOS_READY_MODE;
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	28 2f       	mov	r18, r24
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	c9 01       	movw	r24, r18
    376c:	88 0f       	add	r24, r24
    376e:	99 1f       	adc	r25, r25
    3770:	88 0f       	add	r24, r24
    3772:	99 1f       	adc	r25, r25
    3774:	82 0f       	add	r24, r18
    3776:	93 1f       	adc	r25, r19
    3778:	fc 01       	movw	r30, r24
    377a:	ef 57       	subi	r30, 0x7F	; 127
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	10 82       	st	Z, r1
ISR(TIMER0_COMP_vect)
{
	g_Tick_Count++;
	uint8 loopcounter;
	/*loop to find a task ready to be executed*/
	for(loopcounter = 0 ; loopcounter<ID_MAX ; loopcounter++)
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	8f 5f       	subi	r24, 0xFF	; 255
    3784:	89 83       	std	Y+1, r24	; 0x01
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	84 36       	cpi	r24, 0x64	; 100
    378a:	08 f4       	brcc	.+2      	; 0x378e <__vector_10+0xf2>
    378c:	b6 cf       	rjmp	.-148    	; 0x36fa <__vector_10+0x5e>
		{
			/*Do Nothing*/
		}

	}
}
    378e:	0f 90       	pop	r0
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	ff 91       	pop	r31
    3796:	ef 91       	pop	r30
    3798:	bf 91       	pop	r27
    379a:	af 91       	pop	r26
    379c:	9f 91       	pop	r25
    379e:	8f 91       	pop	r24
    37a0:	7f 91       	pop	r23
    37a2:	6f 91       	pop	r22
    37a4:	5f 91       	pop	r21
    37a6:	4f 91       	pop	r20
    37a8:	3f 91       	pop	r19
    37aa:	2f 91       	pop	r18
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	0f 90       	pop	r0
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	0f 90       	pop	r0
    37ba:	1f 90       	pop	r1
    37bc:	18 95       	reti

000037be <SOS_Init>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_Init(void)
{
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	0f 92       	push	r0
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
	TIMER_init();
    37c8:	0e 94 9f 08 	call	0x113e	; 0x113e <TIMER_init>
	uint8 LoopCounter = 0;
    37cc:	19 82       	std	Y+1, r1	; 0x01
	/*loop to Initialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    37ce:	19 82       	std	Y+1, r1	; 0x01
    37d0:	30 c0       	rjmp	.+96     	; 0x3832 <SOS_Init+0x74>
	{
		/*switch task state to Waiting State*/
		arr[LoopCounter].Mode = SOS_WAITING_MODE;
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	c9 01       	movw	r24, r18
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	82 0f       	add	r24, r18
    37e4:	93 1f       	adc	r25, r19
    37e6:	fc 01       	movw	r30, r24
    37e8:	ef 57       	subi	r30, 0x7F	; 127
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	82 e0       	ldi	r24, 0x02	; 2
    37ee:	80 83       	st	Z, r24
		/*Initialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	28 2f       	mov	r18, r24
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	c9 01       	movw	r24, r18
    37f8:	88 0f       	add	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	82 0f       	add	r24, r18
    3802:	93 1f       	adc	r25, r19
    3804:	fc 01       	movw	r30, r24
    3806:	ee 57       	subi	r30, 0x7E	; 126
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	11 82       	std	Z+1, r1	; 0x01
    380c:	10 82       	st	Z, r1
		/*Initialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	c9 01       	movw	r24, r18
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	82 0f       	add	r24, r18
    3820:	93 1f       	adc	r25, r19
    3822:	fc 01       	movw	r30, r24
    3824:	ec 57       	subi	r30, 0x7C	; 124
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	11 82       	std	Z+1, r1	; 0x01
    382a:	10 82       	st	Z, r1
void SOS_Init(void)
{
	TIMER_init();
	uint8 LoopCounter = 0;
	/*loop to Initialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	84 36       	cpi	r24, 0x64	; 100
    3836:	68 f2       	brcs	.-102    	; 0x37d2 <SOS_Init+0x14>
		/*Initialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
		/*Initialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
	}
}
    3838:	0f 90       	pop	r0
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <SOS_CreateTask>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
EnmSosStatus_t SOS_CreateTask(EnmSosPriority_t a_Priority, uint16 a_periodicity, void (* Task_Select_Ptr)(void))
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	00 d0       	rcall	.+0      	; 0x3846 <SOS_CreateTask+0x6>
    3846:	00 d0       	rcall	.+0      	; 0x3848 <SOS_CreateTask+0x8>
    3848:	00 d0       	rcall	.+0      	; 0x384a <SOS_CreateTask+0xa>
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	8a 83       	std	Y+2, r24	; 0x02
    3850:	7c 83       	std	Y+4, r23	; 0x04
    3852:	6b 83       	std	Y+3, r22	; 0x03
    3854:	5e 83       	std	Y+6, r21	; 0x06
    3856:	4d 83       	std	Y+5, r20	; 0x05
	/*Return Value*/
	EnmSosStatus_t ReternVal;
	/*To avoid condition of two tasks have same Priority*/
	if(arr[a_Priority].Task_Ptr != NULL_PTR)
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	c9 01       	movw	r24, r18
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	82 0f       	add	r24, r18
    386a:	93 1f       	adc	r25, r19
    386c:	fc 01       	movw	r30, r24
    386e:	ec 57       	subi	r30, 0x7C	; 124
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	00 97       	sbiw	r24, 0x00	; 0
    3878:	19 f0       	breq	.+6      	; 0x3880 <SOS_CreateTask+0x40>
	{
		ReternVal = RESERVED_TASK;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	89 83       	std	Y+1, r24	; 0x01
    387e:	32 c0       	rjmp	.+100    	; 0x38e4 <SOS_CreateTask+0xa4>
	}
	else
	{
		/*create task with its Priority and periodicity*/
		arr[a_Priority].Mode = SOS_WAITING_MODE;
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
    3882:	28 2f       	mov	r18, r24
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	c9 01       	movw	r24, r18
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	82 0f       	add	r24, r18
    3892:	93 1f       	adc	r25, r19
    3894:	fc 01       	movw	r30, r24
    3896:	ef 57       	subi	r30, 0x7F	; 127
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	82 e0       	ldi	r24, 0x02	; 2
    389c:	80 83       	st	Z, r24
		arr[a_Priority].Periodicity = a_periodicity;
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	28 2f       	mov	r18, r24
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	c9 01       	movw	r24, r18
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	82 0f       	add	r24, r18
    38b0:	93 1f       	adc	r25, r19
    38b2:	fc 01       	movw	r30, r24
    38b4:	ee 57       	subi	r30, 0x7E	; 126
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ba:	9c 81       	ldd	r25, Y+4	; 0x04
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	80 83       	st	Z, r24
		arr[a_Priority].Task_Ptr = Task_Select_Ptr;
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	28 2f       	mov	r18, r24
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	c9 01       	movw	r24, r18
    38c8:	88 0f       	add	r24, r24
    38ca:	99 1f       	adc	r25, r25
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	82 0f       	add	r24, r18
    38d2:	93 1f       	adc	r25, r19
    38d4:	fc 01       	movw	r30, r24
    38d6:	ec 57       	subi	r30, 0x7C	; 124
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	8d 81       	ldd	r24, Y+5	; 0x05
    38dc:	9e 81       	ldd	r25, Y+6	; 0x06
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	80 83       	st	Z, r24

		ReternVal = OK;
    38e2:	19 82       	std	Y+1, r1	; 0x01
	}

	return ReternVal;
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    38e6:	26 96       	adiw	r28, 0x06	; 6
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <SOS_Run>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_Run(void)
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	uint8 LoopCtr;
	while(1)
	{
		/*loop for searching about ready task to execute*/
		for(LoopCtr = 0; LoopCtr <ID_MAX ;LoopCtr++)
    3902:	19 82       	std	Y+1, r1	; 0x01
    3904:	42 c0       	rjmp	.+132    	; 0x398a <SOS_Run+0x92>
		{
			/*check if the task is ready to execute*/
			if(arr[LoopCtr].Mode == SOS_READY_MODE)
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	28 2f       	mov	r18, r24
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	c9 01       	movw	r24, r18
    390e:	88 0f       	add	r24, r24
    3910:	99 1f       	adc	r25, r25
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	82 0f       	add	r24, r18
    3918:	93 1f       	adc	r25, r19
    391a:	fc 01       	movw	r30, r24
    391c:	ef 57       	subi	r30, 0x7F	; 127
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	80 81       	ld	r24, Z
    3922:	88 23       	and	r24, r24
    3924:	79 f5       	brne	.+94     	; 0x3984 <SOS_Run+0x8c>
			{
				/*switch task state to Running State*/
				arr[LoopCtr].Mode = SOS_RUNING_MODE;
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	28 2f       	mov	r18, r24
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	c9 01       	movw	r24, r18
    392e:	88 0f       	add	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	82 0f       	add	r24, r18
    3938:	93 1f       	adc	r25, r19
    393a:	fc 01       	movw	r30, r24
    393c:	ef 57       	subi	r30, 0x7F	; 127
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	80 83       	st	Z, r24
				/*Run the Task*/
				arr[LoopCtr].Task_Ptr();
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	28 2f       	mov	r18, r24
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	c9 01       	movw	r24, r18
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	82 0f       	add	r24, r18
    3956:	93 1f       	adc	r25, r19
    3958:	fc 01       	movw	r30, r24
    395a:	ec 57       	subi	r30, 0x7C	; 124
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	01 90       	ld	r0, Z+
    3960:	f0 81       	ld	r31, Z
    3962:	e0 2d       	mov	r30, r0
    3964:	09 95       	icall
				/*wait for another task*/
				arr[LoopCtr].Mode = SOS_WAITING_MODE;
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	28 2f       	mov	r18, r24
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	c9 01       	movw	r24, r18
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	82 0f       	add	r24, r18
    3978:	93 1f       	adc	r25, r19
    397a:	fc 01       	movw	r30, r24
    397c:	ef 57       	subi	r30, 0x7F	; 127
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	80 83       	st	Z, r24
{
	uint8 LoopCtr;
	while(1)
	{
		/*loop for searching about ready task to execute*/
		for(LoopCtr = 0; LoopCtr <ID_MAX ;LoopCtr++)
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	8f 5f       	subi	r24, 0xFF	; 255
    3988:	89 83       	std	Y+1, r24	; 0x01
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	84 36       	cpi	r24, 0x64	; 100
    398e:	08 f4       	brcc	.+2      	; 0x3992 <SOS_Run+0x9a>
    3990:	ba cf       	rjmp	.-140    	; 0x3906 <SOS_Run+0xe>
    3992:	b7 cf       	rjmp	.-146    	; 0x3902 <SOS_Run+0xa>

00003994 <SOS_DeleteTask>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_DeleteTask(void (*DeletedTask_Ptr)(void))
{
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	00 d0       	rcall	.+0      	; 0x399a <SOS_DeleteTask+0x6>
    399a:	0f 92       	push	r0
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	9b 83       	std	Y+3, r25	; 0x03
    39a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loopcounter;
	/*loop to find the task that wanted to be deleted*/
	for(Loopcounter = 0; Loopcounter<ID_MAX ; Loopcounter++)
    39a4:	19 82       	std	Y+1, r1	; 0x01
    39a6:	45 c0       	rjmp	.+138    	; 0x3a32 <SOS_DeleteTask+0x9e>
	{
		/*check if the task is the desired task to be deleted*/
		if(arr[Loopcounter].Task_Ptr == DeletedTask_Ptr)
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	c9 01       	movw	r24, r18
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	82 0f       	add	r24, r18
    39ba:	93 1f       	adc	r25, r19
    39bc:	fc 01       	movw	r30, r24
    39be:	ec 57       	subi	r30, 0x7C	; 124
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	20 81       	ld	r18, Z
    39c4:	31 81       	ldd	r19, Z+1	; 0x01
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ca:	28 17       	cp	r18, r24
    39cc:	39 07       	cpc	r19, r25
    39ce:	71 f5       	brne	.+92     	; 0x3a2c <SOS_DeleteTask+0x98>
		{
			/*delete the task and get out of the loop*/
			arr[Loopcounter].Task_Ptr = NULL_PTR;
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	28 2f       	mov	r18, r24
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	c9 01       	movw	r24, r18
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	82 0f       	add	r24, r18
    39e2:	93 1f       	adc	r25, r19
    39e4:	fc 01       	movw	r30, r24
    39e6:	ec 57       	subi	r30, 0x7C	; 124
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	11 82       	std	Z+1, r1	; 0x01
    39ec:	10 82       	st	Z, r1
			arr[Loopcounter].Mode= SOS_WAITING_MODE;
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	28 2f       	mov	r18, r24
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	c9 01       	movw	r24, r18
    39f6:	88 0f       	add	r24, r24
    39f8:	99 1f       	adc	r25, r25
    39fa:	88 0f       	add	r24, r24
    39fc:	99 1f       	adc	r25, r25
    39fe:	82 0f       	add	r24, r18
    3a00:	93 1f       	adc	r25, r19
    3a02:	fc 01       	movw	r30, r24
    3a04:	ef 57       	subi	r30, 0x7F	; 127
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	80 83       	st	Z, r24
			arr[Loopcounter].Periodicity = 0u;
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	28 2f       	mov	r18, r24
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	c9 01       	movw	r24, r18
    3a14:	88 0f       	add	r24, r24
    3a16:	99 1f       	adc	r25, r25
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	82 0f       	add	r24, r18
    3a1e:	93 1f       	adc	r25, r19
    3a20:	fc 01       	movw	r30, r24
    3a22:	ee 57       	subi	r30, 0x7E	; 126
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	11 82       	std	Z+1, r1	; 0x01
    3a28:	10 82       	st	Z, r1
    3a2a:	07 c0       	rjmp	.+14     	; 0x3a3a <SOS_DeleteTask+0xa6>
 *******************************************************************************/
void SOS_DeleteTask(void (*DeletedTask_Ptr)(void))
{
	uint8 Loopcounter;
	/*loop to find the task that wanted to be deleted*/
	for(Loopcounter = 0; Loopcounter<ID_MAX ; Loopcounter++)
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	8f 5f       	subi	r24, 0xFF	; 255
    3a30:	89 83       	std	Y+1, r24	; 0x01
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	84 36       	cpi	r24, 0x64	; 100
    3a36:	08 f4       	brcc	.+2      	; 0x3a3a <SOS_DeleteTask+0xa6>
    3a38:	b7 cf       	rjmp	.-146    	; 0x39a8 <SOS_DeleteTask+0x14>
		else
		{
			/*Do Nothing*/
		}
	}
}
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <SOS_DeInit>:
 * Outputs:			NULL
 *
 * Return:			NULL
 *******************************************************************************/
void SOS_DeInit(void)
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	0f 92       	push	r0
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
	TIMER_Deinit();
    3a50:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <TIMER_Deinit>
	uint8 LoopCounter = 0;
    3a54:	19 82       	std	Y+1, r1	; 0x01
	/*loop to ReInitialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    3a56:	19 82       	std	Y+1, r1	; 0x01
    3a58:	30 c0       	rjmp	.+96     	; 0x3aba <SOS_DeInit+0x74>
	{
		/*switch task state to Waiting State*/
		arr[LoopCounter].Mode = SOS_WAITING_MODE;
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	c9 01       	movw	r24, r18
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	82 0f       	add	r24, r18
    3a6c:	93 1f       	adc	r25, r19
    3a6e:	fc 01       	movw	r30, r24
    3a70:	ef 57       	subi	r30, 0x7F	; 127
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	82 e0       	ldi	r24, 0x02	; 2
    3a76:	80 83       	st	Z, r24
		/*ReInitialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	c9 01       	movw	r24, r18
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	82 0f       	add	r24, r18
    3a8a:	93 1f       	adc	r25, r19
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	ee 57       	subi	r30, 0x7E	; 126
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	11 82       	std	Z+1, r1	; 0x01
    3a94:	10 82       	st	Z, r1
		/*ReInitialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	28 2f       	mov	r18, r24
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	c9 01       	movw	r24, r18
    3a9e:	88 0f       	add	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	82 0f       	add	r24, r18
    3aa8:	93 1f       	adc	r25, r19
    3aaa:	fc 01       	movw	r30, r24
    3aac:	ec 57       	subi	r30, 0x7C	; 124
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	11 82       	std	Z+1, r1	; 0x01
    3ab2:	10 82       	st	Z, r1
void SOS_DeInit(void)
{
	TIMER_Deinit();
	uint8 LoopCounter = 0;
	/*loop to ReInitialize the array of tasks*/
	for(LoopCounter = 0u; LoopCounter<ID_MAX; LoopCounter++)
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	8f 5f       	subi	r24, 0xFF	; 255
    3ab8:	89 83       	std	Y+1, r24	; 0x01
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	84 36       	cpi	r24, 0x64	; 100
    3abe:	68 f2       	brcs	.-102    	; 0x3a5a <SOS_DeInit+0x14>
		/*ReInitialize tasks Periodicity*/
		arr[LoopCounter].Periodicity = 0u;
		/*ReInitialize the tasks array*/
		arr[LoopCounter].Task_Ptr = NULL_PTR;
	}
}
    3ac0:	0f 90       	pop	r0
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	08 95       	ret

00003ac8 <__udivmodsi4>:
    3ac8:	a1 e2       	ldi	r26, 0x21	; 33
    3aca:	1a 2e       	mov	r1, r26
    3acc:	aa 1b       	sub	r26, r26
    3ace:	bb 1b       	sub	r27, r27
    3ad0:	fd 01       	movw	r30, r26
    3ad2:	0d c0       	rjmp	.+26     	; 0x3aee <__udivmodsi4_ep>

00003ad4 <__udivmodsi4_loop>:
    3ad4:	aa 1f       	adc	r26, r26
    3ad6:	bb 1f       	adc	r27, r27
    3ad8:	ee 1f       	adc	r30, r30
    3ada:	ff 1f       	adc	r31, r31
    3adc:	a2 17       	cp	r26, r18
    3ade:	b3 07       	cpc	r27, r19
    3ae0:	e4 07       	cpc	r30, r20
    3ae2:	f5 07       	cpc	r31, r21
    3ae4:	20 f0       	brcs	.+8      	; 0x3aee <__udivmodsi4_ep>
    3ae6:	a2 1b       	sub	r26, r18
    3ae8:	b3 0b       	sbc	r27, r19
    3aea:	e4 0b       	sbc	r30, r20
    3aec:	f5 0b       	sbc	r31, r21

00003aee <__udivmodsi4_ep>:
    3aee:	66 1f       	adc	r22, r22
    3af0:	77 1f       	adc	r23, r23
    3af2:	88 1f       	adc	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	1a 94       	dec	r1
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <__udivmodsi4_loop>
    3afa:	60 95       	com	r22
    3afc:	70 95       	com	r23
    3afe:	80 95       	com	r24
    3b00:	90 95       	com	r25
    3b02:	9b 01       	movw	r18, r22
    3b04:	ac 01       	movw	r20, r24
    3b06:	bd 01       	movw	r22, r26
    3b08:	cf 01       	movw	r24, r30
    3b0a:	08 95       	ret

00003b0c <__prologue_saves__>:
    3b0c:	2f 92       	push	r2
    3b0e:	3f 92       	push	r3
    3b10:	4f 92       	push	r4
    3b12:	5f 92       	push	r5
    3b14:	6f 92       	push	r6
    3b16:	7f 92       	push	r7
    3b18:	8f 92       	push	r8
    3b1a:	9f 92       	push	r9
    3b1c:	af 92       	push	r10
    3b1e:	bf 92       	push	r11
    3b20:	cf 92       	push	r12
    3b22:	df 92       	push	r13
    3b24:	ef 92       	push	r14
    3b26:	ff 92       	push	r15
    3b28:	0f 93       	push	r16
    3b2a:	1f 93       	push	r17
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	ca 1b       	sub	r28, r26
    3b36:	db 0b       	sbc	r29, r27
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	f8 94       	cli
    3b3c:	de bf       	out	0x3e, r29	; 62
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	09 94       	ijmp

00003b44 <__epilogue_restores__>:
    3b44:	2a 88       	ldd	r2, Y+18	; 0x12
    3b46:	39 88       	ldd	r3, Y+17	; 0x11
    3b48:	48 88       	ldd	r4, Y+16	; 0x10
    3b4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b50:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b52:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b54:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b56:	b9 84       	ldd	r11, Y+9	; 0x09
    3b58:	c8 84       	ldd	r12, Y+8	; 0x08
    3b5a:	df 80       	ldd	r13, Y+7	; 0x07
    3b5c:	ee 80       	ldd	r14, Y+6	; 0x06
    3b5e:	fd 80       	ldd	r15, Y+5	; 0x05
    3b60:	0c 81       	ldd	r16, Y+4	; 0x04
    3b62:	1b 81       	ldd	r17, Y+3	; 0x03
    3b64:	aa 81       	ldd	r26, Y+2	; 0x02
    3b66:	b9 81       	ldd	r27, Y+1	; 0x01
    3b68:	ce 0f       	add	r28, r30
    3b6a:	d1 1d       	adc	r29, r1
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	ed 01       	movw	r28, r26
    3b78:	08 95       	ret

00003b7a <_exit>:
    3b7a:	f8 94       	cli

00003b7c <__stop_program>:
    3b7c:	ff cf       	rjmp	.-2      	; 0x3b7c <__stop_program>
